//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.55;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.55] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x482454=_0x1252;function _0x1252(_0x22e5c6,_0x4197a9){const _0x2f3ea0=_0x2f3e();return _0x1252=function(_0x125203,_0x12a07a){_0x125203=_0x125203-0xde;let _0x1e76dd=_0x2f3ea0[_0x125203];return _0x1e76dd;},_0x1252(_0x22e5c6,_0x4197a9);}(function(_0x670469,_0x303604){const _0x48e1a0=_0x1252,_0x42243a=_0x670469();while(!![]){try{const _0x1b76c8=-parseInt(_0x48e1a0(0x608))/0x1+parseInt(_0x48e1a0(0x2fc))/0x2+-parseInt(_0x48e1a0(0x247))/0x3*(-parseInt(_0x48e1a0(0x890))/0x4)+parseInt(_0x48e1a0(0x161))/0x5+parseInt(_0x48e1a0(0x831))/0x6*(parseInt(_0x48e1a0(0x801))/0x7)+parseInt(_0x48e1a0(0x5e6))/0x8*(-parseInt(_0x48e1a0(0x60f))/0x9)+-parseInt(_0x48e1a0(0x37f))/0xa;if(_0x1b76c8===_0x303604)break;else _0x42243a['push'](_0x42243a['shift']());}catch(_0x811263){_0x42243a['push'](_0x42243a['shift']());}}}(_0x2f3e,0xb3423));var label=_0x482454(0x16e),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x482454(0x19d)](function(_0x38687d){const _0x2a1eb2=_0x482454;return _0x38687d[_0x2a1eb2(0x64b)]&&_0x38687d[_0x2a1eb2(0x65c)][_0x2a1eb2(0x4df)]('['+label+']');})[0x0];VisuMZ[label][_0x482454(0x4ae)]=VisuMZ[label]['Settings']||{},VisuMZ[_0x482454(0x4b9)]=function(_0x11c39d,_0x492b41){const _0x21a8ae=_0x482454;for(const _0x4fd3b6 in _0x492b41){if(_0x4fd3b6['match'](/(.*):(.*)/i)){const _0x15df8f=String(RegExp['$1']),_0x36e17b=String(RegExp['$2'])[_0x21a8ae(0x24b)]()[_0x21a8ae(0x910)]();let _0x40fcba,_0x4e5861,_0xc05474;switch(_0x36e17b){case'NUM':_0x40fcba=_0x492b41[_0x4fd3b6]!==''?Number(_0x492b41[_0x4fd3b6]):0x0;break;case _0x21a8ae(0x8b6):_0x4e5861=_0x492b41[_0x4fd3b6]!==''?JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6]):[],_0x40fcba=_0x4e5861['map'](_0x1edb4f=>Number(_0x1edb4f));break;case _0x21a8ae(0x5dc):_0x40fcba=_0x492b41[_0x4fd3b6]!==''?eval(_0x492b41[_0x4fd3b6]):null;break;case _0x21a8ae(0x76a):_0x4e5861=_0x492b41[_0x4fd3b6]!==''?JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6]):[],_0x40fcba=_0x4e5861['map'](_0x57ea2c=>eval(_0x57ea2c));break;case'JSON':_0x40fcba=_0x492b41[_0x4fd3b6]!==''?JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6]):'';break;case _0x21a8ae(0x10e):_0x4e5861=_0x492b41[_0x4fd3b6]!==''?JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6]):[],_0x40fcba=_0x4e5861[_0x21a8ae(0x597)](_0x574d97=>JSON[_0x21a8ae(0x3e5)](_0x574d97));break;case'FUNC':_0x40fcba=_0x492b41[_0x4fd3b6]!==''?new Function(JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6])):new Function(_0x21a8ae(0x3e6));break;case _0x21a8ae(0x5ff):_0x4e5861=_0x492b41[_0x4fd3b6]!==''?JSON['parse'](_0x492b41[_0x4fd3b6]):[],_0x40fcba=_0x4e5861[_0x21a8ae(0x597)](_0x142159=>new Function(JSON[_0x21a8ae(0x3e5)](_0x142159)));break;case'STR':_0x40fcba=_0x492b41[_0x4fd3b6]!==''?String(_0x492b41[_0x4fd3b6]):'';break;case _0x21a8ae(0x611):_0x4e5861=_0x492b41[_0x4fd3b6]!==''?JSON['parse'](_0x492b41[_0x4fd3b6]):[],_0x40fcba=_0x4e5861['map'](_0x500fb1=>String(_0x500fb1));break;case'STRUCT':_0xc05474=_0x492b41[_0x4fd3b6]!==''?JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6]):{},_0x11c39d[_0x15df8f]={},VisuMZ[_0x21a8ae(0x4b9)](_0x11c39d[_0x15df8f],_0xc05474);continue;case _0x21a8ae(0x2bb):_0x4e5861=_0x492b41[_0x4fd3b6]!==''?JSON[_0x21a8ae(0x3e5)](_0x492b41[_0x4fd3b6]):[],_0x40fcba=_0x4e5861[_0x21a8ae(0x597)](_0x16e537=>VisuMZ['ConvertParams']({},JSON['parse'](_0x16e537)));break;default:continue;}_0x11c39d[_0x15df8f]=_0x40fcba;}}return _0x11c39d;},(_0x3d05c0=>{const _0x4a8a09=_0x482454,_0x37eae8=_0x3d05c0[_0x4a8a09(0x7cb)];for(const _0x12ce98 of dependencies){if(!Imported[_0x12ce98]){alert(_0x4a8a09(0x5e8)[_0x4a8a09(0x355)](_0x37eae8,_0x12ce98)),SceneManager['exit']();break;}}const _0x58aef4=_0x3d05c0[_0x4a8a09(0x65c)];if(_0x58aef4[_0x4a8a09(0x445)](/\[Version[ ](.*?)\]/i)){const _0x4c906a=Number(RegExp['$1']);_0x4c906a!==VisuMZ[label][_0x4a8a09(0x745)]&&(alert(_0x4a8a09(0x64f)[_0x4a8a09(0x355)](_0x37eae8,_0x4c906a)),SceneManager[_0x4a8a09(0x112)]());}if(_0x58aef4[_0x4a8a09(0x445)](/\[Tier[ ](\d+)\]/i)){const _0x138fdc=Number(RegExp['$1']);_0x138fdc<tier?(alert(_0x4a8a09(0x850)[_0x4a8a09(0x355)](_0x37eae8,_0x138fdc,tier)),SceneManager[_0x4a8a09(0x112)]()):tier=Math['max'](_0x138fdc,tier);}VisuMZ[_0x4a8a09(0x4b9)](VisuMZ[label][_0x4a8a09(0x4ae)],_0x3d05c0[_0x4a8a09(0x4f0)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x2cba73){const _0x5dee1b=_0x482454;let _0x237f94=[];for(const _0x49c70a of _0x2cba73){_0x237f94=_0x237f94[_0x5dee1b(0x515)](VisuMZ['ConvertActionSequenceTarget'](_0x49c70a));}return _0x237f94[_0x5dee1b(0x19d)](_0x48eb12=>_0x48eb12);},VisuMZ['ConvertActionSequenceTarget']=function(_0x362e17){const _0x4d9db1=_0x482454,_0xbf3d76=BattleManager[_0x4d9db1(0x1ed)]()[_0x4d9db1(0x19d)](_0x54343=>_0x54343&&_0x54343[_0x4d9db1(0x616)]()),_0x3b9cc7=BattleManager[_0x4d9db1(0x57d)],_0x14a317=BattleManager[_0x4d9db1(0x2e8)],_0x5c6ef8=BattleManager['_allTargets']?BattleManager[_0x4d9db1(0x1d5)][_0x4d9db1(0x808)](0x0):_0xbf3d76;_0x362e17=_0x362e17[_0x4d9db1(0x61c)]()[_0x4d9db1(0x910)]();if(_0x362e17==='user')return[_0x3b9cc7];else{if(_0x362e17==='current\x20target')return[_0x14a317];else{if(_0x362e17===_0x4d9db1(0x243)){if(_0x14a317){const _0xfb13aa=_0x5c6ef8[_0x4d9db1(0x7ac)](_0x14a317);return _0xfb13aa>=0x0?[_0x5c6ef8[_0xfb13aa-0x1]||_0x14a317]:[_0x14a317];}}else{if(_0x362e17===_0x4d9db1(0x631)){if(_0x14a317){const _0x4838cd=_0x5c6ef8[_0x4d9db1(0x7ac)](_0x14a317);return _0x4838cd>=0x0?[_0x5c6ef8[_0x4838cd+0x1]||_0x14a317]:[_0x14a317];}}else{if(_0x362e17===_0x4d9db1(0x3b5))return _0x5c6ef8;else{if(_0x362e17===_0x4d9db1(0x858))return[_0x3b9cc7][_0x4d9db1(0x515)](_0x5c6ef8);else{if(_0x362e17==='not\x20focus')return _0xbf3d76['filter'](_0x1c8b6d=>_0x1c8b6d!==_0x3b9cc7&&!_0x5c6ef8[_0x4d9db1(0x4df)](_0x1c8b6d)&&_0x1c8b6d[_0x4d9db1(0x497)]());}}}}}}if(_0x3b9cc7){if(_0x362e17==='alive\x20friends')return _0x3b9cc7['friendsUnit']()[_0x4d9db1(0x7e3)]();else{if(_0x362e17==='alive\x20friends\x20not\x20user')return _0x3b9cc7[_0x4d9db1(0x732)]()[_0x4d9db1(0x7e3)]()['filter'](_0x18b152=>_0x18b152!==_0x3b9cc7);else{if(_0x362e17===_0x4d9db1(0x8cd))return _0x3b9cc7['friendsUnit']()[_0x4d9db1(0x7e3)]()['filter'](_0x51c915=>_0x51c915!==_0x14a317);else{if(_0x362e17===_0x4d9db1(0xf1))return _0x3b9cc7[_0x4d9db1(0x732)]()[_0x4d9db1(0x5f9)]();else{if(_0x362e17[_0x4d9db1(0x445)](/FRIEND INDEX (\d+)/i)){const _0xf8c9f6=Number(RegExp['$1']);return[_0x3b9cc7['friendsUnit']()[_0x4d9db1(0x6d8)]()[_0xf8c9f6]];}}}}}if(_0x362e17==='alive\x20opponents')return _0x3b9cc7[_0x4d9db1(0xfd)]()[_0x4d9db1(0x7e3)]();else{if(_0x362e17===_0x4d9db1(0x382))return _0x3b9cc7[_0x4d9db1(0xfd)]()[_0x4d9db1(0x7e3)]()[_0x4d9db1(0x19d)](_0x3f6dd7=>_0x3f6dd7!==_0x14a317);else{if(_0x362e17===_0x4d9db1(0x48b))return _0x3b9cc7[_0x4d9db1(0xfd)]()[_0x4d9db1(0x5f9)]();else{if(_0x362e17[_0x4d9db1(0x445)](/OPPONENT INDEX (\d+)/i)){const _0x14890b=Number(RegExp['$1']);return[_0x3b9cc7['opponentsUnit']()['members']()[_0x14890b]];}}}}}if(_0x362e17==='alive\x20actors')return $gameParty[_0x4d9db1(0x7e3)]();else{if(_0x362e17===_0x4d9db1(0x640))return $gameParty['aliveMembers']()[_0x4d9db1(0x19d)](_0x5aa9f9=>_0x5aa9f9!==_0x3b9cc7);else{if(_0x362e17==='alive\x20actors\x20not\x20target')return $gameParty[_0x4d9db1(0x7e3)]()[_0x4d9db1(0x19d)](_0x4f6b5d=>_0x4f6b5d!==_0x14a317);else{if(_0x362e17===_0x4d9db1(0x8c9))return $gameParty[_0x4d9db1(0x5f9)]();else{if(_0x362e17[_0x4d9db1(0x445)](/ACTOR INDEX (\d+)/i)){const _0x5b1784=Number(RegExp['$1']);return[$gameParty[_0x4d9db1(0x6d8)]()[_0x5b1784]];}else{if(_0x362e17[_0x4d9db1(0x445)](/ACTOR ID (\d+)/i)){const _0x251188=Number(RegExp['$1']);return[$gameActors[_0x4d9db1(0x57b)](_0x251188)];}}}}}}if(_0x362e17===_0x4d9db1(0x286))return $gameTroop['aliveMembers']();else{if(_0x362e17===_0x4d9db1(0x1c5))return $gameTroop[_0x4d9db1(0x7e3)]()[_0x4d9db1(0x19d)](_0x4c3901=>_0x4c3901!==_0x3b9cc7);else{if(_0x362e17==='alive\x20enemies\x20not\x20target')return $gameTroop[_0x4d9db1(0x7e3)]()[_0x4d9db1(0x19d)](_0x3da57f=>_0x3da57f!==_0x14a317);else{if(_0x362e17===_0x4d9db1(0x967))return $gameTroop[_0x4d9db1(0x5f9)]();else{if(_0x362e17[_0x4d9db1(0x445)](/ENEMY INDEX (\d+)/i)){const _0x439856=Number(RegExp['$1']);return[$gameTroop[_0x4d9db1(0x6d8)]()[_0x439856]];}else{if(_0x362e17[_0x4d9db1(0x445)](/ENEMY ID (\d+)/i)){const _0x39df77=Number(RegExp['$1']);return $gameTroop[_0x4d9db1(0x7e3)]()[_0x4d9db1(0x19d)](_0x3738be=>_0x3738be[_0x4d9db1(0x140)]()===_0x39df77);}}}}}}if(_0x362e17==='alive\x20battlers')return _0xbf3d76[_0x4d9db1(0x19d)](_0x574cd2=>_0x574cd2[_0x4d9db1(0x825)]());else{if(_0x362e17===_0x4d9db1(0x7ef))return _0xbf3d76['filter'](_0x66c3ed=>_0x66c3ed['isAlive']()&&_0x66c3ed!==_0x3b9cc7);else{if(_0x362e17===_0x4d9db1(0x8fc))return _0xbf3d76[_0x4d9db1(0x19d)](_0x1c8abd=>_0x1c8abd['isAlive']()&&_0x1c8abd!==_0x14a317);else{if(_0x362e17===_0x4d9db1(0x4b8))return _0xbf3d76[_0x4d9db1(0x19d)](_0x1eac64=>_0x1eac64[_0x4d9db1(0x7a7)]());}}}return[];},PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x6d6),_0xa935db=>{const _0x2c10dc=_0x482454;if(!SceneManager[_0x2c10dc(0x1f8)]())return;VisuMZ[_0x2c10dc(0x4b9)](_0xa935db,_0xa935db);const _0x1a90d9=$gameTemp[_0x2c10dc(0x2c6)](),_0x5c92ec=BattleManager[_0x2c10dc(0x815)],_0x480cd5=BattleManager[_0x2c10dc(0x57d)],_0x853d3a=BattleManager['_allTargets']?BattleManager[_0x2c10dc(0x1d5)][_0x2c10dc(0x808)](0x0):[],_0x50aafe=BattleManager[_0x2c10dc(0x3bc)];if(!_0x1a90d9||!_0x5c92ec||!_0x480cd5)return;if(!_0x5c92ec[_0x2c10dc(0x94e)]())return;if(_0xa935db[_0x2c10dc(0x28f)])_0x50aafe['displayAction'](_0x480cd5,_0x5c92ec[_0x2c10dc(0x94e)]());_0xa935db[_0x2c10dc(0x8c6)]&&_0x50aafe[_0x2c10dc(0x32d)](_0x2c10dc(0x315),_0x480cd5,_0x853d3a,!![]);if(_0xa935db['ActionStart'])_0x50aafe[_0x2c10dc(0x32d)](_0x2c10dc(0x792),_0x480cd5,_0x5c92ec);if(_0xa935db[_0x2c10dc(0x3de)])_0x50aafe[_0x2c10dc(0x32d)](_0x2c10dc(0x8d2));if(_0xa935db[_0x2c10dc(0x559)])_0x50aafe[_0x2c10dc(0x32d)](_0x2c10dc(0x46a),_0x480cd5,_0x5c92ec);if(_0xa935db['WaitForAnimation'])_0x50aafe[_0x2c10dc(0x32d)](_0x2c10dc(0x1e4));_0x1a90d9[_0x2c10dc(0x953)](_0x2c10dc(0x4f5));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x6a6),_0x1ac44b=>{const _0x5b1e14=_0x482454;if(!SceneManager[_0x5b1e14(0x1f8)]())return;VisuMZ['ConvertParams'](_0x1ac44b,_0x1ac44b);const _0x3162fc=$gameTemp[_0x5b1e14(0x2c6)](),_0x5f3fa3=BattleManager[_0x5b1e14(0x815)],_0x3a2c8b=BattleManager[_0x5b1e14(0x57d)],_0x235e92=BattleManager[_0x5b1e14(0x1d5)]?BattleManager[_0x5b1e14(0x1d5)][_0x5b1e14(0x808)](0x0):[],_0x12df08=BattleManager['_logWindow'],_0x462510=_0x1ac44b[_0x5b1e14(0x6fd)]??![];if(!_0x3162fc||!_0x5f3fa3||!_0x3a2c8b)return;if(!_0x5f3fa3[_0x5b1e14(0x94e)]())return;let _0x4fa935=_0x462510?_0x12df08['getDualWieldTimes'](_0x3a2c8b):0x1;for(let _0x325941=0x0;_0x325941<_0x4fa935;_0x325941++){_0x462510&&_0x3a2c8b[_0x5b1e14(0x761)]()&&_0x12df08[_0x5b1e14(0x32d)]('setActiveWeaponSet',_0x3a2c8b,_0x325941);if(_0x1ac44b[_0x5b1e14(0x4dc)])_0x12df08[_0x5b1e14(0x32d)](_0x5b1e14(0x688),_0x3a2c8b,_0x5f3fa3);if(_0x1ac44b[_0x5b1e14(0x192)]>0x0)_0x12df08['push']('waitCount',_0x1ac44b[_0x5b1e14(0x192)]);if(_0x1ac44b[_0x5b1e14(0x799)])_0x12df08[_0x5b1e14(0x32d)](_0x5b1e14(0x2a5),_0x3a2c8b,_0x235e92,_0x5f3fa3[_0x5b1e14(0x94e)]()[_0x5b1e14(0x931)]);if(_0x1ac44b['WaitForAnimation'])_0x12df08[_0x5b1e14(0x32d)](_0x5b1e14(0x1e4));for(const _0x22e704 of _0x235e92){if(!_0x22e704)continue;if(_0x1ac44b[_0x5b1e14(0x22a)])_0x12df08[_0x5b1e14(0x32d)](_0x5b1e14(0x581),_0x3a2c8b,_0x22e704);}}_0x462510&&_0x3a2c8b[_0x5b1e14(0x761)]()&&_0x12df08[_0x5b1e14(0x32d)](_0x5b1e14(0x83a),_0x3a2c8b);if(_0x1ac44b[_0x5b1e14(0x8c6)])_0x12df08[_0x5b1e14(0x32d)](_0x5b1e14(0x315),_0x3a2c8b,_0x235e92,![]);_0x3162fc['setWaitMode'](_0x5b1e14(0x4f5));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_Set_TargetActionSet',_0x10ea33=>{const _0x1c59b2=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1c59b2(0x4b9)](_0x10ea33,_0x10ea33);const _0x1e0828=$gameTemp['getLastPluginCommandInterpreter'](),_0x249156=BattleManager[_0x1c59b2(0x815)],_0x583aa6=BattleManager[_0x1c59b2(0x57d)],_0x281bf6=BattleManager[_0x1c59b2(0x1d5)]?BattleManager['_allTargets'][_0x1c59b2(0x808)](0x0):[],_0x45f85c=BattleManager[_0x1c59b2(0x3bc)],_0x3c1dea=_0x10ea33[_0x1c59b2(0x6fd)]??![];if(!_0x1e0828||!_0x249156||!_0x583aa6)return;if(!_0x249156[_0x1c59b2(0x94e)]())return;let _0x44c275=_0x3c1dea?_0x45f85c[_0x1c59b2(0x141)](_0x583aa6):0x1;for(let _0x2c9ef5=0x0;_0x2c9ef5<_0x44c275;_0x2c9ef5++){for(const _0x457533 of _0x281bf6){if(!_0x457533)continue;_0x3c1dea&&_0x583aa6[_0x1c59b2(0x761)]()&&_0x45f85c[_0x1c59b2(0x32d)]('setActiveWeaponSet',_0x583aa6,_0x2c9ef5);if(_0x10ea33[_0x1c59b2(0x4dc)])_0x45f85c['push'](_0x1c59b2(0x688),_0x583aa6,_0x249156);if(_0x10ea33['WaitCount1']>0x0)_0x45f85c['push']('waitCount',_0x10ea33[_0x1c59b2(0x15f)]);if(_0x10ea33[_0x1c59b2(0x799)])_0x45f85c[_0x1c59b2(0x32d)](_0x1c59b2(0x2a5),_0x583aa6,[_0x457533],_0x249156['item']()[_0x1c59b2(0x931)]);if(_0x10ea33['WaitCount2']>0x0)_0x45f85c[_0x1c59b2(0x32d)](_0x1c59b2(0x7bf),_0x10ea33[_0x1c59b2(0x7ee)]);if(_0x10ea33['ActionEffect'])_0x45f85c['push'](_0x1c59b2(0x581),_0x583aa6,_0x457533);}}_0x3c1dea&&_0x583aa6[_0x1c59b2(0x761)]()&&_0x45f85c[_0x1c59b2(0x32d)](_0x1c59b2(0x83a),_0x583aa6);if(_0x10ea33['ApplyImmortal'])_0x45f85c[_0x1c59b2(0x32d)]('applyImmortal',_0x583aa6,_0x281bf6,![]);_0x1e0828['setWaitMode']('battlelog');}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x15a),_0x26968d=>{const _0x58b4f4=_0x482454;if(!SceneManager[_0x58b4f4(0x1f8)]())return;VisuMZ['ConvertParams'](_0x26968d,_0x26968d);const _0x4d9783=$gameTemp[_0x58b4f4(0x2c6)](),_0x2fdc45=BattleManager[_0x58b4f4(0x815)],_0x5338c2=BattleManager['_subject'],_0x406388=BattleManager[_0x58b4f4(0x1d5)]?BattleManager[_0x58b4f4(0x1d5)]['slice'](0x0):[],_0x1bcd40=BattleManager['_logWindow'];if(!_0x4d9783||!_0x2fdc45||!_0x5338c2)return;if(!_0x2fdc45[_0x58b4f4(0x94e)]())return;if(_0x26968d[_0x58b4f4(0x8c6)])_0x1bcd40[_0x58b4f4(0x32d)](_0x58b4f4(0x315),_0x5338c2,_0x406388,![]);if(_0x26968d[_0x58b4f4(0x626)])_0x1bcd40[_0x58b4f4(0x32d)](_0x58b4f4(0x3f0));if(_0x26968d[_0x58b4f4(0x7c4)])_0x1bcd40[_0x58b4f4(0x32d)](_0x58b4f4(0x81b));if(_0x26968d[_0x58b4f4(0x6e9)])_0x1bcd40[_0x58b4f4(0x32d)]('clear');if(_0x26968d[_0x58b4f4(0x5a4)])_0x1bcd40[_0x58b4f4(0x32d)](_0x58b4f4(0x561),_0x5338c2);if(_0x26968d[_0x58b4f4(0x3de)])_0x1bcd40[_0x58b4f4(0x32d)](_0x58b4f4(0x8d2));_0x4d9783[_0x58b4f4(0x953)](_0x58b4f4(0x4f5));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x61a),_0x457c4e=>{const _0x184cfc=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x184cfc(0x80d)])return;VisuMZ[_0x184cfc(0x4b9)](_0x457c4e,_0x457c4e);const _0x2bc111=$gameTemp[_0x184cfc(0x2c6)](),_0x4ec0c1=_0x457c4e['WaitForAngle'];if(!_0x2bc111)return;$gameScreen[_0x184cfc(0x62a)](_0x457c4e[_0x184cfc(0x669)],_0x457c4e[_0x184cfc(0x704)],_0x457c4e[_0x184cfc(0x92f)]);if(_0x4ec0c1)_0x2bc111[_0x184cfc(0x953)]('battleAngle');}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x8bd),_0x457d7b=>{const _0x512411=_0x482454;if(!SceneManager[_0x512411(0x1f8)]())return;if(!Imported[_0x512411(0x80d)])return;VisuMZ[_0x512411(0x4b9)](_0x457d7b,_0x457d7b);const _0x1dac3c=$gameTemp[_0x512411(0x2c6)](),_0x3f91df=_0x457d7b[_0x512411(0x3ee)];if(!_0x1dac3c)return;$gameScreen[_0x512411(0x62a)](0x0,_0x457d7b[_0x512411(0x704)],_0x457d7b[_0x512411(0x92f)]);if(_0x3f91df)_0x1dac3c[_0x512411(0x953)](_0x512411(0x6db));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0xf9),_0x1df494=>{const _0x5d6ce5=_0x482454;if(!SceneManager[_0x5d6ce5(0x1f8)]())return;if(!Imported[_0x5d6ce5(0x80d)])return;const _0xfd8735=$gameTemp[_0x5d6ce5(0x2c6)]();if(!_0xfd8735)return;_0xfd8735['setWaitMode'](_0x5d6ce5(0x6db));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x700),_0x2c50d5=>{const _0x151059=_0x482454;if(!SceneManager[_0x151059(0x1f8)]())return;VisuMZ['ConvertParams'](_0x2c50d5,_0x2c50d5);const _0x17a36f=$gameTemp[_0x151059(0x2c6)](),_0x2db46a=BattleManager[_0x151059(0x815)],_0x7a3b77=BattleManager[_0x151059(0x57d)],_0x293f48=VisuMZ['CreateActionSequenceTargets'](_0x2c50d5[_0x151059(0x71a)]),_0x14b4df=_0x2c50d5[_0x151059(0x6dc)],_0x35d86e=BattleManager[_0x151059(0x3bc)];if(!_0x17a36f||!_0x2db46a||!_0x7a3b77)return;if(!_0x2db46a['item']())return;let _0x31bef7=_0x2db46a[_0x151059(0x94e)]()['animationId'];if(_0x31bef7<0x0)_0x31bef7=_0x7a3b77[_0x151059(0x29c)]();$gameTemp['requestAnimation'](_0x293f48,_0x31bef7,_0x14b4df),_0x2c50d5[_0x151059(0x188)]&&_0x17a36f[_0x151059(0x953)](_0x151059(0x366));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Animation_AttackAnimation',_0x375e37=>{const _0x50db62=_0x482454;if(!SceneManager[_0x50db62(0x1f8)]())return;VisuMZ[_0x50db62(0x4b9)](_0x375e37,_0x375e37);const _0x398843=$gameTemp[_0x50db62(0x2c6)](),_0x1f27d5=BattleManager[_0x50db62(0x57d)],_0x58af13=VisuMZ[_0x50db62(0x874)](_0x375e37[_0x50db62(0x71a)]),_0x2a1690=_0x375e37[_0x50db62(0x6dc)],_0x2f5227=BattleManager['_logWindow'];if(!_0x398843||!_0x1f27d5)return;const _0xdcb225=_0x1f27d5[_0x50db62(0x29c)]();$gameTemp[_0x50db62(0x3b4)](_0x58af13,_0xdcb225,_0x2a1690),_0x375e37['WaitForAnimation']&&_0x398843[_0x50db62(0x953)](_0x50db62(0x366));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Animation_AttackAnimation2',_0x2e8ab9=>{const _0x38180d=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x38180d(0x4b9)](_0x2e8ab9,_0x2e8ab9);const _0x1ecc22=_0x3ea1e2[_0x38180d(0x295)](_0x2e8ab9[_0x38180d(0x5c8)]);if(_0x1ecc22<=0x0)return;const _0x284b17=$gameTemp[_0x38180d(0x2c6)](),_0x3ea1e2=BattleManager[_0x38180d(0x57d)],_0x3bb8c7=VisuMZ[_0x38180d(0x874)](_0x2e8ab9[_0x38180d(0x71a)]),_0x294434=_0x2e8ab9[_0x38180d(0x6dc)],_0x4e52b3=BattleManager['_logWindow'];if(!_0x284b17||!_0x3ea1e2)return;$gameTemp[_0x38180d(0x3b4)](_0x3bb8c7,_0x1ecc22,_0x294434),_0x2e8ab9[_0x38180d(0x188)]&&_0x284b17[_0x38180d(0x953)](_0x38180d(0x366));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x594),_0x406f68=>{const _0x433aea=_0x482454;if(!SceneManager[_0x433aea(0x1f8)]())return;VisuMZ[_0x433aea(0x4b9)](_0x406f68,_0x406f68);const _0xacaa0=$gameTemp[_0x433aea(0x2c6)](),_0x5292c8=BattleManager[_0x433aea(0x815)],_0x7bf751=_0x406f68[_0x433aea(0x6dc)],_0x7da616=VisuMZ[_0x433aea(0x874)](_0x406f68['Targets']);if(!_0xacaa0||!_0x5292c8)return;if(!_0x5292c8[_0x433aea(0x94e)]())return;for(const _0x112983 of _0x7da616){if(!_0x112983)continue;_0x112983[_0x433aea(0x46a)](_0x5292c8,_0x7bf751);}if(_0x406f68[_0x433aea(0x188)])_0xacaa0['setWaitMode'](_0x433aea(0x366));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x11f),_0x141ffb=>{const _0x487413=_0x482454;VisuMZ[_0x487413(0x4b9)](_0x141ffb,_0x141ffb);const _0xe4a83f=$gameTemp['getLastPluginCommandInterpreter'](),_0x3a76ec=VisuMZ['CreateActionSequenceTargets'](_0x141ffb['Targets']),_0x2540f6=_0x141ffb[_0x487413(0x7ed)];if(!_0x2540f6)return;for(const _0x2bb77e of _0x3a76ec){if(!_0x2bb77e)continue;if(!_0x2bb77e['isActor']())continue;_0x2bb77e[_0x487413(0x44d)](_0x2540f6);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x453),_0x6fad39=>{const _0x36e8c1=_0x482454;if(!SceneManager[_0x36e8c1(0x938)])return;if(!SceneManager[_0x36e8c1(0x938)][_0x36e8c1(0x82e)])return;if(!Imported[_0x36e8c1(0x49a)])return;VisuMZ[_0x36e8c1(0x4b9)](_0x6fad39,_0x6fad39);const _0x4330e4=$gameTemp[_0x36e8c1(0x2c6)](),_0x511339=Math[_0x36e8c1(0x5d9)](_0x6fad39[_0x36e8c1(0x206)]),_0x513c1b=Math['round'](_0x6fad39['pointY']);$gameTemp[_0x36e8c1(0x8e3)](_0x511339,_0x513c1b,_0x6fad39['AnimationID'],_0x6fad39[_0x36e8c1(0x6dc)],_0x6fad39[_0x36e8c1(0x1c0)]),_0x6fad39[_0x36e8c1(0x79e)]&&_0x4330e4&&(SceneManager[_0x36e8c1(0x938)][_0x36e8c1(0x82e)]['updatePointAnimations'](),_0x4330e4[_0x36e8c1(0x953)](_0x36e8c1(0x366)));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x4ce),_0xa0a474=>{const _0x2e8039=_0x482454;if(!SceneManager[_0x2e8039(0x1f8)]())return;VisuMZ[_0x2e8039(0x4b9)](_0xa0a474,_0xa0a474);const _0x584fe2=$gameTemp['getLastPluginCommandInterpreter'](),_0x2f702b=VisuMZ[_0x2e8039(0x874)](_0xa0a474[_0x2e8039(0x71a)]),_0x35147c=_0xa0a474[_0x2e8039(0x806)],_0x9dec06=_0xa0a474[_0x2e8039(0x6dc)];if(!_0x584fe2)return;$gameTemp['requestAnimation'](_0x2f702b,_0x35147c,_0x9dec06);if(_0xa0a474[_0x2e8039(0x188)])_0x584fe2['setWaitMode'](_0x2e8039(0x366));}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x144),_0x464e6a=>{const _0x13e304=_0x482454;if(!SceneManager[_0x13e304(0x1f8)]())return;const _0x4fd19b=$gameTemp[_0x13e304(0x2c6)]();if(!_0x4fd19b)return;_0x4fd19b[_0x13e304(0x953)](_0x13e304(0x366));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x431),_0x322f0e=>{const _0x1dec55=_0x482454;if(!SceneManager[_0x1dec55(0x1f8)]())return;VisuMZ[_0x1dec55(0x4b9)](_0x322f0e,_0x322f0e);const _0x27f374=BattleManager[_0x1dec55(0x3bc)],_0x25364e=_0x322f0e[_0x1dec55(0x391)]&&Imported[_0x1dec55(0x308)];_0x27f374[_0x1dec55(0x908)](_0x322f0e[_0x1dec55(0x8ad)]),_0x25364e&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x1dec55(0x919)](_0x322f0e[_0x1dec55(0x8ad)]||'',_0x322f0e[_0x1dec55(0x8e9)]||0x0);}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x5d7),_0x226693=>{const _0x245926=_0x482454;if(!SceneManager[_0x245926(0x1f8)]())return;const _0x562296=BattleManager['_logWindow'];_0x562296['clear']();}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x23b),_0x2b76e7=>{const _0x1dc7a9=_0x482454;if(!SceneManager[_0x1dc7a9(0x1f8)]())return;const _0x312d8d=$gameTemp[_0x1dc7a9(0x2c6)](),_0x3fb591=BattleManager[_0x1dc7a9(0x815)],_0x10c455=BattleManager['_subject'],_0x4b308d=BattleManager[_0x1dc7a9(0x3bc)];if(!_0x312d8d||!_0x3fb591||!_0x10c455)return;if(!_0x3fb591[_0x1dc7a9(0x94e)]())return;_0x4b308d['displayAction'](_0x10c455,_0x3fb591[_0x1dc7a9(0x94e)]()),_0x312d8d['setWaitMode'](_0x1dc7a9(0x4f5));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_BattleLog_PopBaseLine',_0x242af8=>{const _0x25975e=_0x482454;if(!SceneManager[_0x25975e(0x1f8)]())return;const _0xdac46=BattleManager[_0x25975e(0x3bc)];_0xdac46[_0x25975e(0x679)]();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_BattleLog_PushBaseLine',_0x3114bc=>{const _0x1656aa=_0x482454;if(!SceneManager[_0x1656aa(0x1f8)]())return;const _0x1af5aa=BattleManager[_0x1656aa(0x3bc)];_0x1af5aa[_0x1656aa(0x944)]();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_BattleLog_Refresh',_0x29dcd7=>{const _0xd0ff6=_0x482454;if(!SceneManager[_0xd0ff6(0x1f8)]())return;const _0x2dcc82=BattleManager[_0xd0ff6(0x3bc)];_0x2dcc82[_0xd0ff6(0x477)]();}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_BattleLog_UI',_0x58140d=>{const _0x30d17c=_0x482454;if(!SceneManager[_0x30d17c(0x1f8)]())return;VisuMZ[_0x30d17c(0x4b9)](_0x58140d,_0x58140d),SceneManager[_0x30d17c(0x938)][_0x30d17c(0x4c9)](_0x58140d[_0x30d17c(0x205)]);}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x79d),_0x3ddf4d=>{const _0x22ed21=_0x482454;if(!SceneManager[_0x22ed21(0x1f8)]())return;const _0x5c2eaf=$gameTemp[_0x22ed21(0x2c6)]();_0x5c2eaf[_0x22ed21(0x953)](_0x22ed21(0x4f5));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x4ba),_0x6ee188=>{const _0x2e8df1=_0x482454;if(!SceneManager[_0x2e8df1(0x1f8)]())return;const _0x26f42c=$gameTemp[_0x2e8df1(0x2c6)](),_0x2ba942=BattleManager[_0x2e8df1(0x3bc)];_0x2ba942[_0x2e8df1(0x3f0)](),_0x26f42c[_0x2e8df1(0x953)](_0x2e8df1(0x4f5));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x5b9),_0x48ad8b=>{const _0x23c7f4=_0x482454;if(!SceneManager[_0x23c7f4(0x1f8)]())return;if(!Imported[_0x23c7f4(0x80d)])return;VisuMZ[_0x23c7f4(0x4b9)](_0x48ad8b,_0x48ad8b);const _0x72371d=$gameScreen[_0x23c7f4(0x191)]();_0x72371d[_0x23c7f4(0x1ea)]=_0x48ad8b[_0x23c7f4(0x8ea)];}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Camera_FocusPoint',_0x56feed=>{const _0x411c89=_0x482454;if(!SceneManager[_0x411c89(0x1f8)]())return;if(!Imported[_0x411c89(0x80d)])return;VisuMZ[_0x411c89(0x4b9)](_0x56feed,_0x56feed);const _0x1947d7=$gameTemp['getLastPluginCommandInterpreter'](),_0x3efab8=_0x56feed[_0x411c89(0x904)];$gameScreen[_0x411c89(0x501)](_0x56feed[_0x411c89(0x3c0)],_0x56feed[_0x411c89(0x44a)],_0x56feed[_0x411c89(0x704)],_0x56feed['EasingType']);if(_0x3efab8)_0x1947d7['setWaitMode'](_0x411c89(0x75c));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Camera_FocusTarget',_0x186a7f=>{const _0x1a8745=_0x482454;if(!SceneManager[_0x1a8745(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a8745(0x4b9)](_0x186a7f,_0x186a7f);const _0x3743a4=$gameTemp[_0x1a8745(0x2c6)](),_0x4a0737=VisuMZ[_0x1a8745(0x874)](_0x186a7f[_0x1a8745(0x71a)]),_0x30d040=_0x186a7f['WaitForCamera'];$gameScreen[_0x1a8745(0x898)](_0x4a0737,_0x186a7f[_0x1a8745(0x704)],_0x186a7f['EasingType']);if(_0x30d040)_0x3743a4[_0x1a8745(0x953)](_0x1a8745(0x75c));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x226),_0x581006=>{const _0x13b338=_0x482454;if(!SceneManager[_0x13b338(0x1f8)]())return;if(!Imported[_0x13b338(0x80d)])return;VisuMZ[_0x13b338(0x4b9)](_0x581006,_0x581006);const _0x12cd43=$gameTemp[_0x13b338(0x2c6)](),_0x5bf21b=_0x581006[_0x13b338(0x904)];$gameScreen[_0x13b338(0x5aa)](_0x581006[_0x13b338(0x3ba)],_0x581006[_0x13b338(0x325)],_0x581006[_0x13b338(0x704)],_0x581006[_0x13b338(0x92f)]);if(_0x5bf21b)_0x12cd43[_0x13b338(0x953)](_0x13b338(0x75c));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x241),_0x300fa7=>{const _0x1dfda6=_0x482454;if(!SceneManager[_0x1dfda6(0x1f8)]())return;if(!Imported[_0x1dfda6(0x80d)])return;VisuMZ[_0x1dfda6(0x4b9)](_0x300fa7,_0x300fa7);const _0x2e022f=$gameTemp[_0x1dfda6(0x2c6)](),_0x57edba=_0x300fa7[_0x1dfda6(0x8f6)],_0x54c94d=_0x300fa7['ResetOffset'],_0x323f1c=_0x300fa7['WaitForCamera'];if(_0x57edba){const _0x34775c=Math[_0x1dfda6(0x5d9)](Graphics[_0x1dfda6(0x913)]/0x2),_0x470030=Math['round'](Graphics[_0x1dfda6(0x4c6)]/0x2);$gameScreen['setBattleCameraPoint'](_0x34775c,_0x470030,_0x300fa7[_0x1dfda6(0x704)],_0x300fa7[_0x1dfda6(0x92f)]);}_0x54c94d&&$gameScreen[_0x1dfda6(0x5aa)](0x0,0x0,_0x300fa7[_0x1dfda6(0x704)],_0x300fa7['EasingType']);if(_0x323f1c)_0x2e022f[_0x1dfda6(0x953)](_0x1dfda6(0x75c));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x275),_0x5eb0d6=>{const _0x5cfaec=_0x482454;if(!SceneManager[_0x5cfaec(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x38accb=$gameTemp[_0x5cfaec(0x2c6)]();if(!_0x38accb)return;_0x38accb[_0x5cfaec(0x953)](_0x5cfaec(0x75c));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x86b),_0x15d784=>{const _0x569497=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x569497(0x3b2)])return;VisuMZ[_0x569497(0x4b9)](_0x15d784,_0x15d784);const _0x2cf638=VisuMZ['CreateActionSequenceTargets'](_0x15d784[_0x569497(0x71a)]),_0x439d84=_0x15d784[_0x569497(0x50c)][_0x569497(0x61c)]()[_0x569497(0x910)]();for(const _0x5204be of _0x2cf638){if(!_0x5204be)continue;_0x5204be[_0x569497(0x131)](_0x439d84);}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x8eb),_0x503d81=>{const _0x49c071=_0x482454;if(!SceneManager[_0x49c071(0x1f8)]())return;if(!Imported[_0x49c071(0x3b2)])return;VisuMZ['ConvertParams'](_0x503d81,_0x503d81);const _0x1de1be=VisuMZ[_0x49c071(0x874)](_0x503d81[_0x49c071(0x71a)]),_0x4a9f55=_0x503d81['TimeScale'];for(const _0x223618 of _0x1de1be){if(!_0x223618)continue;_0x223618[_0x49c071(0x55c)]()[_0x49c071(0x567)]=_0x4a9f55;}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x714),_0x471cfa=>{const _0x47ca94=_0x482454;if(!SceneManager[_0x47ca94(0x1f8)]())return;if(!Imported[_0x47ca94(0x2f1)])return;VisuMZ[_0x47ca94(0x4b9)](_0x471cfa,_0x471cfa);const _0x5e8262=BattleManager[_0x47ca94(0x815)],_0x5d53cb=_0x471cfa[_0x47ca94(0x17f)];if(!_0x5e8262)return;_0x5e8262['_battleCoreAddedElements']=_0x5d53cb;}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x2c2),_0x1eb5b3=>{const _0x577c47=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x577c47(0x2f1)])return;const _0x2637bd=BattleManager[_0x577c47(0x815)];if(!_0x2637bd)return;_0x2637bd[_0x577c47(0x8e7)]();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Element_ForceElements',_0x19739c=>{const _0x4dc3bd=_0x482454;if(!SceneManager[_0x4dc3bd(0x1f8)]())return;if(!Imported[_0x4dc3bd(0x2f1)])return;VisuMZ[_0x4dc3bd(0x4b9)](_0x19739c,_0x19739c);const _0x5156e9=BattleManager[_0x4dc3bd(0x815)],_0x21d5fa=_0x19739c[_0x4dc3bd(0x17f)];if(!_0x5156e9)return;_0x5156e9[_0x4dc3bd(0x531)]=_0x21d5fa;}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x47c),_0x1ebe3c=>{const _0x458314=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x458314(0x2f1)])return;const _0x42a03d=BattleManager[_0x458314(0x815)];if(!_0x42a03d)return;_0x42a03d['_battleCoreNoElement']=!![];}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x766),_0x24767f=>{const _0x112ef4=_0x482454;if(!Imported[_0x112ef4(0x509)])return;if(!SceneManager[_0x112ef4(0x1f8)]())return;VisuMZ['ConvertParams'](_0x24767f,_0x24767f);const _0x52cc8a=VisuMZ[_0x112ef4(0x874)](_0x24767f[_0x112ef4(0x71a)]);for(const _0x33abea of _0x52cc8a){if(!_0x33abea)continue;_0x33abea[_0x112ef4(0x92a)](_0x112ef4(0x370)),_0x33abea[_0x112ef4(0x92a)](_0x112ef4(0x590)),_0x33abea[_0x112ef4(0x92a)]('tv'),_0x33abea['clearHorrorEffects']();}$gamePlayer['refresh']();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x741),_0x3bf217=>{const _0x221b9e=_0x482454;if(!Imported[_0x221b9e(0x509)])return;if(!SceneManager[_0x221b9e(0x1f8)]())return;VisuMZ[_0x221b9e(0x4b9)](_0x3bf217,_0x3bf217);const _0xbccdc1=VisuMZ['CreateActionSequenceTargets'](_0x3bf217['Targets']),_0x1da2c8=_0x221b9e(0x590);_0x3bf217[_0x221b9e(0x30d)]=Math[_0x221b9e(0x80a)](_0x3bf217[_0x221b9e(0x1f9)]/0x2),_0x3bf217[_0x221b9e(0x645)]=_0x3bf217['slices'],_0x3bf217[_0x221b9e(0x934)]=!![];for(const _0x40e021 of _0xbccdc1){if(!_0x40e021)continue;_0x40e021[_0x221b9e(0x762)](_0x1da2c8,_0x3bf217);}$gamePlayer[_0x221b9e(0x477)]();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x6ac),_0x3429a3=>{const _0x17b8f1=_0x482454;if(!Imported[_0x17b8f1(0x509)])return;if(!SceneManager[_0x17b8f1(0x1f8)]())return;VisuMZ['ConvertParams'](_0x3429a3,_0x3429a3);const _0x2e8f48=VisuMZ[_0x17b8f1(0x874)](_0x3429a3[_0x17b8f1(0x71a)]);for(const _0xc0d224 of _0x2e8f48){if(!_0xc0d224)continue;_0xc0d224[_0x17b8f1(0x92a)]('glitch');}$gamePlayer[_0x17b8f1(0x477)]();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x5f6),_0x41caf4=>{const _0x3e6005=_0x482454;if(!Imported[_0x3e6005(0x509)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e6005(0x4b9)](_0x41caf4,_0x41caf4);const _0x497795=VisuMZ[_0x3e6005(0x874)](_0x41caf4[_0x3e6005(0x71a)]),_0x15c732='noise';for(const _0x1c4a0a of _0x497795){if(!_0x1c4a0a)continue;_0x1c4a0a['setHorrorEffectSettings'](_0x15c732,_0x41caf4);}$gamePlayer[_0x3e6005(0x477)]();}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x43f),_0x32fba2=>{const _0x4707db=_0x482454;if(!Imported[_0x4707db(0x509)])return;if(!SceneManager[_0x4707db(0x1f8)]())return;VisuMZ[_0x4707db(0x4b9)](_0x32fba2,_0x32fba2);const _0x267a47=VisuMZ[_0x4707db(0x874)](_0x32fba2['Targets']);for(const _0x396571 of _0x267a47){if(!_0x396571)continue;_0x396571['removeHorrorEffect'](_0x4707db(0x370));}$gamePlayer[_0x4707db(0x477)]();}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Horror_TVCreate',_0x5cce72=>{const _0x193891=_0x482454;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x193891(0x1f8)]())return;VisuMZ[_0x193891(0x4b9)](_0x5cce72,_0x5cce72);const _0x4e27c7=VisuMZ[_0x193891(0x874)](_0x5cce72['Targets']),_0x3a4470='tv';for(const _0x1d0255 of _0x4e27c7){if(!_0x1d0255)continue;_0x1d0255[_0x193891(0x762)](_0x3a4470,_0x5cce72);}$gamePlayer[_0x193891(0x477)]();}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x6f8),_0x1f4bfa=>{const _0x3b8b23=_0x482454;if(!Imported[_0x3b8b23(0x509)])return;if(!SceneManager[_0x3b8b23(0x1f8)]())return;VisuMZ['ConvertParams'](_0x1f4bfa,_0x1f4bfa);const _0x5a5ea4=VisuMZ['CreateActionSequenceTargets'](_0x1f4bfa[_0x3b8b23(0x71a)]);for(const _0x43f821 of _0x5a5ea4){if(!_0x43f821)continue;_0x43f821[_0x3b8b23(0x92a)]('tv');}$gamePlayer['refresh']();}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Impact_ColorBreak',_0x153a40=>{const _0x2c7a58=_0x482454;if(!SceneManager[_0x2c7a58(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x530e83=SceneManager['_scene'][_0x2c7a58(0x82e)];if(!_0x530e83)return;VisuMZ[_0x2c7a58(0x4b9)](_0x153a40,_0x153a40);const _0xdab2c1=_0x153a40['Intensity']||0x1,_0x9d64ba=_0x153a40[_0x2c7a58(0x704)]||0x1,_0x4ed743=_0x153a40[_0x2c7a58(0x92f)]||_0x2c7a58(0x87c);_0x530e83['setupRgbSplitImpactFilter'](_0xdab2c1,_0x9d64ba,_0x4ed743);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x5c6),_0x32efc8=>{const _0x3172e1=_0x482454;if(!SceneManager[_0x3172e1(0x1f8)]())return;if(!Imported[_0x3172e1(0x15c)])return;const _0x4dd7a5=SceneManager['_scene'][_0x3172e1(0x82e)];if(!_0x4dd7a5)return;VisuMZ['ConvertParams'](_0x32efc8,_0x32efc8);const _0x2fcacc=Number(_0x32efc8[_0x3172e1(0x669)])||0x0,_0x1e500a=Number(_0x32efc8['Rate']),_0x5d3a1a=_0x32efc8[_0x3172e1(0x704)]||0x1,_0x5b5973=_0x32efc8[_0x3172e1(0x92f)]||_0x3172e1(0x87c);_0x4dd7a5[_0x3172e1(0x67d)](_0x2fcacc,_0x1e500a,_0x5d3a1a,_0x5b5973);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x32e),_0xcee1a1=>{const _0x1a06d9=_0x482454;if(!SceneManager[_0x1a06d9(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x35aa00=SceneManager[_0x1a06d9(0x938)][_0x1a06d9(0x82e)];if(!_0x35aa00)return;VisuMZ[_0x1a06d9(0x4b9)](_0xcee1a1,_0xcee1a1);const _0x416361=Number(_0xcee1a1[_0x1a06d9(0x669)])||0x0,_0x34f8e7=Number(_0xcee1a1[_0x1a06d9(0x74e)]),_0x53f9ea=_0xcee1a1[_0x1a06d9(0x704)]||0x1,_0xda762e=_0xcee1a1[_0x1a06d9(0x92f)]||'Linear',_0x838d99=VisuMZ[_0x1a06d9(0x874)](_0xcee1a1[_0x1a06d9(0x71a)]);for(const _0xfdb484 of _0x838d99){if(!_0xfdb484)continue;if(!_0xfdb484[_0x1a06d9(0x1f6)]())continue;_0xfdb484[_0x1a06d9(0x1f6)]()[_0x1a06d9(0x67d)](_0x416361,_0x34f8e7,_0x53f9ea,_0xda762e);}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x460),_0x1f9e25=>{const _0xbbeae5=_0x482454;if(!SceneManager[_0xbbeae5(0x1f8)]())return;if(!Imported[_0xbbeae5(0x15c)])return;VisuMZ['ConvertParams'](_0x1f9e25,_0x1f9e25);const _0x2b53ed={'delay':_0x1f9e25['delay'],'duration':_0x1f9e25[_0xbbeae5(0x3d0)],'hue':_0x1f9e25[_0xbbeae5(0x76e)],'opacityStart':_0x1f9e25['opacityStart'],'tone':_0x1f9e25[_0xbbeae5(0x848)],'visible':!![]},_0x5a3419=VisuMZ[_0xbbeae5(0x874)](_0x1f9e25[_0xbbeae5(0x71a)]);for(const _0x508ced of _0x5a3419){if(!_0x508ced)continue;_0x508ced[_0xbbeae5(0x4e4)](_0x2b53ed);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x43b),_0x598541=>{const _0x159e01=_0x482454;if(!SceneManager[_0x159e01(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x598541,_0x598541);const _0x11ed0e=VisuMZ['CreateActionSequenceTargets'](_0x598541[_0x159e01(0x71a)]);for(const _0x268c65 of _0x11ed0e){if(!_0x268c65)continue;_0x268c65[_0x159e01(0x5ec)]();}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x66d),_0x236eff=>{const _0x53edeb=_0x482454;if(!Imported[_0x53edeb(0x15c)])return;const _0x18be9a=SceneManager['_scene'][_0x53edeb(0x82e)];if(!_0x18be9a)return;VisuMZ['ConvertParams'](_0x236eff,_0x236eff);const _0x37ac26=_0x236eff['X']||0x0,_0x29ddf7=_0x236eff['Y']||0x0,_0x2523c8=_0x236eff['Amp']||0x0,_0x29261e=_0x236eff[_0x53edeb(0x3a4)]||0x0,_0x525cc1=_0x236eff[_0x53edeb(0x704)]||0x1;_0x18be9a['setupShockwaveImpactFilter'](_0x37ac26,_0x29ddf7,_0x2523c8,_0x29261e,_0x525cc1);}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x697),_0x3d87af=>{const _0x464ea0=_0x482454;if(!SceneManager[_0x464ea0(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x577d75=SceneManager[_0x464ea0(0x938)][_0x464ea0(0x82e)];if(!_0x577d75)return;VisuMZ['ConvertParams'](_0x3d87af,_0x3d87af);const _0x19b6cc=VisuMZ['CreateActionSequenceTargets'](_0x3d87af[_0x464ea0(0x71a)]),_0x34d302=_0x3d87af['TargetLocation'],_0xae1f71=_0x3d87af['OffsetX']||0x0,_0x266ba5=_0x3d87af[_0x464ea0(0x325)]||0x0,_0x360c50=_0x3d87af[_0x464ea0(0x5d2)]||0x0,_0x15e1a5=_0x3d87af['Wave']||0x0,_0x530803=_0x3d87af[_0x464ea0(0x704)]||0x1;for(const _0x4f0eca of _0x19b6cc){if(!_0x4f0eca)continue;if(!_0x4f0eca[_0x464ea0(0x1f6)]())continue;const _0x582bd2=_0x4f0eca[_0x464ea0(0x1f6)]();let _0x2fb5d2=_0x582bd2[_0x464ea0(0x12b)],_0x2906c6=_0x582bd2['_baseY'];_0x2fb5d2+=(Graphics[_0x464ea0(0x913)]-Graphics[_0x464ea0(0x36e)])/0x2,_0x2906c6+=(Graphics[_0x464ea0(0x4c6)]-Graphics[_0x464ea0(0x69e)])/0x2;if(_0x34d302[_0x464ea0(0x445)](/front/i))_0x2fb5d2+=(_0x4f0eca[_0x464ea0(0x186)]()?0x1:-0x1)*_0x582bd2['mainSpriteWidth']()/0x2;else _0x34d302['match'](/back/i)&&(_0x2fb5d2+=(_0x4f0eca['isEnemy']()?-0x1:0x1)*_0x582bd2[_0x464ea0(0x3e7)]()/0x2);if(_0x34d302['match'](/head/i))_0x2906c6-=_0x582bd2[_0x464ea0(0x5eb)]();else _0x34d302[_0x464ea0(0x445)](/center/i)&&(_0x2906c6-=_0x582bd2[_0x464ea0(0x5eb)]()/0x2);_0x2fb5d2+=_0xae1f71,_0x2906c6+=_0x266ba5,_0x577d75[_0x464ea0(0x8f4)](_0x2fb5d2,_0x2906c6,_0x360c50,_0x15e1a5,_0x530803);}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x811),_0x566fb8=>{const _0x55a01d=_0x482454;if(!SceneManager[_0x55a01d(0x1f8)]())return;if(!Imported[_0x55a01d(0x15c)])return;const _0x594316=SceneManager['_scene'][_0x55a01d(0x82e)];if(!_0x594316)return;VisuMZ[_0x55a01d(0x4b9)](_0x566fb8,_0x566fb8);const _0x5ee662=VisuMZ[_0x55a01d(0x874)](_0x566fb8['Targets']),_0x5452d9=_0x566fb8[_0x55a01d(0x8fd)],_0x1bd2c5=_0x566fb8[_0x55a01d(0x3ba)]||0x0,_0x4e8791=_0x566fb8['OffsetY']||0x0,_0xdbf25c=_0x566fb8['Amp']||0x0,_0x94d8b0=_0x566fb8[_0x55a01d(0x3a4)]||0x0,_0x5b3a89=_0x566fb8[_0x55a01d(0x704)]||0x1,_0x3e006b=Math['min'](..._0x5ee662['map'](_0x240170=>_0x240170[_0x55a01d(0x1f6)]()[_0x55a01d(0x12b)]-_0x240170[_0x55a01d(0x1f6)]()[_0x55a01d(0x3e7)]()/0x2)),_0x487a6e=Math['max'](..._0x5ee662[_0x55a01d(0x597)](_0x512254=>_0x512254['battler']()[_0x55a01d(0x12b)]+_0x512254[_0x55a01d(0x1f6)]()['mainSpriteWidth']()/0x2)),_0x23cbd4=Math[_0x55a01d(0x450)](..._0x5ee662[_0x55a01d(0x597)](_0x9b1aa3=>_0x9b1aa3['battler']()[_0x55a01d(0x4c4)]-_0x9b1aa3[_0x55a01d(0x1f6)]()[_0x55a01d(0x5eb)]())),_0x4504ac=Math[_0x55a01d(0x1e3)](..._0x5ee662[_0x55a01d(0x597)](_0x4fb759=>_0x4fb759[_0x55a01d(0x1f6)]()['_baseY'])),_0x45ef83=_0x5ee662['filter'](_0x31b5b2=>_0x31b5b2[_0x55a01d(0x761)]())[_0x55a01d(0x403)],_0x4eba55=_0x5ee662[_0x55a01d(0x19d)](_0x2c81c8=>_0x2c81c8['isEnemy']())[_0x55a01d(0x403)];let _0x1d070e=0x0,_0x323094=0x0;if(_0x5452d9['match'](/front/i))_0x1d070e=_0x45ef83>=_0x4eba55?_0x3e006b:_0x487a6e;else{if(_0x5452d9[_0x55a01d(0x445)](/middle/i))_0x1d070e=(_0x3e006b+_0x487a6e)/0x2,melee=-0x1;else _0x5452d9[_0x55a01d(0x445)](/back/i)&&(_0x1d070e=_0x45ef83>=_0x4eba55?_0x487a6e:_0x3e006b);}if(_0x5452d9[_0x55a01d(0x445)](/head/i))_0x323094=_0x23cbd4;else{if(_0x5452d9[_0x55a01d(0x445)](/center/i))_0x323094=(_0x23cbd4+_0x4504ac)/0x2;else _0x5452d9[_0x55a01d(0x445)](/base/i)&&(_0x323094=_0x4504ac);}_0x1d070e+=(Graphics[_0x55a01d(0x913)]-Graphics['boxWidth'])/0x2,_0x323094+=(Graphics[_0x55a01d(0x4c6)]-Graphics[_0x55a01d(0x69e)])/0x2,_0x1d070e+=_0x1bd2c5,_0x323094+=_0x4e8791,_0x594316['setupShockwaveImpactFilter'](_0x1d070e,_0x323094,_0xdbf25c,_0x94d8b0,_0x5b3a89);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x6d1),_0x437a69=>{const _0x2497c9=_0x482454;if(!Imported[_0x2497c9(0x15c)])return;const _0x163c52=SceneManager[_0x2497c9(0x938)][_0x2497c9(0x82e)];if(!_0x163c52)return;VisuMZ[_0x2497c9(0x4b9)](_0x437a69,_0x437a69);const _0x319b51=_0x437a69['X']||0x0,_0x3b104a=_0x437a69['Y']||0x0,_0x416a5d=_0x437a69[_0x2497c9(0x1c1)]||0x0,_0x1a2fc4=_0x437a69[_0x2497c9(0x74a)]||0x0,_0x447b97=_0x437a69[_0x2497c9(0x704)]||0x1,_0xfb3949=_0x437a69[_0x2497c9(0x92f)]||_0x2497c9(0x87c);_0x163c52[_0x2497c9(0x6cf)](_0x416a5d,_0x319b51,_0x3b104a,_0x1a2fc4,_0x447b97,_0xfb3949);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x22113a=>{const _0x4ba2ba=_0x482454;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4b497c=SceneManager['_scene'][_0x4ba2ba(0x82e)];if(!_0x4b497c)return;VisuMZ[_0x4ba2ba(0x4b9)](_0x22113a,_0x22113a);const _0x96ffe4=VisuMZ[_0x4ba2ba(0x874)](_0x22113a[_0x4ba2ba(0x71a)]),_0x59e072=_0x22113a[_0x4ba2ba(0x8fd)],_0xb03a35=_0x22113a[_0x4ba2ba(0x3ba)]||0x0,_0x3fbafb=_0x22113a[_0x4ba2ba(0x325)]||0x0,_0xf66f39=_0x22113a[_0x4ba2ba(0x1c1)]||0x0,_0x105a01=_0x22113a[_0x4ba2ba(0x74a)]||0x0,_0x3d31dc=_0x22113a[_0x4ba2ba(0x704)]||0x1,_0x3faf5b=_0x22113a[_0x4ba2ba(0x92f)]||_0x4ba2ba(0x87c),_0x6864d=Math['min'](..._0x96ffe4[_0x4ba2ba(0x597)](_0x2b240f=>_0x2b240f['battler']()['_baseX']-_0x2b240f['battler']()['mainSpriteWidth']()/0x2)),_0x5cc63a=Math[_0x4ba2ba(0x1e3)](..._0x96ffe4['map'](_0x513dc7=>_0x513dc7[_0x4ba2ba(0x1f6)]()[_0x4ba2ba(0x12b)]+_0x513dc7['battler']()[_0x4ba2ba(0x3e7)]()/0x2)),_0x405a4d=Math[_0x4ba2ba(0x450)](..._0x96ffe4[_0x4ba2ba(0x597)](_0xc777cd=>_0xc777cd[_0x4ba2ba(0x1f6)]()['_baseY']-_0xc777cd['battler']()[_0x4ba2ba(0x5eb)]())),_0x342f3d=Math[_0x4ba2ba(0x1e3)](..._0x96ffe4['map'](_0x279ded=>_0x279ded[_0x4ba2ba(0x1f6)]()['_baseY'])),_0x329b9b=_0x96ffe4['filter'](_0x2820aa=>_0x2820aa[_0x4ba2ba(0x761)]())['length'],_0x2a9e7d=_0x96ffe4[_0x4ba2ba(0x19d)](_0x1b559d=>_0x1b559d[_0x4ba2ba(0x186)]())[_0x4ba2ba(0x403)];let _0x1b1bd6=0x0,_0x48563e=0x0;if(_0x59e072[_0x4ba2ba(0x445)](/front/i))_0x1b1bd6=_0x329b9b>=_0x2a9e7d?_0x6864d:_0x5cc63a;else{if(_0x59e072[_0x4ba2ba(0x445)](/middle/i))_0x1b1bd6=(_0x6864d+_0x5cc63a)/0x2,melee=-0x1;else _0x59e072[_0x4ba2ba(0x445)](/back/i)&&(_0x1b1bd6=_0x329b9b>=_0x2a9e7d?_0x5cc63a:_0x6864d);}if(_0x59e072['match'](/head/i))_0x48563e=_0x405a4d;else{if(_0x59e072['match'](/center/i))_0x48563e=(_0x405a4d+_0x342f3d)/0x2;else _0x59e072[_0x4ba2ba(0x445)](/base/i)&&(_0x48563e=_0x342f3d);}_0x1b1bd6+=(Graphics[_0x4ba2ba(0x913)]-Graphics[_0x4ba2ba(0x36e)])/0x2,_0x48563e+=(Graphics['height']-Graphics[_0x4ba2ba(0x69e)])/0x2,_0x1b1bd6+=_0xb03a35,_0x48563e+=_0x3fbafb,_0x4b497c[_0x4ba2ba(0x6cf)](_0xf66f39,_0x1b1bd6,_0x48563e,_0x105a01,_0x3d31dc,_0x3faf5b);}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x30f),_0x460fa9=>{const _0x4a1f03=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x460fa9,_0x460fa9);const _0x14d2b9=$gameTemp['getLastPluginCommandInterpreter'](),_0x288bab=BattleManager[_0x4a1f03(0x815)],_0x23faf5=BattleManager[_0x4a1f03(0x57d)],_0x357bc4=BattleManager[_0x4a1f03(0x3bc)];if(!_0x14d2b9||!_0x288bab||!_0x23faf5)return;if(!_0x288bab['item']())return;const _0x20f5fa=VisuMZ[_0x4a1f03(0x874)](_0x460fa9[_0x4a1f03(0x71a)]);for(const _0x3ec972 of _0x20f5fa){if(!_0x3ec972)continue;_0x357bc4[_0x4a1f03(0x32d)](_0x4a1f03(0x581),_0x23faf5,_0x3ec972);}_0x14d2b9['setWaitMode']('battlelog');}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x2ca),_0x20198f=>{const _0x2174d6=_0x482454;if(!SceneManager[_0x2174d6(0x1f8)]())return;VisuMZ[_0x2174d6(0x4b9)](_0x20198f,_0x20198f);const _0x8b9295=[_0x2174d6(0x668),_0x2174d6(0x10a),_0x2174d6(0x88f),_0x2174d6(0x303),_0x2174d6(0x314),_0x2174d6(0x5fb),_0x2174d6(0x432),_0x2174d6(0x5a2)],_0x59bb29=_0x20198f[_0x2174d6(0x929)],_0x22fdff=_0x20198f[_0x2174d6(0x744)],_0x2f025a=_0x20198f[_0x2174d6(0x547)],_0x180285=VisuMZ[_0x2174d6(0x874)](_0x20198f[_0x2174d6(0x71a)]);for(const _0x1f57e1 of _0x180285){if(!_0x1f57e1)continue;for(const _0x2ff44d of _0x59bb29){const _0x1d4e86=_0x8b9295['indexOf'](_0x2ff44d[_0x2174d6(0x24b)]()[_0x2174d6(0x910)]());_0x1d4e86>=0x0&&_0x1d4e86<=0x7&&_0x1f57e1['addBuff'](_0x1d4e86,_0x2f025a);}for(const _0x36f09c of _0x22fdff){const _0x4569e3=_0x8b9295['indexOf'](_0x36f09c['toUpperCase']()[_0x2174d6(0x910)]());_0x4569e3>=0x0&&_0x4569e3<=0x7&&_0x1f57e1[_0x2174d6(0x6bc)](_0x4569e3,_0x2f025a);}}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x344),_0x4e4cd2=>{const _0x1d5f91=_0x482454;if(!SceneManager[_0x1d5f91(0x1f8)]())return;VisuMZ[_0x1d5f91(0x4b9)](_0x4e4cd2,_0x4e4cd2);const _0x210369=_0x4e4cd2[_0x1d5f91(0x927)],_0x22aa1b=VisuMZ[_0x1d5f91(0x874)](_0x4e4cd2[_0x1d5f91(0x71a)]);for(const _0x295d38 of _0x22aa1b){if(!_0x295d38)continue;for(const _0xc80fed of _0x210369){_0x295d38[_0x1d5f91(0x1d3)](_0xc80fed);}}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Mechanics_ArmorPenetration',_0x3c916f=>{const _0x570b99=_0x482454;if(!SceneManager[_0x570b99(0x1f8)]())return;VisuMZ[_0x570b99(0x4b9)](_0x3c916f,_0x3c916f);const _0x4fa8be=BattleManager[_0x570b99(0x815)],_0x997495={'arPenRate':_0x3c916f[_0x570b99(0x5bb)],'arPenFlat':_0x3c916f[_0x570b99(0x91d)],'arRedRate':_0x3c916f[_0x570b99(0x66b)],'arRedFlat':_0x3c916f[_0x570b99(0x216)]};_0x4fa8be[_0x570b99(0x946)]=_0x997495;}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x521),_0x2ef23c=>{const _0x3e1c4f=_0x482454;if(!SceneManager[_0x3e1c4f(0x1f8)]())return;if(!Imported[_0x3e1c4f(0x3be)])return;VisuMZ[_0x3e1c4f(0x4b9)](_0x2ef23c,_0x2ef23c);const _0x48a8b6=VisuMZ['CreateActionSequenceTargets'](_0x2ef23c[_0x3e1c4f(0x71a)]),_0xf543f1=_0x2ef23c[_0x3e1c4f(0x496)]||0x1;for(const _0x4a0787 of _0x48a8b6){if(!_0x4a0787)continue;if(!_0x4a0787[_0x3e1c4f(0x186)]())continue;_0x4a0787[_0x3e1c4f(0x782)](_0xf543f1);}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x8c4),_0x1c3288=>{const _0x5095b5=_0x482454;if(!SceneManager[_0x5095b5(0x1f8)]())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x5095b5(0x2fb)]())return;VisuMZ[_0x5095b5(0x4b9)](_0x1c3288,_0x1c3288);const _0x2765cd=VisuMZ['CreateActionSequenceTargets'](_0x1c3288[_0x5095b5(0x71a)]),_0x415f58=_0x1c3288['ChargeRate'],_0x1967da=_0x1c3288[_0x5095b5(0x841)],_0x30c2b8=_0x1c3288[_0x5095b5(0x809)];for(const _0x1e3c7c of _0x2765cd){if(!_0x1e3c7c)continue;if(_0x1e3c7c[_0x5095b5(0x635)]())_0x1e3c7c['changeAtbChargeTime'](_0x415f58);else{if(_0x1e3c7c[_0x5095b5(0x7b6)]()){_0x1e3c7c['changeAtbCastTime'](_0x1967da);if(_0x30c2b8)_0x1e3c7c[_0x5095b5(0x24a)]();}}}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x1b3),_0x3331ed=>{const _0xf0b103=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0xf0b103(0x4b9)](_0x3331ed,_0x3331ed);const _0x1937dc=VisuMZ[_0xf0b103(0x874)](_0x3331ed['Targets']),_0x5442ef=_0x3331ed[_0xf0b103(0x7e6)];for(const _0x12f7a7 of _0x1937dc){if(!_0x12f7a7)continue;_0x12f7a7['gainStoredBoostPoints'](_0x5442ef);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_BoostPointsStoreData',_0x13eacd=>{const _0x5325d0=_0x482454;if(!SceneManager[_0x5325d0(0x1f8)]())return;if(!Imported[_0x5325d0(0x146)])return;if(!BattleManager['_subject'])return;VisuMZ[_0x5325d0(0x4b9)](_0x13eacd,_0x13eacd);const _0x2e658e=_0x13eacd['VariableID'];$gameVariables[_0x5325d0(0x443)](_0x2e658e,BattleManager['_subject'][_0x5325d0(0x93f)]());}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x57e),_0x23e463=>{const _0x4bf6c9=_0x482454;if(!SceneManager[_0x4bf6c9(0x1f8)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x4bf6c9(0x4b9)](_0x23e463,_0x23e463);const _0x59e185=VisuMZ[_0x4bf6c9(0x874)](_0x23e463[_0x4bf6c9(0x71a)]),_0x3d5656=_0x23e463[_0x4bf6c9(0x4a6)];for(const _0x58d3f3 of _0x59e185){if(!_0x58d3f3)continue;if(_0x58d3f3[_0x4bf6c9(0x708)]())continue;if(!_0x58d3f3[_0x4bf6c9(0x73a)]())continue;_0x58d3f3['alterBreakShield'](_0x3d5656);}}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x887),_0x1ed72d=>{const _0x47a414=_0x482454;if(!SceneManager[_0x47a414(0x1f8)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x47a414(0x4b9)](_0x1ed72d,_0x1ed72d);const _0x5888fc=VisuMZ[_0x47a414(0x874)](_0x1ed72d[_0x47a414(0x71a)]);for(const _0x4d8e98 of _0x5888fc){if(!_0x4d8e98)continue;if(_0x4d8e98[_0x47a414(0x708)]())continue;if(!_0x4d8e98[_0x47a414(0x73a)]())continue;_0x4d8e98['resetBreakShield']();}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x495),_0x3ad17c=>{const _0x7be00e=_0x482454;if(!SceneManager[_0x7be00e(0x1f8)]())return;if(!Imported[_0x7be00e(0x961)])return;if(!BattleManager['isBTB']())return;VisuMZ['ConvertParams'](_0x3ad17c,_0x3ad17c);const _0x3cfccc=VisuMZ[_0x7be00e(0x874)](_0x3ad17c[_0x7be00e(0x71a)]),_0x50a38a=_0x3ad17c[_0x7be00e(0x2cf)];for(const _0x4a5deb of _0x3cfccc){if(!_0x4a5deb)continue;_0x4a5deb[_0x7be00e(0x7f7)](_0x50a38a);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x3dc),_0x3df13c=>{const _0x433436=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x433436(0x4b9)](_0x3df13c,_0x3df13c);const _0x57d165=$gameTemp[_0x433436(0x2c6)](),_0x2ac4b5=BattleManager[_0x433436(0x815)],_0x27b521=BattleManager[_0x433436(0x57d)];if(!_0x57d165||!_0x2ac4b5||!_0x27b521)return;if(!_0x2ac4b5['item']())return;const _0x30bcac=VisuMZ[_0x433436(0x874)](_0x3df13c[_0x433436(0x71a)]);for(const _0x563f2d of _0x30bcac){if(!_0x563f2d)continue;_0x3df13c[_0x433436(0x65b)]&&(_0x563f2d[_0x433436(0x702)](),_0x563f2d[_0x433436(0x1d3)](_0x563f2d[_0x433436(0x25a)]())),_0x563f2d[_0x433436(0x6ec)]()&&_0x563f2d['performCollapse']();}_0x57d165[_0x433436(0x953)](_0x433436(0x2a3));}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Mechanics_CtbOrder',_0x74f839=>{const _0xfa52e7=_0x482454;if(!SceneManager[_0xfa52e7(0x1f8)]())return;if(!Imported[_0xfa52e7(0x6eb)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0xfa52e7(0x4b9)](_0x74f839,_0x74f839);const _0x1b68ef=VisuMZ[_0xfa52e7(0x874)](_0x74f839[_0xfa52e7(0x71a)]),_0x3473a3=_0x74f839[_0xfa52e7(0x5cd)];for(const _0x382687 of _0x1b68ef){if(!_0x382687)continue;_0x382687[_0xfa52e7(0x63c)](_0x3473a3);}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x686),_0x700963=>{const _0x1bb4c4=_0x482454;if(!SceneManager[_0x1bb4c4(0x1f8)]())return;if(!Imported[_0x1bb4c4(0x6eb)])return;if(!BattleManager[_0x1bb4c4(0x942)]())return;VisuMZ[_0x1bb4c4(0x4b9)](_0x700963,_0x700963);const _0x31d9eb=VisuMZ[_0x1bb4c4(0x874)](_0x700963[_0x1bb4c4(0x71a)]),_0x6b9dbe=_0x700963[_0x1bb4c4(0x841)],_0x3f28b2=_0x700963[_0x1bb4c4(0x841)];for(const _0x32a2b1 of _0x31d9eb){if(!_0x32a2b1)continue;if(_0x32a2b1[_0x1bb4c4(0x3d6)]===_0x1bb4c4(0x106))_0x32a2b1[_0x1bb4c4(0x193)](_0x6b9dbe);else _0x32a2b1[_0x1bb4c4(0x3d6)]===_0x1bb4c4(0x213)&&_0x32a2b1['changeCtbCastTime'](_0x3f28b2);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x37e),_0x4de387=>{const _0x38bd28=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x38bd28(0x4b9)](_0x4de387,_0x4de387);const _0x555873=BattleManager['_action'];if(!_0x555873)return;let _0x524901=_0x4de387[_0x38bd28(0x437)];_0x555873[_0x38bd28(0x14c)](_0x524901);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x46b),_0x284e6f=>{const _0x4b0fec=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x284e6f,_0x284e6f);const _0x3a413f=VisuMZ[_0x4b0fec(0x874)](_0x284e6f['Targets']);for(const _0x36b1aa of _0x3a413f){if(!_0x36b1aa)continue;if(_0x36b1aa[_0x4b0fec(0x474)]())_0x36b1aa[_0x4b0fec(0x7ea)]();}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x68e),_0x45c54f=>{const _0x2a0453=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2a0453(0x4b9)](_0x45c54f,_0x45c54f);const _0x322b1f=$gameTemp['getLastPluginCommandInterpreter'](),_0x512010=BattleManager[_0x2a0453(0x57d)],_0x2d3b72=_0x45c54f[_0x2a0453(0x516)];if(!_0x322b1f)return;if(!_0x512010)return;_0x512010&&_0x512010[_0x2a0453(0x7a7)]()&&_0x2d3b72[_0x2a0453(0x24b)]()[_0x2a0453(0x910)]()!==_0x2a0453(0x2c3)&&_0x322b1f[_0x2a0453(0x653)]([_0x2d3b72]);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x23c),_0x570ab0=>{const _0x4edff=_0x482454;if(!SceneManager[_0x4edff(0x1f8)]())return;VisuMZ['ConvertParams'](_0x570ab0,_0x570ab0);const _0x4fc809=VisuMZ[_0x4edff(0x874)](_0x570ab0[_0x4edff(0x71a)]);for(const _0x1d3ff3 of _0x4fc809){if(!_0x1d3ff3)continue;if(!_0x1d3ff3[_0x4edff(0x186)]())continue;_0x1d3ff3[_0x4edff(0x69c)]();}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Mechanics_EtbAction',_0x5826c6=>{const _0x2cd99f=_0x482454;if(!SceneManager[_0x2cd99f(0x1f8)]())return;if(!Imported[_0x2cd99f(0x49c)])return;if(!BattleManager[_0x2cd99f(0x413)]())return;VisuMZ[_0x2cd99f(0x4b9)](_0x5826c6,_0x5826c6);const _0x4474fb=_0x5826c6['ActionCount'];BattleManager['_subject']&&BattleManager[_0x2cd99f(0x57d)][_0x2cd99f(0x732)]()[_0x2cd99f(0x866)](_0x4474fb);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x167),_0x40b9a4=>{const _0x368b64=_0x482454;if(!SceneManager[_0x368b64(0x1f8)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x368b64(0x768)]())return;VisuMZ['ConvertParams'](_0x40b9a4,_0x40b9a4);const _0x136928=_0x40b9a4[_0x368b64(0x726)];BattleManager['_subject']&&BattleManager['_subject']['friendsUnit']()[_0x368b64(0x107)](_0x136928);}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x1d1),_0x3672df=>{const _0x1db8f9=_0x482454;if(!SceneManager[_0x1db8f9(0x1f8)]())return;VisuMZ[_0x1db8f9(0x4b9)](_0x3672df,_0x3672df);const _0x5c40c0=VisuMZ[_0x1db8f9(0x874)](_0x3672df[_0x1db8f9(0x71a)]),_0x59e3ab=_0x3672df[_0x1db8f9(0x1a2)],_0x24982a=_0x3672df[_0x1db8f9(0x1bc)],_0x1bcad3=_0x3672df[_0x1db8f9(0x84a)],_0x219d91=_0x3672df['MP_Flat'],_0x55815b=_0x3672df[_0x1db8f9(0x671)],_0x4b9ea4=_0x3672df[_0x1db8f9(0x7f6)],_0x1cdcc7=_0x3672df['ShowPopup'];for(const _0x1936e9 of _0x5c40c0){if(!_0x1936e9)continue;const _0xb5095b=_0x1936e9[_0x1db8f9(0x825)](),_0x37442b=Math[_0x1db8f9(0x5d9)](_0x59e3ab*_0x1936e9['mhp']+_0x24982a),_0x3720b7=Math[_0x1db8f9(0x5d9)](_0x1bcad3*_0x1936e9[_0x1db8f9(0x3ff)]+_0x219d91),_0x5ed163=Math[_0x1db8f9(0x5d9)](_0x55815b*_0x1936e9[_0x1db8f9(0x752)]()+_0x4b9ea4);if(_0x37442b!==0x0)_0x1936e9[_0x1db8f9(0x963)](_0x37442b);if(_0x3720b7!==0x0)_0x1936e9['gainMp'](_0x3720b7);if(_0x5ed163!==0x0)_0x1936e9['gainTp'](_0x5ed163);if(_0x1cdcc7)_0x1936e9[_0x1db8f9(0x7ea)]();_0xb5095b&&_0x1936e9[_0x1db8f9(0x7a7)]()&&_0x1936e9[_0x1db8f9(0x634)]();}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x5f5),_0x54e379=>{const _0x350000=_0x482454;if(!SceneManager[_0x350000(0x1f8)]())return;VisuMZ['ConvertParams'](_0x54e379,_0x54e379);const _0x5dc7e2=VisuMZ['CreateActionSequenceTargets'](_0x54e379['Targets']);for(const _0x3de1d9 of _0x5dc7e2){if(!_0x3de1d9)continue;_0x3de1d9[_0x350000(0x2c4)](_0x54e379[_0x350000(0x21d)]);}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x66f),_0x1f1117=>{const _0x395308=_0x482454;if(!SceneManager[_0x395308(0x1f8)]())return;VisuMZ[_0x395308(0x4b9)](_0x1f1117,_0x1f1117);const _0x51c6c0=BattleManager[_0x395308(0x815)],_0x35a6a5={'criticalHitRate':_0x1f1117[_0x395308(0x823)],'criticalHitFlat':_0x1f1117[_0x395308(0x2e1)],'criticalDmgRate':_0x1f1117[_0x395308(0x1e6)],'criticalDmgFlat':_0x1f1117[_0x395308(0x87b)],'damageRate':_0x1f1117[_0x395308(0x7da)],'damageFlat':_0x1f1117[_0x395308(0x44c)],'hitRate':_0x1f1117[_0x395308(0x242)],'hitFlat':_0x1f1117[_0x395308(0x2b1)]};_0x51c6c0[_0x395308(0x426)]=_0x35a6a5;}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x47e),_0x47b5a=>{const _0x500ce4=_0x482454;if(!SceneManager[_0x500ce4(0x1f8)]())return;VisuMZ[_0x500ce4(0x4b9)](_0x47b5a,_0x47b5a);const _0x1743b0=_0x47b5a[_0x500ce4(0x870)];SceneManager['_scene'][_0x500ce4(0x957)](_0x1743b0);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x884),_0x4d0b1a=>{const _0x26a96c=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x26a96c(0x4b9)](_0x4d0b1a,_0x4d0b1a);const _0x266642=VisuMZ['CreateActionSequenceTargets'](_0x4d0b1a[_0x26a96c(0x71a)]);for(const _0x3fefce of _0x266642){if(!_0x3fefce)continue;let _0xf0529e=_0x4d0b1a['CurrentTurn'],_0x202725=_0x4d0b1a[_0x26a96c(0x772)],_0x4d74f6=_0x4d0b1a[_0x26a96c(0x854)];BattleManager[_0x26a96c(0x807)][_0x26a96c(0x4df)](_0x3fefce)?_0xf0529e+=_0x4d74f6:_0x202725+=_0x4d74f6,BattleManager[_0x26a96c(0x2bf)](_0x3fefce,-_0xf0529e,![]),BattleManager[_0x26a96c(0x2bf)](_0x3fefce,-_0x202725,!![]);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Mechanics_PtbAlterCost',_0x583a2a=>{const _0x457e0f=_0x482454;if(!SceneManager[_0x457e0f(0x1f8)]())return;if(!Imported[_0x457e0f(0x7e1)])return;if(!BattleManager[_0x457e0f(0x879)]())return;VisuMZ[_0x457e0f(0x4b9)](_0x583a2a,_0x583a2a);const _0x39fdf6=BattleManager[_0x457e0f(0x57d)][_0x457e0f(0x732)](),_0x171d7a=_0x583a2a[_0x457e0f(0xfe)],_0x40a168=_0x583a2a[_0x457e0f(0x6ea)]||_0x457e0f(0x926),_0x118c90=_0x583a2a[_0x457e0f(0x51a)]||_0x457e0f(0x926),_0x458ccb=_0x583a2a[_0x457e0f(0x3a1)]||0x0,_0xe5cde0=_0x583a2a[_0x457e0f(0x642)]||0x0;(_0x39fdf6[_0x457e0f(0x6d9)]()||_0x171d7a)&&(_0x171d7a&&(_0x39fdf6['_ptbActionCost']=_0x39fdf6[_0x457e0f(0x89d)]||{},_0x39fdf6[_0x457e0f(0x89d)][_0x457e0f(0x643)]=0x0),_0x39fdf6[_0x457e0f(0x215)](_0x40a168,_0x118c90,_0x458ccb,_0xe5cde0));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_Mechanics_PtbConvert',_0x50a6ef=>{const _0x1aaf19=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1aaf19(0x7e1)])return;if(!BattleManager[_0x1aaf19(0x879)]())return;VisuMZ[_0x1aaf19(0x4b9)](_0x50a6ef,_0x50a6ef);const _0x56a3fc=BattleManager[_0x1aaf19(0x57d)][_0x1aaf19(0x732)]();let _0x17f624=Math[_0x1aaf19(0x1e3)](_0x50a6ef[_0x1aaf19(0xe9)],0x0),_0x25c6d5=_0x56a3fc[_0x1aaf19(0x446)](),_0x4ddf58=_0x56a3fc[_0x1aaf19(0x4d9)]();while(_0x17f624--){if(_0x25c6d5<=0x0&&_0x4ddf58<=0x0)break;else _0x25c6d5>0x0?(_0x25c6d5--,_0x4ddf58++):_0x4ddf58--;}_0x56a3fc['setFullActionsPTB'](_0x25c6d5),_0x56a3fc[_0x1aaf19(0x72e)](_0x4ddf58);}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x8ca),_0x5cb857=>{const _0x5261f1=_0x482454;if(!SceneManager[_0x5261f1(0x1f8)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x5261f1(0x879)]())return;VisuMZ[_0x5261f1(0x4b9)](_0x5cb857,_0x5cb857);const _0x39aa9b=BattleManager[_0x5261f1(0x57d)]['friendsUnit']();let _0x3c3731=_0x5cb857['FullActions'],_0x4fbdc3=_0x5cb857[_0x5261f1(0x834)];_0x39aa9b[_0x5261f1(0x535)](_0x3c3731),_0x39aa9b['gainHalfActionsPTB'](_0x4fbdc3);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x1ec),_0x39d5ee=>{const _0x56d0dd=_0x482454;if(!SceneManager[_0x56d0dd(0x1f8)]())return;VisuMZ['ConvertParams'](_0x39d5ee,_0x39d5ee);const _0x410f50=[_0x56d0dd(0x668),_0x56d0dd(0x10a),_0x56d0dd(0x88f),'DEF','MAT','MDF',_0x56d0dd(0x432),'LUK'],_0x350197=_0x39d5ee[_0x56d0dd(0x929)],_0x15b7db=_0x39d5ee[_0x56d0dd(0x744)],_0x3fe2f8=VisuMZ[_0x56d0dd(0x874)](_0x39d5ee[_0x56d0dd(0x71a)]);for(const _0x4efc59 of _0x3fe2f8){if(!_0x4efc59)continue;for(const _0x1420e6 of _0x350197){const _0x487f87=_0x410f50[_0x56d0dd(0x7ac)](_0x1420e6['toUpperCase']()[_0x56d0dd(0x910)]());_0x487f87>=0x0&&_0x487f87<=0x7&&_0x4efc59[_0x56d0dd(0x5ac)](_0x487f87)&&_0x4efc59['removeBuff'](_0x487f87);}for(const _0x5edb5a of _0x15b7db){const _0x48ae2f=_0x410f50[_0x56d0dd(0x7ac)](_0x5edb5a[_0x56d0dd(0x24b)]()[_0x56d0dd(0x910)]());_0x48ae2f>=0x0&&_0x48ae2f<=0x7&&_0x4efc59['isDebuffAffected'](_0x48ae2f)&&_0x4efc59[_0x56d0dd(0x7c1)](_0x48ae2f);}}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x574),_0x1e90e1=>{const _0x678904=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x1e90e1,_0x1e90e1);const _0x2ebd0b=_0x1e90e1[_0x678904(0x927)],_0x389c3c=VisuMZ[_0x678904(0x874)](_0x1e90e1[_0x678904(0x71a)]);for(const _0x1d86c1 of _0x389c3c){if(!_0x1d86c1)continue;for(const _0x5830ef of _0x2ebd0b){_0x1d86c1[_0x678904(0x29b)](_0x5830ef);}}}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Mechanics_StbExploit',_0xdc7004=>{const _0x2be16d=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2be16d(0x41f)])return;if(!BattleManager[_0x2be16d(0x19a)]())return;VisuMZ[_0x2be16d(0x4b9)](_0xdc7004,_0xdc7004);const _0x188618=_0xdc7004[_0x2be16d(0x353)],_0x553bec=VisuMZ['CreateActionSequenceTargets'](_0xdc7004[_0x2be16d(0x71a)]),_0x1c4b3f=_0xdc7004[_0x2be16d(0x159)],_0x5621a9=_0xdc7004['Exploiter'],_0x373283=_0xdc7004[_0x2be16d(0x349)],_0x127bbe=BattleManager['_action'];if(_0x188618)for(const _0x43b215 of _0x553bec){if(!_0x43b215)continue;if(_0x43b215===user)continue;if(_0x1c4b3f)_0x43b215['setSTBExploited'](![]);_0x43b215[_0x2be16d(0x27a)](BattleManager['_subject'],_0x127bbe);}if(_0x5621a9&&BattleManager[_0x2be16d(0x57d)]){if(_0x373283)BattleManager[_0x2be16d(0x57d)]['setSTBExploited'](![]);const _0x48eac2=_0x553bec[0x0];BattleManager[_0x2be16d(0x78e)](_0x48eac2,_0x127bbe);}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x54e),_0x37c9e3=>{const _0xfac946=_0x482454;if(!SceneManager[_0xfac946(0x1f8)]())return;if(!Imported[_0xfac946(0x41f)])return;if(!BattleManager[_0xfac946(0x19a)]())return;VisuMZ[_0xfac946(0x4b9)](_0x37c9e3,_0x37c9e3);const _0x381d8a=_0x37c9e3[_0xfac946(0x965)];BattleManager[_0xfac946(0x57d)]&&BattleManager[_0xfac946(0x57d)]['stbGainInstant'](_0x381d8a);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Mechanics_StbRemoveExcessActions',_0x39469b=>{const _0x4cfbe8=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4cfbe8(0x41f)])return;if(!BattleManager[_0x4cfbe8(0x19a)]())return;VisuMZ[_0x4cfbe8(0x4b9)](_0x39469b,_0x39469b);let _0x4855db=_0x39469b[_0x4cfbe8(0x965)];if(BattleManager[_0x4cfbe8(0x57d)]){BattleManager[_0x4cfbe8(0x57d)][_0x4cfbe8(0x48d)]=BattleManager[_0x4cfbe8(0x57d)]['_actions']||[];while(_0x4855db--){if(BattleManager['_subject']['_actions']['length']<=0x0)break;BattleManager[_0x4cfbe8(0x57d)]['_actions'][_0x4cfbe8(0x17b)]();}}}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x507),_0x5d2a9c=>{const _0x3e1d68=_0x482454;if(!SceneManager[_0x3e1d68(0x1f8)]())return;if(!Imported[_0x3e1d68(0x618)])return;VisuMZ['ConvertParams'](_0x5d2a9c,_0x5d2a9c);const _0x15a1f4=VisuMZ[_0x3e1d68(0x874)](_0x5d2a9c[_0x3e1d68(0x71a)]),_0x1c8b5d=_0x5d2a9c[_0x3e1d68(0x940)];for(const _0x99d514 of _0x15a1f4){if(!_0x99d514)continue;if(!_0x99d514[_0x3e1d68(0x761)]())continue;_0x99d514[_0x3e1d68(0x6e2)](_0x1c8b5d);}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x1ba),_0x188fd8=>{const _0x305dfe=_0x482454;if(!SceneManager[_0x305dfe(0x1f8)]())return;VisuMZ[_0x305dfe(0x4b9)](_0x188fd8,_0x188fd8);const _0x35f912=VisuMZ['CreateActionSequenceTargets'](_0x188fd8[_0x305dfe(0x71a)]),_0x47353=_0x188fd8[_0x305dfe(0x8ad)],_0x2b9626={'textColor':ColorManager['getColor'](_0x188fd8['TextColor']),'flashColor':_0x188fd8[_0x305dfe(0x71d)],'flashDuration':_0x188fd8[_0x305dfe(0x784)]};for(const _0x485a2f of _0x35f912){if(!_0x485a2f)continue;_0x485a2f[_0x305dfe(0x713)](_0x47353,_0x2b9626);}}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_VariablePopup',_0x22630a=>{const _0x370164=_0x482454;if(!SceneManager[_0x370164(0x1f8)]())return;VisuMZ['ConvertParams'](_0x22630a,_0x22630a);const _0x4f4614=VisuMZ[_0x370164(0x874)](_0x22630a[_0x370164(0x71a)]);let _0x14b30d=$gameVariables[_0x370164(0x5b0)](_0x22630a[_0x370164(0x4bc)]);Imported[_0x370164(0x49a)]&&_0x22630a[_0x370164(0x2bc)]&&(_0x14b30d=VisuMZ['GroupDigits'](_0x14b30d));const _0x803a6b=String(_0x14b30d),_0x1000a1={'textColor':ColorManager[_0x370164(0x72a)](_0x22630a[_0x370164(0x654)]),'flashColor':_0x22630a['FlashColor'],'flashDuration':_0x22630a[_0x370164(0x784)]};for(const _0x24f70a of _0x4f4614){if(!_0x24f70a)continue;_0x24f70a[_0x370164(0x713)](_0x803a6b,_0x1000a1);}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x76d),_0x4259e0=>{const _0x49c299=_0x482454;if(!SceneManager[_0x49c299(0x1f8)]())return;const _0x5066d1=$gameTemp[_0x49c299(0x2c6)]();if(!_0x5066d1)return;_0x5066d1[_0x49c299(0x953)](_0x49c299(0x2a3));}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Motion_ClearFreezeFrame',_0x16abd5=>{const _0x5ef491=_0x482454;if(!SceneManager[_0x5ef491(0x1f8)]())return;VisuMZ['ConvertParams'](_0x16abd5,_0x16abd5);const _0x3a7bfd=VisuMZ[_0x5ef491(0x874)](_0x16abd5[_0x5ef491(0x71a)]);for(const _0x3501d8 of _0x3a7bfd){if(!_0x3501d8)continue;_0x3501d8[_0x5ef491(0x583)]();}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x943),_0x3a6211=>{const _0x5d5e4e=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5d5e4e(0x4b9)](_0x3a6211,_0x3a6211);const _0x4934e3=VisuMZ['CreateActionSequenceTargets'](_0x3a6211[_0x5d5e4e(0x71a)]),_0x468896=_0x3a6211[_0x5d5e4e(0x3c5)]['toLowerCase']()['trim']();let _0x449339=_0x3a6211[_0x5d5e4e(0x285)];const _0x1475b5=_0x3a6211[_0x5d5e4e(0x467)];![_0x5d5e4e(0x31e),_0x5d5e4e(0x265),_0x5d5e4e(0x538),_0x5d5e4e(0x116)][_0x5d5e4e(0x4df)](_0x468896)&&(_0x449339=![]);for(const _0x56a2b2 of _0x4934e3){if(!_0x56a2b2)continue;_0x56a2b2[_0x5d5e4e(0x75d)](_0x468896,_0x449339,_0x1475b5);}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_Motion_MotionType',_0x1e9e18=>{const _0x569e9b=_0x482454;if(!SceneManager[_0x569e9b(0x1f8)]())return;VisuMZ['ConvertParams'](_0x1e9e18,_0x1e9e18);const _0x53c775=VisuMZ[_0x569e9b(0x874)](_0x1e9e18[_0x569e9b(0x71a)]),_0x1cb3c9=_0x1e9e18[_0x569e9b(0x3c5)][_0x569e9b(0x61c)]()[_0x569e9b(0x910)](),_0x17df78=_0x1e9e18['ShowWeapon'];for(const _0x27f2b7 of _0x53c775){if(!_0x27f2b7)continue;if(_0x1cb3c9[_0x569e9b(0x445)](/ATTACK[ ](\d+)/i))_0x27f2b7[_0x569e9b(0x922)](Number(RegExp['$1']));else _0x1cb3c9===_0x569e9b(0x31e)?_0x27f2b7[_0x569e9b(0x4b7)]():_0x27f2b7['requestMotion'](_0x1cb3c9);if(!_0x17df78)_0x27f2b7['startWeaponAnimation'](0x0);else{if(_0x17df78&&[_0x569e9b(0x265),_0x569e9b(0x538),_0x569e9b(0x399)][_0x569e9b(0x4df)](_0x1cb3c9)){}}}}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Motion_PerformAction',_0x3f4d11=>{const _0x21cbc1=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3f4d11,_0x3f4d11);const _0x3f9955=BattleManager[_0x21cbc1(0x815)];if(!_0x3f9955)return;if(!_0x3f9955[_0x21cbc1(0x94e)]())return;const _0x56b604=VisuMZ[_0x21cbc1(0x874)](_0x3f4d11[_0x21cbc1(0x71a)]);for(const _0x2c57c4 of _0x56b604){if(!_0x2c57c4)continue;_0x2c57c4[_0x21cbc1(0x688)](_0x3f9955);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x2b4),_0x5c3eeb=>{const _0x17cbb8=_0x482454;if(!SceneManager[_0x17cbb8(0x1f8)]())return;VisuMZ[_0x17cbb8(0x4b9)](_0x5c3eeb,_0x5c3eeb);const _0x136d79=VisuMZ[_0x17cbb8(0x874)](_0x5c3eeb[_0x17cbb8(0x71a)]);for(const _0x1a0d4b of _0x136d79){if(!_0x1a0d4b)continue;if(!_0x1a0d4b[_0x17cbb8(0x1f6)]())continue;_0x1a0d4b['battler']()[_0x17cbb8(0x5c9)]();}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_Motion_WaitMotionFrame',_0x3401a4=>{const _0x488c4a=_0x482454;if(!SceneManager[_0x488c4a(0x1f8)]())return;VisuMZ['ConvertParams'](_0x3401a4,_0x3401a4);const _0x1f35ce=$gameTemp[_0x488c4a(0x2c6)](),_0x3a4ffc=_0x3401a4[_0x488c4a(0x6ce)]*Sprite_Battler[_0x488c4a(0x46f)];_0x1f35ce[_0x488c4a(0x223)](_0x3a4ffc);}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x776),_0x5b5054=>{const _0x5ed272=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5ed272(0x4b9)](_0x5b5054,_0x5b5054);const _0x54936d=$gameTemp[_0x5ed272(0x2c6)](),_0x5a99d4=BattleManager[_0x5ed272(0x815)];if(!_0x54936d||!_0x5a99d4)return;if(!_0x5a99d4[_0x5ed272(0x94e)]())return;const _0x5dd429=VisuMZ['CreateActionSequenceTargets'](_0x5b5054['Targets']);for(const _0x32874f of _0x5dd429){if(!_0x32874f)continue;_0x32874f[_0x5ed272(0x792)](_0x5a99d4);}if(_0x5b5054[_0x5ed272(0x3de)])_0x54936d[_0x5ed272(0x953)](_0x5ed272(0x330));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Movement_HomeMoveBy',_0x768658=>{const _0x40fdfa=_0x482454;if(!SceneManager[_0x40fdfa(0x1f8)]())return;if(!$gameSystem[_0x40fdfa(0x447)]())return;VisuMZ[_0x40fdfa(0x4b9)](_0x768658,_0x768658);const _0x2c8fc7=$gameTemp[_0x40fdfa(0x2c6)](),_0x2ecdaf=VisuMZ[_0x40fdfa(0x874)](_0x768658[_0x40fdfa(0x71a)]),_0x3532e5=_0x768658[_0x40fdfa(0x61d)],_0x1f2557=_0x768658[_0x40fdfa(0x894)],_0x5d95b2=_0x768658[_0x40fdfa(0x743)],_0x1db6e4=_0x768658[_0x40fdfa(0x704)],_0x10b82c=_0x768658['FaceDirection'],_0x4c0153=_0x768658[_0x40fdfa(0x92f)],_0x5e11f1=_0x768658[_0x40fdfa(0x3c5)],_0x2ff9b5=_0x768658[_0x40fdfa(0x3de)];if(!_0x2c8fc7)return;for(const _0x20968c of _0x2ecdaf){if(!_0x20968c)continue;let _0x296812=_0x1f2557,_0x2eb199=_0x5d95b2;if(_0x3532e5[_0x40fdfa(0x445)](/horz/i))_0x296812*=_0x20968c['isActor']()?-0x1:0x1;if(_0x3532e5[_0x40fdfa(0x445)](/vert/i))_0x2eb199*=_0x20968c[_0x40fdfa(0x761)]()?-0x1:0x1;_0x20968c['moveBattlerHomeDistance'](_0x296812,_0x2eb199,_0x1db6e4,_0x10b82c,_0x4c0153),_0x20968c[_0x40fdfa(0x6ca)](_0x5e11f1);}if(_0x2ff9b5)_0x2c8fc7[_0x40fdfa(0x953)](_0x40fdfa(0x330));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x79f),_0x53da30=>{const _0x1e0a93=_0x482454;if(!SceneManager[_0x1e0a93(0x1f8)]())return;if(!$gameSystem[_0x1e0a93(0x447)]())return;VisuMZ[_0x1e0a93(0x4b9)](_0x53da30,_0x53da30);const _0x2a6ca9=$gameTemp[_0x1e0a93(0x2c6)](),_0x24e27c=VisuMZ[_0x1e0a93(0x874)](_0x53da30[_0x1e0a93(0x71a)]),_0x2e84e6=_0x53da30['Destination'],_0x5ac50f=_0x53da30['OffsetAdjust'],_0x98b2a8=_0x53da30[_0x1e0a93(0x3ba)],_0x33c776=_0x53da30[_0x1e0a93(0x325)],_0xd0e37c=_0x53da30[_0x1e0a93(0x704)],_0x216800=_0x53da30[_0x1e0a93(0x53e)],_0x10a2e7=_0x53da30[_0x1e0a93(0x92f)],_0x5c1646=_0x53da30['MotionType'],_0x138071=_0x53da30[_0x1e0a93(0x3de)];if(!_0x2a6ca9)return;for(const _0x593678 of _0x24e27c){if(!_0x593678)continue;let _0x57b588=_0x593678[_0x1e0a93(0x1f6)]()[_0x1e0a93(0x12b)],_0x484e7d=_0x593678[_0x1e0a93(0x1f6)]()[_0x1e0a93(0x4c4)];if(_0x2e84e6[_0x1e0a93(0x445)](/home/i))_0x57b588=_0x593678[_0x1e0a93(0x1f6)]()['_homeX'],_0x484e7d=_0x593678['battler']()['_homeY'];else{if(_0x2e84e6[_0x1e0a93(0x445)](/center/i))_0x57b588=Graphics[_0x1e0a93(0x36e)]/0x2,_0x484e7d=Graphics[_0x1e0a93(0x69e)]/0x2;else _0x2e84e6[_0x1e0a93(0x445)](/point (\d+), (\d+)/i)&&(_0x57b588=Number(RegExp['$1']),_0x484e7d=Number(RegExp['$2']));}if(_0x5ac50f[_0x1e0a93(0x445)](/none/i))_0x57b588+=_0x98b2a8,_0x484e7d+=_0x33c776;else{if(_0x5ac50f[_0x1e0a93(0x445)](/horz/i)&&_0x5ac50f['match'](/vert/i))_0x57b588+=_0x593678[_0x1e0a93(0x761)]()?-_0x98b2a8:_0x98b2a8,_0x484e7d+=_0x593678[_0x1e0a93(0x761)]()?-_0x33c776:_0x33c776;else{if(_0x5ac50f['match'](/horz/i))_0x57b588+=_0x593678[_0x1e0a93(0x761)]()?-_0x98b2a8:_0x98b2a8,_0x484e7d+=_0x33c776;else _0x5ac50f[_0x1e0a93(0x445)](/vert/i)&&(_0x57b588+=_0x98b2a8,_0x484e7d+=_0x593678[_0x1e0a93(0x761)]()?-_0x33c776:_0x33c776);}}_0x593678[_0x1e0a93(0x8a5)](_0x57b588,_0x484e7d,_0xd0e37c,_0x216800,_0x10a2e7,-0x1),_0x593678[_0x1e0a93(0x6ca)](_0x5c1646);}if(_0x138071)_0x2a6ca9['setWaitMode']('battleMove');}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Movement_HomeMoveToTarget',_0x490c50=>{const _0x2bf2c3=_0x482454;if(!SceneManager[_0x2bf2c3(0x1f8)]())return;if(!$gameSystem[_0x2bf2c3(0x447)]())return;VisuMZ[_0x2bf2c3(0x4b9)](_0x490c50,_0x490c50);const _0x14514a=$gameTemp[_0x2bf2c3(0x2c6)](),_0x5791d1=VisuMZ[_0x2bf2c3(0x874)](_0x490c50['Targets1']),_0x45f255=VisuMZ[_0x2bf2c3(0x874)](_0x490c50[_0x2bf2c3(0x20c)]),_0x247e17=_0x490c50[_0x2bf2c3(0x8fd)];let _0x2e5989=_0x490c50[_0x2bf2c3(0x38c)];const _0x3f5ec1=_0x490c50[_0x2bf2c3(0x1a7)],_0x540237=_0x490c50[_0x2bf2c3(0x3ba)],_0x559686=_0x490c50['OffsetY'],_0x1f7cf0=_0x490c50[_0x2bf2c3(0x704)],_0x3781e1=_0x490c50['FaceDirection'],_0x10274b=_0x490c50['EasingType'],_0x62da7f=_0x490c50[_0x2bf2c3(0x3c5)],_0x4ae2fd=_0x490c50[_0x2bf2c3(0x3de)],_0x49a4db=Math[_0x2bf2c3(0x450)](..._0x45f255['map'](_0x19e780=>_0x19e780[_0x2bf2c3(0x1f6)]()[_0x2bf2c3(0x12b)]-_0x19e780[_0x2bf2c3(0x1f6)]()[_0x2bf2c3(0x3e7)]()/0x2)),_0x3e90de=Math[_0x2bf2c3(0x1e3)](..._0x45f255[_0x2bf2c3(0x597)](_0xba666a=>_0xba666a[_0x2bf2c3(0x1f6)]()[_0x2bf2c3(0x12b)]+_0xba666a[_0x2bf2c3(0x1f6)]()[_0x2bf2c3(0x3e7)]()/0x2)),_0x478aa3=Math[_0x2bf2c3(0x450)](..._0x45f255[_0x2bf2c3(0x597)](_0x2d18f7=>_0x2d18f7[_0x2bf2c3(0x1f6)]()[_0x2bf2c3(0x4c4)]-_0x2d18f7[_0x2bf2c3(0x1f6)]()[_0x2bf2c3(0x5eb)]())),_0x588213=Math[_0x2bf2c3(0x1e3)](..._0x45f255[_0x2bf2c3(0x597)](_0x457878=>_0x457878[_0x2bf2c3(0x1f6)]()['_baseY'])),_0x51c57a=_0x45f255[_0x2bf2c3(0x19d)](_0x32074d=>_0x32074d[_0x2bf2c3(0x761)]())[_0x2bf2c3(0x403)],_0x557e2a=_0x45f255[_0x2bf2c3(0x19d)](_0x497281=>_0x497281[_0x2bf2c3(0x186)]())['length'];let _0x4ba98b=0x0,_0x4c0f58=0x0;if(_0x247e17[_0x2bf2c3(0x445)](/front/i))_0x4ba98b=_0x51c57a>=_0x557e2a?_0x49a4db:_0x3e90de;else{if(_0x247e17[_0x2bf2c3(0x445)](/middle/i))_0x4ba98b=(_0x49a4db+_0x3e90de)/0x2,_0x2e5989=-0x1;else _0x247e17[_0x2bf2c3(0x445)](/back/i)&&(_0x4ba98b=_0x51c57a>=_0x557e2a?_0x3e90de:_0x49a4db);}if(_0x247e17[_0x2bf2c3(0x445)](/head/i))_0x4c0f58=_0x478aa3;else{if(_0x247e17[_0x2bf2c3(0x445)](/center/i))_0x4c0f58=(_0x478aa3+_0x588213)/0x2;else _0x247e17[_0x2bf2c3(0x445)](/base/i)&&(_0x4c0f58=_0x588213);}if(!_0x14514a)return;for(const _0x588310 of _0x5791d1){if(!_0x588310)continue;let _0x780ab1=_0x4ba98b,_0x502ffd=_0x4c0f58;if(_0x3f5ec1['match'](/none/i))_0x780ab1+=_0x540237,_0x502ffd+=_0x559686;else{if(_0x3f5ec1[_0x2bf2c3(0x445)](/horz/i)&&_0x3f5ec1[_0x2bf2c3(0x445)](/vert/i))_0x780ab1+=_0x588310[_0x2bf2c3(0x761)]()?-_0x540237:_0x540237,_0x502ffd+=_0x588310[_0x2bf2c3(0x761)]()?-_0x559686:_0x559686;else{if(_0x3f5ec1[_0x2bf2c3(0x445)](/horz/i))_0x780ab1+=_0x588310[_0x2bf2c3(0x761)]()?-_0x540237:_0x540237,_0x502ffd+=_0x559686;else _0x3f5ec1['match'](/vert/i)&&(_0x780ab1+=_0x540237,_0x502ffd+=_0x588310[_0x2bf2c3(0x761)]()?-_0x559686:_0x559686);}}_0x588310[_0x2bf2c3(0x8a5)](_0x780ab1,_0x502ffd,_0x1f7cf0,_0x3781e1,_0x10274b,_0x2e5989),_0x588310[_0x2bf2c3(0x6ca)](_0x62da7f);}if(_0x4ae2fd)_0x14514a[_0x2bf2c3(0x953)](_0x2bf2c3(0x330));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x7e2),_0x2c7b98=>{const _0x471d94=_0x482454;if(!SceneManager[_0x471d94(0x1f8)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x471d94(0x4b9)](_0x2c7b98,_0x2c7b98);const _0x3477be=VisuMZ[_0x471d94(0x874)](_0x2c7b98[_0x471d94(0x71a)]);let _0x4e426c=_0x2c7b98[_0x471d94(0x8ef)][_0x471d94(0x445)](/back/i);for(const _0x38a0e3 of _0x3477be){if(!_0x38a0e3)continue;if(_0x2c7b98[_0x471d94(0x8ef)][_0x471d94(0x445)](/rand/i))_0x4e426c=Math[_0x471d94(0x5d0)](0x2);_0x38a0e3['setBattlerFlip'](!!_0x4e426c);}}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x69a),_0x316db2=>{const _0x44f35d=_0x482454;if(!SceneManager[_0x44f35d(0x1f8)]())return;if(!$gameSystem[_0x44f35d(0x447)]())return;VisuMZ['ConvertParams'](_0x316db2,_0x316db2);const _0x4dcf27=VisuMZ['CreateActionSequenceTargets'](_0x316db2[_0x44f35d(0x71a)]);let _0x2276db=_0x316db2[_0x44f35d(0x418)];const _0x91fb41=_0x316db2[_0x44f35d(0x51d)];for(const _0x2043c3 of _0x4dcf27){if(!_0x2043c3)continue;let _0x3851b3=_0x2043c3['battler']()['_baseX'],_0xbe9899=_0x2043c3[_0x44f35d(0x1f6)]()[_0x44f35d(0x4c4)];if(_0x2276db[_0x44f35d(0x445)](/home/i))_0x3851b3=_0x2043c3[_0x44f35d(0x1f6)]()['_homeX'],_0xbe9899=_0x2043c3[_0x44f35d(0x1f6)]()[_0x44f35d(0x721)];else{if(_0x2276db[_0x44f35d(0x445)](/center/i))_0x3851b3=Graphics[_0x44f35d(0x36e)]/0x2,_0xbe9899=Graphics[_0x44f35d(0x69e)]/0x2;else _0x2276db[_0x44f35d(0x445)](/point (\d+), (\d+)/i)&&(_0x3851b3=Number(RegExp['$1']),_0xbe9899=Number(RegExp['$2']));}_0x2043c3[_0x44f35d(0x888)](Math['round'](_0x3851b3),Math[_0x44f35d(0x5d9)](_0xbe9899),!!_0x91fb41);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x454),_0xa2d249=>{const _0xc19476=_0x482454;if(!SceneManager[_0xc19476(0x1f8)]())return;if(!$gameSystem[_0xc19476(0x447)]())return;VisuMZ[_0xc19476(0x4b9)](_0xa2d249,_0xa2d249);const _0x24985b=VisuMZ['CreateActionSequenceTargets'](_0xa2d249['Targets1']),_0x2f0ba7=VisuMZ['CreateActionSequenceTargets'](_0xa2d249['Targets2']),_0x112d8c=_0x2f0ba7[_0xc19476(0x597)](_0x1ff791=>_0x1ff791&&_0x1ff791[_0xc19476(0x1f6)]()?_0x1ff791[_0xc19476(0x1f6)]()[_0xc19476(0x12b)]:0x0)/(_0x2f0ba7[_0xc19476(0x403)]||0x1),_0x34698f=_0x2f0ba7[_0xc19476(0x597)](_0x586626=>_0x586626&&_0x586626[_0xc19476(0x1f6)]()?_0x586626[_0xc19476(0x1f6)]()[_0xc19476(0x4c4)]:0x0)/(_0x2f0ba7[_0xc19476(0x403)]||0x1),_0x2d8426=_0xa2d249[_0xc19476(0x51d)];for(const _0xef0e51 of _0x24985b){if(!_0xef0e51)continue;_0xef0e51['setBattlerFacePoint'](Math[_0xc19476(0x5d9)](_0x112d8c),Math[_0xc19476(0x5d9)](_0x34698f),!!_0x2d8426);}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x699),_0x4e2e60=>{const _0x19031c=_0x482454;if(!SceneManager[_0x19031c(0x1f8)]())return;VisuMZ[_0x19031c(0x4b9)](_0x4e2e60,_0x4e2e60);const _0x5dab74=$gameTemp[_0x19031c(0x2c6)](),_0x1bb8e9=VisuMZ[_0x19031c(0x874)](_0x4e2e60[_0x19031c(0x71a)]),_0x49fd8f=_0x4e2e60[_0x19031c(0x281)],_0x4d0054=_0x4e2e60[_0x19031c(0x704)],_0x345bad=_0x4e2e60[_0x19031c(0x92f)],_0x30bf34=_0x4e2e60[_0x19031c(0x5a0)];if(!_0x5dab74)return;for(const _0x299f54 of _0x1bb8e9){if(!_0x299f54)continue;_0x299f54[_0x19031c(0x829)](_0x49fd8f,_0x4d0054,_0x345bad);}if(_0x30bf34)_0x5dab74[_0x19031c(0x953)](_0x19031c(0x552));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x38e),_0x525700=>{const _0x316208=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x316208(0x4b9)](_0x525700,_0x525700);const _0x2cd2c9=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2cd2c9)return;const _0x2a2472=VisuMZ[_0x316208(0x874)](_0x525700['Targets']);for(const _0x5c4248 of _0x2a2472){if(!_0x5c4248)continue;_0x5c4248['performActionEndMembers']();}BattleManager[_0x316208(0x57d)]&&BattleManager[_0x316208(0x57d)][_0x316208(0x561)]();if(_0x525700['WaitForMovement'])_0x2cd2c9[_0x316208(0x953)](_0x316208(0x330));}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x502),_0x560fb6=>{const _0xdce589=_0x482454;if(!SceneManager[_0xdce589(0x1f8)]())return;VisuMZ['ConvertParams'](_0x560fb6,_0x560fb6);const _0x12fe8c=$gameTemp[_0xdce589(0x2c6)](),_0x1604f9=VisuMZ[_0xdce589(0x874)](_0x560fb6['Targets']),_0x584526=_0x560fb6[_0xdce589(0x281)],_0x3b2a82=_0x560fb6['Duration'],_0x2920a4=_0x560fb6[_0xdce589(0x5c0)];if(!_0x12fe8c)return;for(const _0x3ce83b of _0x1604f9){if(!_0x3ce83b)continue;_0x3ce83b[_0xdce589(0x70d)](_0x584526,_0x3b2a82);}if(_0x2920a4)_0x12fe8c[_0xdce589(0x953)](_0xdce589(0x505));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x790),_0x612293=>{const _0x2f9209=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x2f9209(0x447)]())return;VisuMZ[_0x2f9209(0x4b9)](_0x612293,_0x612293);const _0x4b8a0c=$gameTemp['getLastPluginCommandInterpreter'](),_0x199d2e=VisuMZ[_0x2f9209(0x874)](_0x612293['Targets']),_0x27e65d=_0x612293['DistanceAdjust'],_0xe314e6=_0x612293['DistanceX'],_0x13955b=_0x612293['DistanceY'],_0x22efc9=_0x612293[_0x2f9209(0x704)],_0x1dfc45=_0x612293[_0x2f9209(0x53e)],_0x5727ae=_0x612293[_0x2f9209(0x92f)],_0x3a58ef=_0x612293[_0x2f9209(0x3c5)],_0x23e6fe=_0x612293['WaitForMovement'];if(!_0x4b8a0c)return;for(const _0x18172a of _0x199d2e){if(!_0x18172a)continue;let _0x12cc23=_0xe314e6,_0x3d8382=_0x13955b;if(_0x27e65d[_0x2f9209(0x445)](/horz/i))_0x12cc23*=_0x18172a['isActor']()?-0x1:0x1;if(_0x27e65d[_0x2f9209(0x445)](/vert/i))_0x3d8382*=_0x18172a['isActor']()?-0x1:0x1;_0x18172a[_0x2f9209(0x729)](_0x12cc23,_0x3d8382,_0x22efc9,_0x1dfc45,_0x5727ae),_0x18172a[_0x2f9209(0x6ca)](_0x3a58ef);}if(_0x23e6fe)_0x4b8a0c[_0x2f9209(0x953)](_0x2f9209(0x330));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_Movement_MoveToPoint',_0x31e5a3=>{const _0x34bf54=_0x482454;if(!SceneManager[_0x34bf54(0x1f8)]())return;if(!$gameSystem[_0x34bf54(0x447)]())return;VisuMZ[_0x34bf54(0x4b9)](_0x31e5a3,_0x31e5a3);const _0x4adc78=$gameTemp['getLastPluginCommandInterpreter'](),_0x4ae57a=VisuMZ[_0x34bf54(0x874)](_0x31e5a3[_0x34bf54(0x71a)]),_0x11234d=_0x31e5a3[_0x34bf54(0x1c4)],_0x1ff390=_0x31e5a3[_0x34bf54(0x1a7)],_0x46ed0c=_0x31e5a3['OffsetX'],_0x1170e0=_0x31e5a3[_0x34bf54(0x325)],_0x4a13ce=_0x31e5a3[_0x34bf54(0x704)],_0x3e7d5d=_0x31e5a3[_0x34bf54(0x53e)],_0x2303d6=_0x31e5a3['EasingType'],_0x3045a4=_0x31e5a3['MotionType'],_0x54815f=_0x31e5a3[_0x34bf54(0x3de)];if(!_0x4adc78)return;for(const _0x1bfc78 of _0x4ae57a){if(!_0x1bfc78)continue;let _0x44ee2d=_0x1bfc78[_0x34bf54(0x1f6)]()['_baseX'],_0x551d15=_0x1bfc78[_0x34bf54(0x1f6)]()[_0x34bf54(0x4c4)];if(_0x11234d['match'](/home/i))_0x44ee2d=_0x1bfc78[_0x34bf54(0x1f6)]()[_0x34bf54(0x8ae)],_0x551d15=_0x1bfc78[_0x34bf54(0x1f6)]()[_0x34bf54(0x721)];else{if(_0x11234d['match'](/center/i))_0x44ee2d=Graphics[_0x34bf54(0x36e)]/0x2,_0x551d15=Graphics['boxHeight']/0x2;else _0x11234d[_0x34bf54(0x445)](/point (\d+), (\d+)/i)&&(_0x44ee2d=Number(RegExp['$1']),_0x551d15=Number(RegExp['$2']));}if(_0x1ff390[_0x34bf54(0x445)](/none/i))_0x44ee2d+=_0x46ed0c,_0x551d15+=_0x1170e0;else{if(_0x1ff390[_0x34bf54(0x445)](/horz/i)&&_0x1ff390[_0x34bf54(0x445)](/vert/i))_0x44ee2d+=_0x1bfc78[_0x34bf54(0x761)]()?-_0x46ed0c:_0x46ed0c,_0x551d15+=_0x1bfc78[_0x34bf54(0x761)]()?-_0x1170e0:_0x1170e0;else{if(_0x1ff390[_0x34bf54(0x445)](/horz/i))_0x44ee2d+=_0x1bfc78[_0x34bf54(0x761)]()?-_0x46ed0c:_0x46ed0c,_0x551d15+=_0x1170e0;else _0x1ff390[_0x34bf54(0x445)](/vert/i)&&(_0x44ee2d+=_0x46ed0c,_0x551d15+=_0x1bfc78[_0x34bf54(0x761)]()?-_0x1170e0:_0x1170e0);}}_0x1bfc78[_0x34bf54(0x861)](_0x44ee2d,_0x551d15,_0x4a13ce,_0x3e7d5d,_0x2303d6,-0x1),_0x1bfc78[_0x34bf54(0x6ca)](_0x3045a4);}if(_0x54815f)_0x4adc78[_0x34bf54(0x953)](_0x34bf54(0x330));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x481),_0x3403c2=>{const _0x105839=_0x482454;if(!SceneManager[_0x105839(0x1f8)]())return;if(!$gameSystem[_0x105839(0x447)]())return;VisuMZ[_0x105839(0x4b9)](_0x3403c2,_0x3403c2);const _0x59252e=$gameTemp[_0x105839(0x2c6)](),_0x3d47e4=VisuMZ[_0x105839(0x874)](_0x3403c2['Targets1']),_0x1c3187=VisuMZ[_0x105839(0x874)](_0x3403c2[_0x105839(0x20c)]),_0x96c26=_0x3403c2[_0x105839(0x8fd)];let _0x4928c7=_0x3403c2[_0x105839(0x38c)];const _0x34d2ec=_0x3403c2[_0x105839(0x1a7)],_0x2350c8=_0x3403c2[_0x105839(0x3ba)],_0x204611=_0x3403c2[_0x105839(0x325)],_0x3ee7c6=_0x3403c2[_0x105839(0x704)],_0x1ebf25=_0x3403c2[_0x105839(0x53e)],_0x23bea3=_0x3403c2[_0x105839(0x92f)],_0x3b51d2=_0x3403c2[_0x105839(0x3c5)],_0x363121=_0x3403c2[_0x105839(0x3de)],_0x37667a=Math[_0x105839(0x450)](..._0x1c3187[_0x105839(0x597)](_0x10f2b6=>_0x10f2b6['battler']()[_0x105839(0x12b)]-_0x10f2b6[_0x105839(0x1f6)]()[_0x105839(0x3e7)]()/0x2)),_0x2412c6=Math[_0x105839(0x1e3)](..._0x1c3187[_0x105839(0x597)](_0x31a26b=>_0x31a26b[_0x105839(0x1f6)]()[_0x105839(0x12b)]+_0x31a26b[_0x105839(0x1f6)]()[_0x105839(0x3e7)]()/0x2)),_0x1ab1e7=Math[_0x105839(0x450)](..._0x1c3187['map'](_0x5c766c=>_0x5c766c['battler']()[_0x105839(0x4c4)]-_0x5c766c[_0x105839(0x1f6)]()[_0x105839(0x5eb)]())),_0x34e6c6=Math[_0x105839(0x1e3)](..._0x1c3187['map'](_0x2b5fae=>_0x2b5fae[_0x105839(0x1f6)]()[_0x105839(0x4c4)])),_0x1f4c16=_0x1c3187['filter'](_0xe95dfb=>_0xe95dfb[_0x105839(0x761)]())['length'],_0x532192=_0x1c3187[_0x105839(0x19d)](_0x46884c=>_0x46884c[_0x105839(0x186)]())[_0x105839(0x403)];let _0x2bb82b=0x0,_0x1ca9ef=0x0;if(_0x96c26[_0x105839(0x445)](/front/i))_0x2bb82b=_0x1f4c16>=_0x532192?_0x37667a:_0x2412c6;else{if(_0x96c26['match'](/middle/i))_0x2bb82b=(_0x37667a+_0x2412c6)/0x2,_0x4928c7=-0x1;else _0x96c26[_0x105839(0x445)](/back/i)&&(_0x2bb82b=_0x1f4c16>=_0x532192?_0x2412c6:_0x37667a);}if(_0x96c26[_0x105839(0x445)](/head/i))_0x1ca9ef=_0x1ab1e7;else{if(_0x96c26[_0x105839(0x445)](/center/i))_0x1ca9ef=(_0x1ab1e7+_0x34e6c6)/0x2;else _0x96c26[_0x105839(0x445)](/base/i)&&(_0x1ca9ef=_0x34e6c6);}if(!_0x59252e)return;for(const _0x522039 of _0x3d47e4){if(!_0x522039)continue;let _0x58e587=_0x2bb82b,_0x587ecf=_0x1ca9ef;if(_0x34d2ec['match'](/none/i))_0x58e587+=_0x2350c8,_0x587ecf+=_0x204611;else{if(_0x34d2ec[_0x105839(0x445)](/horz/i)&&_0x34d2ec['match'](/vert/i))_0x58e587+=_0x522039[_0x105839(0x761)]()?-_0x2350c8:_0x2350c8,_0x587ecf+=_0x522039[_0x105839(0x761)]()?-_0x204611:_0x204611;else{if(_0x34d2ec[_0x105839(0x445)](/horz/i))_0x58e587+=_0x522039[_0x105839(0x761)]()?-_0x2350c8:_0x2350c8,_0x587ecf+=_0x204611;else _0x34d2ec[_0x105839(0x445)](/vert/i)&&(_0x58e587+=_0x2350c8,_0x587ecf+=_0x522039['isActor']()?-_0x204611:_0x204611);}}_0x522039[_0x105839(0x861)](_0x58e587,_0x587ecf,_0x3ee7c6,_0x1ebf25,_0x23bea3,_0x4928c7),_0x522039[_0x105839(0x6ca)](_0x3b51d2);}if(_0x363121)_0x59252e['setWaitMode'](_0x105839(0x330));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x4c5),_0x15fd7d=>{const _0x19b41d=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x19b41d(0x4b9)](_0x15fd7d,_0x15fd7d);const _0x3350ab=$gameTemp['getLastPluginCommandInterpreter'](),_0x10549e=VisuMZ[_0x19b41d(0x874)](_0x15fd7d['Targets']),_0x393164=_0x15fd7d[_0x19b41d(0x8d9)],_0x581988=_0x15fd7d[_0x19b41d(0x704)],_0xd6577=_0x15fd7d[_0x19b41d(0x92f)],_0x51d7c7=_0x15fd7d[_0x19b41d(0x74c)];if(!_0x3350ab)return;for(const _0x3ac134 of _0x10549e){if(!_0x3ac134)continue;_0x3ac134['changeBattlerOpacity'](_0x393164,_0x581988,_0xd6577);}if(_0x51d7c7)_0x3350ab[_0x19b41d(0x953)](_0x19b41d(0x4c1));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x30a),_0xbe5292=>{const _0x463085=_0x482454;if(!SceneManager[_0x463085(0x1f8)]())return;VisuMZ[_0x463085(0x4b9)](_0xbe5292,_0xbe5292);const _0x5917a0=$gameTemp[_0x463085(0x2c6)](),_0x4e318e=VisuMZ[_0x463085(0x874)](_0xbe5292[_0x463085(0x71a)]),_0x5f4d2a=_0xbe5292['ScaleX'],_0x409d7d=_0xbe5292[_0x463085(0x928)],_0xc347b6=_0xbe5292[_0x463085(0x704)],_0x28df1d=_0xbe5292[_0x463085(0x92f)],_0x5a9fda=_0xbe5292[_0x463085(0x4b0)];if(!_0x5917a0)return;for(const _0x10f187 of _0x4e318e){if(!_0x10f187)continue;_0x10f187[_0x463085(0x724)](_0x5f4d2a,_0x409d7d,_0xc347b6,_0x28df1d);}if(_0x5a9fda)_0x5917a0[_0x463085(0x953)](_0x463085(0x90e));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x234),_0x315477=>{const _0x2fe374=_0x482454;if(!SceneManager[_0x2fe374(0x1f8)]())return;VisuMZ[_0x2fe374(0x4b9)](_0x315477,_0x315477);const _0xf6f707=$gameTemp[_0x2fe374(0x2c6)](),_0x132e71=VisuMZ[_0x2fe374(0x874)](_0x315477[_0x2fe374(0x71a)]),_0x51b648=_0x315477[_0x2fe374(0x6df)],_0xa8aeb6=_0x315477[_0x2fe374(0x677)],_0xdd24c0=_0x315477[_0x2fe374(0x704)],_0x29d7bd=_0x315477[_0x2fe374(0x92f)],_0x7314cd=_0x315477[_0x2fe374(0x72b)];if(!_0xf6f707)return;for(const _0x543197 of _0x132e71){if(!_0x543197)continue;_0x543197[_0x2fe374(0x8d1)](_0x51b648,_0xa8aeb6,_0xdd24c0,_0x29d7bd);}if(_0x7314cd)_0xf6f707[_0x2fe374(0x953)](_0x2fe374(0x3b9));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x436),_0x48b861=>{const _0x54991a=_0x482454;if(!SceneManager[_0x54991a(0x1f8)]())return;VisuMZ['ConvertParams'](_0x48b861,_0x48b861);const _0x387eb2=$gameTemp[_0x54991a(0x2c6)](),_0x505655=VisuMZ[_0x54991a(0x874)](_0x48b861['Targets']),_0x344ae1=_0x48b861['Angle'],_0x75ee7c=_0x48b861[_0x54991a(0x704)],_0x1ba20d=_0x48b861['EasingType'],_0x219985=_0x48b861[_0x54991a(0x6be)],_0x4f0b47=_0x48b861[_0x54991a(0x227)];if(!_0x387eb2)return;for(const _0x525d8a of _0x505655){if(!_0x525d8a)continue;_0x525d8a[_0x54991a(0x8da)](_0x344ae1,_0x75ee7c,_0x1ba20d,_0x219985);}if(_0x4f0b47)_0x387eb2['setWaitMode']('battleSpin');}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x4ec),_0x47d01c=>{const _0x51d1a6=_0x482454;if(!SceneManager[_0x51d1a6(0x1f8)]())return;const _0x201a7d=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x201a7d)return;_0x201a7d[_0x51d1a6(0x953)](_0x51d1a6(0x552));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x347),_0x4645f6=>{const _0x1fed5d=_0x482454;if(!SceneManager['isSceneBattle']())return;const _0x2a4af6=$gameTemp[_0x1fed5d(0x2c6)]();if(!_0x2a4af6)return;_0x2a4af6[_0x1fed5d(0x953)](_0x1fed5d(0x505));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x357),_0x3c5a31=>{const _0x4097db=_0x482454;if(!SceneManager[_0x4097db(0x1f8)]())return;const _0x1acf02=$gameTemp[_0x4097db(0x2c6)]();if(!_0x1acf02)return;_0x1acf02[_0x4097db(0x953)]('battleMove');}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x42a),_0x588cd3=>{const _0x1bc75a=_0x482454;if(!SceneManager[_0x1bc75a(0x1f8)]())return;const _0x19cf18=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x19cf18)return;_0x19cf18[_0x1bc75a(0x953)]('battleOpacity');}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x7ad),_0x516133=>{const _0x4f62f8=_0x482454;if(!SceneManager['isSceneBattle']())return;const _0xf7611=$gameTemp[_0x4f62f8(0x2c6)]();if(!_0xf7611)return;_0xf7611[_0x4f62f8(0x953)](_0x4f62f8(0x90e));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x149),_0x17ead6=>{const _0x100889=_0x482454;if(!SceneManager[_0x100889(0x1f8)]())return;const _0x5b670b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x5b670b)return;_0x5b670b['setWaitMode'](_0x100889(0x3b9));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x70a),_0x53abcd=>{const _0x2084da=_0x482454;if(!SceneManager[_0x2084da(0x1f8)]())return;const _0x79bc6c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x79bc6c)return;_0x79bc6c['setWaitMode']('battleSpin');}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x3aa),_0x26323a=>{const _0x135929=_0x482454;if(!SceneManager[_0x135929(0x1f8)]())return;if(!Imported[_0x135929(0x420)])return;VisuMZ[_0x135929(0x4b9)](_0x26323a,_0x26323a);const _0x2823ce=$gameTemp[_0x135929(0x2c6)](),_0x38aac1=_0x26323a[_0x135929(0x21a)];if(!_0x2823ce)return;const _0x5337af=BattleManager[_0x135929(0x82e)];if(!_0x5337af)return;_0x5337af[_0x135929(0x86f)](_0x26323a);if(_0x38aac1)_0x2823ce[_0x135929(0x953)](_0x135929(0x832));}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x6fe),_0x25abba=>{const _0x49515e=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x49515e(0x4b9)](_0x25abba,_0x25abba);const _0xf92582=$gameTemp[_0x49515e(0x2c6)](),_0xe74348=_0x25abba[_0x49515e(0x21a)];if(!_0xf92582)return;const _0x3a7b03=BattleManager[_0x49515e(0x82e)];if(!_0x3a7b03)return;_0x3a7b03['createActionSequenceProjectile'](_0x25abba);if(_0xe74348)_0xf92582[_0x49515e(0x953)](_0x49515e(0x832));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Projectile_Picture',_0x32b70c=>{const _0x14d228=_0x482454;if(!SceneManager[_0x14d228(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x14d228(0x4b9)](_0x32b70c,_0x32b70c);const _0x3dd6bb=$gameTemp[_0x14d228(0x2c6)](),_0x560db7=_0x32b70c[_0x14d228(0x21a)];if(!_0x3dd6bb)return;const _0x311a2a=BattleManager[_0x14d228(0x82e)];if(!_0x311a2a)return;_0x311a2a[_0x14d228(0x86f)](_0x32b70c);if(_0x560db7)_0x3dd6bb[_0x14d228(0x953)](_0x14d228(0x832));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x2f9),_0x342d2c=>{const _0x1a33dc=_0x482454;if(!SceneManager[_0x1a33dc(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1a33dc(0x4b9)](_0x342d2c,_0x342d2c);const _0x2181db=$gameTemp['getLastPluginCommandInterpreter'](),_0x3a5d0f=_0x342d2c['WaitForSkew'];if(!_0x2181db)return;$gameScreen[_0x1a33dc(0x15d)](_0x342d2c[_0x1a33dc(0x6df)],_0x342d2c[_0x1a33dc(0x677)],_0x342d2c[_0x1a33dc(0x704)],_0x342d2c[_0x1a33dc(0x92f)]);if(_0x3a5d0f)_0x2181db[_0x1a33dc(0x953)](_0x1a33dc(0x480));}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x7d9),_0x139bdd=>{const _0x4a3232=_0x482454;if(!SceneManager[_0x4a3232(0x1f8)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4a3232(0x4b9)](_0x139bdd,_0x139bdd);const _0x1d9bd0=$gameTemp[_0x4a3232(0x2c6)](),_0x55ac10=_0x139bdd[_0x4a3232(0x72b)];if(!_0x1d9bd0)return;$gameScreen[_0x4a3232(0x15d)](0x0,0x0,_0x139bdd[_0x4a3232(0x704)],_0x139bdd[_0x4a3232(0x92f)]);if(_0x55ac10)_0x1d9bd0[_0x4a3232(0x953)](_0x4a3232(0x480));}),PluginManager[_0x482454(0x351)](pluginData['name'],'ActSeq_Skew_WaitForSkew',_0x5208a2=>{const _0x1f30bc=_0x482454;if(!SceneManager[_0x1f30bc(0x1f8)]())return;if(!Imported[_0x1f30bc(0x80d)])return;const _0x5d9b90=$gameTemp[_0x1f30bc(0x2c6)]();if(!_0x5d9b90)return;_0x5d9b90[_0x1f30bc(0x953)](_0x1f30bc(0x480));}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x5ca),_0x125c6f=>{const _0x246541=_0x482454;if(!SceneManager[_0x246541(0x1f8)]())return;VisuMZ[_0x246541(0x4b9)](_0x125c6f,_0x125c6f);const _0x59a5e9=$gameTemp[_0x246541(0x2c6)](),_0x49a84e=_0x125c6f['Index'],_0x1b8af6=_0x125c6f[_0x246541(0x516)];if(!_0x59a5e9)return;BattleManager[_0x246541(0x1ef)]=_0x49a84e,BattleManager[_0x246541(0x2e8)]=BattleManager[_0x246541(0x1d5)]?BattleManager[_0x246541(0x1d5)][BattleManager[_0x246541(0x1ef)]]||null:null,BattleManager[_0x246541(0x2e8)]&&_0x1b8af6[_0x246541(0x24b)]()[_0x246541(0x910)]()!==_0x246541(0x2c3)&&_0x59a5e9[_0x246541(0x653)]([_0x1b8af6]);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x889),_0x26c35b=>{const _0x501f15=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x501f15(0x4b9)](_0x26c35b,_0x26c35b);const _0x3e16bb=$gameTemp['getLastPluginCommandInterpreter'](),_0x4f3572=_0x26c35b['JumpToLabel'];if(!_0x3e16bb)return;BattleManager[_0x501f15(0x1ef)]++,BattleManager[_0x501f15(0x2e8)]=BattleManager[_0x501f15(0x1d5)][BattleManager['_targetIndex']]||null,BattleManager[_0x501f15(0x2e8)]&&_0x4f3572[_0x501f15(0x24b)]()[_0x501f15(0x910)]()!=='UNTITLED'&&_0x3e16bb[_0x501f15(0x653)]([_0x4f3572]);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],'ActSeq_Target_PrevTarget',_0x5ad0c2=>{const _0xa12741=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5ad0c2,_0x5ad0c2);const _0x50f1ed=$gameTemp[_0xa12741(0x2c6)](),_0x4797fe=_0x5ad0c2[_0xa12741(0x516)];if(!_0x50f1ed)return;BattleManager[_0xa12741(0x1ef)]--,BattleManager[_0xa12741(0x2e8)]=BattleManager[_0xa12741(0x1d5)][BattleManager[_0xa12741(0x1ef)]]||null,BattleManager[_0xa12741(0x2e8)]&&_0x4797fe[_0xa12741(0x24b)]()[_0xa12741(0x910)]()!==_0xa12741(0x2c3)&&_0x50f1ed[_0xa12741(0x653)]([_0x4797fe]);}),PluginManager['registerCommand'](pluginData['name'],_0x482454(0x8e6),_0x3665e4=>{const _0x42f746=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3665e4,_0x3665e4);const _0x182842=$gameTemp[_0x42f746(0x2c6)](),_0x12d97f=_0x3665e4[_0x42f746(0x12e)],_0x5bb433=_0x3665e4[_0x42f746(0x516)];if(!_0x182842)return;const _0x750bb2=BattleManager[_0x42f746(0x1ef)];for(;;){BattleManager[_0x42f746(0x1ef)]=Math['randomInt'](BattleManager[_0x42f746(0x1d5)][_0x42f746(0x403)]);if(!_0x12d97f)break;if(BattleManager[_0x42f746(0x1ef)]!==_0x750bb2)break;if(BattleManager[_0x42f746(0x1d5)]['length']<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager[_0x42f746(0x2e8)]=BattleManager[_0x42f746(0x1d5)][BattleManager['_targetIndex']]||null,BattleManager[_0x42f746(0x2e8)]&&_0x5bb433[_0x42f746(0x24b)]()['trim']()!==_0x42f746(0x2c3)&&_0x182842[_0x42f746(0x653)]([_0x5bb433]);}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x66e),_0x55a208=>{const _0x145a6c=_0x482454;if(!SceneManager[_0x145a6c(0x1f8)]())return;VisuMZ[_0x145a6c(0x4b9)](_0x55a208,_0x55a208);const _0x4016dc=VisuMZ['CreateActionSequenceTargets'](_0x55a208[_0x145a6c(0x71a)]);for(const _0x319e00 of _0x4016dc){if(!_0x319e00)continue;if(!_0x319e00[_0x145a6c(0x761)]())continue;_0x319e00[_0x145a6c(0x633)]();}}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x434),_0xaaf262=>{const _0xbdc50f=_0x482454;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xbdc50f(0x4b9)](_0xaaf262,_0xaaf262);const _0x183854=$gameTemp[_0xbdc50f(0x2c6)]();let _0x5b4a7c=![];const _0xd9eb1b=_0xaaf262[_0xbdc50f(0x516)],_0x5b8242=VisuMZ[_0xbdc50f(0x874)](_0xaaf262[_0xbdc50f(0x71a)]);for(const _0x3b9544 of _0x5b8242){if(!_0x3b9544)continue;if(!_0x3b9544['isActor']())continue;_0x3b9544[_0xbdc50f(0x1f4)](),_0x3b9544['weapons']()[_0xbdc50f(0x403)]>0x0?_0x5b4a7c=!![]:_0x3b9544[_0xbdc50f(0x633)]();}_0x5b4a7c&&_0xd9eb1b['toUpperCase']()['trim']()!==_0xbdc50f(0x2c3)&&_0x183854[_0xbdc50f(0x653)]([_0xd9eb1b]);}),PluginManager[_0x482454(0x351)](pluginData[_0x482454(0x7cb)],_0x482454(0x4e9),_0x29ec21=>{const _0x4900cc=_0x482454;if(!SceneManager[_0x4900cc(0x1f8)]())return;VisuMZ['ConvertParams'](_0x29ec21,_0x29ec21);let _0x36670e=_0x29ec21['SlotID'];_0x36670e--,_0x36670e=Math['max'](_0x36670e,0x0);const _0x111adc=VisuMZ[_0x4900cc(0x874)](_0x29ec21['Targets']);for(const _0x134d52 of _0x111adc){if(!_0x134d52)continue;if(!_0x134d52[_0x4900cc(0x761)]())continue;_0x134d52[_0x4900cc(0x6d7)](_0x36670e);}}),PluginManager[_0x482454(0x351)](pluginData['name'],_0x482454(0x3dd),_0x123a0e=>{const _0x193632=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x193632(0x80d)])return;VisuMZ[_0x193632(0x4b9)](_0x123a0e,_0x123a0e);const _0x196531=$gameTemp[_0x193632(0x2c6)](),_0x4a87f9=_0x123a0e[_0x193632(0x5ed)];if(!_0x196531)return;$gameScreen['setBattleZoom'](_0x123a0e['Scale'],_0x123a0e[_0x193632(0x704)],_0x123a0e['EasingType']);if(_0x4a87f9)_0x196531[_0x193632(0x953)](_0x193632(0x1a4));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],_0x482454(0x51b),_0x23c65d=>{const _0x53bc0f=_0x482454;if(!SceneManager[_0x53bc0f(0x1f8)]())return;if(!Imported[_0x53bc0f(0x80d)])return;VisuMZ['ConvertParams'](_0x23c65d,_0x23c65d);const _0x302a33=$gameTemp[_0x53bc0f(0x2c6)](),_0x213e6a=_0x23c65d[_0x53bc0f(0x5ed)];if(!_0x302a33)return;$gameScreen[_0x53bc0f(0x5a5)](0x1,_0x23c65d[_0x53bc0f(0x704)],_0x23c65d[_0x53bc0f(0x92f)]);if(_0x213e6a)_0x302a33[_0x53bc0f(0x953)](_0x53bc0f(0x1a4));}),PluginManager['registerCommand'](pluginData[_0x482454(0x7cb)],'ActSeq_Zoom_WaitForZoom',_0x32efd2=>{const _0x206851=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x206851(0x80d)])return;const _0x3a5b61=$gameTemp[_0x206851(0x2c6)]();if(!_0x3a5b61)return;_0x3a5b61['setWaitMode'](_0x206851(0x1a4));}),VisuMZ[_0x482454(0x16e)][_0x482454(0x74d)]=Scene_Boot[_0x482454(0x61b)][_0x482454(0x88b)],Scene_Boot['prototype'][_0x482454(0x88b)]=function(){const _0x3b84ac=_0x482454;this[_0x3b84ac(0x8f1)](),this[_0x3b84ac(0x891)](),this[_0x3b84ac(0x87f)](),this[_0x3b84ac(0x108)](),VisuMZ[_0x3b84ac(0x16e)][_0x3b84ac(0x74d)][_0x3b84ac(0x2b9)](this),this[_0x3b84ac(0x389)](),this['process_VisuMZ_BattleCore_BaseTroops'](),this[_0x3b84ac(0x5b3)](),this['process_VisuMZ_BattleCore_CommonEventKeys']();},Scene_Boot[_0x482454(0x61b)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x16c864=_0x482454;if(VisuMZ[_0x16c864(0x255)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this[_0x16c864(0x1e2)]();},Scene_Boot[_0x482454(0x61b)][_0x482454(0x8f1)]=function(){const _0x33bcf3=_0x482454,_0x52935b=$dataSystem[_0x33bcf3(0x3f7)][_0x33bcf3(0x403)];for(let _0x2c3afc=0x0;_0x2c3afc<_0x52935b;_0x2c3afc++){const _0x44e9bc=$dataSystem['attackMotions'][_0x2c3afc];if(_0x44e9bc)continue;$dataSystem[_0x33bcf3(0x646)][_0x2c3afc]=JsonEx['makeDeepCopy']($dataSystem[_0x33bcf3(0x646)][0x0]);}},Scene_Boot[_0x482454(0x61b)][_0x482454(0x891)]=function(){const _0x1912cf=_0x482454,_0x570dec=VisuMZ[_0x1912cf(0x16e)][_0x1912cf(0x4ae)];_0x570dec[_0x1912cf(0x448)]['PopupPosition']===undefined&&(_0x570dec[_0x1912cf(0x448)]['PopupPosition']='base'),_0x570dec[_0x1912cf(0x2ef)][_0x1912cf(0x6c2)]===undefined&&(_0x570dec[_0x1912cf(0x2ef)][_0x1912cf(0x6c2)]=![]),_0x570dec[_0x1912cf(0x8c8)][_0x1912cf(0x6c2)]===undefined&&(_0x570dec[_0x1912cf(0x8c8)][_0x1912cf(0x6c2)]=!![]),_0x570dec[_0x1912cf(0x2ef)][_0x1912cf(0x3bb)]===undefined&&(_0x570dec[_0x1912cf(0x2ef)][_0x1912cf(0x3bb)]=![]),_0x570dec[_0x1912cf(0x2ef)][_0x1912cf(0x2b5)]===undefined&&(_0x570dec['Actor'][_0x1912cf(0x2b5)]=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x482454(0x61b)][_0x482454(0x87f)]=function(){const _0x16c141=_0x482454;for(const _0x3c257a of VisuMZ[_0x16c141(0x16e)][_0x16c141(0x4ae)][_0x16c141(0x448)][_0x16c141(0x395)]){if(!_0x3c257a)continue;const _0x3463fb=_0x3c257a[_0x16c141(0x599)]['toUpperCase']()[_0x16c141(0x910)]();VisuMZ[_0x16c141(0x84f)][_0x3463fb]=_0x3c257a;}},VisuMZ[_0x482454(0x16e)][_0x482454(0x7db)]={},Scene_Boot[_0x482454(0x61b)][_0x482454(0x108)]=function(){const _0x57c029=_0x482454,_0x3b7f7d=VisuMZ[_0x57c029(0x16e)]['RegExp'],_0x1dcfba=_0x57c029(0x5d6),_0x5580fa=[['Pre',_0x57c029(0x8de)],[_0x57c029(0x955),_0x57c029(0x5ae)]],_0x5a4368=[[_0x57c029(0x66a),_0x57c029(0x513)],[_0x57c029(0x7dd),_0x57c029(0x335)]],_0x48a09a=[['',''],[_0x57c029(0x3d2),_0x57c029(0x492)],[_0x57c029(0x1ac),'AS\x20TARGET']];for(const _0x3789cc of _0x5a4368){for(const _0xa80636 of _0x48a09a){for(const _0xd8a478 of _0x5580fa){const _0x13be55=_0x3789cc[0x0][_0x57c029(0x355)](_0xd8a478[0x0],_0xa80636[0x0]),_0x2bb790=_0x3789cc[0x1][_0x57c029(0x355)](_0xd8a478[0x1],_0xa80636[0x1])['trim'](),_0x2ed1ef=new RegExp(_0x1dcfba['format'](_0x2bb790),'i');_0x3b7f7d[_0x13be55]=_0x2ed1ef;}}}const _0x29a646=[['%1StartActionJS','JS\x20%1START\x20ACTION'],[_0x57c029(0x385),_0x57c029(0x1d6)]];for(const _0x4e1fbd of _0x29a646){for(const _0x1075d4 of _0x5580fa){const _0x479b09=_0x4e1fbd[0x0]['format'](_0x1075d4[0x0]),_0x460391=_0x4e1fbd[0x1]['format'](_0x1075d4[0x1]),_0x26d3f2=new RegExp(_0x1dcfba[_0x57c029(0x355)](_0x460391),'i');_0x3b7f7d[_0x479b09]=_0x26d3f2;}}const _0x153110=[['%1StartBattleJS',_0x57c029(0x80c)],[_0x57c029(0x7a6),_0x57c029(0x18a)],[_0x57c029(0x7c5),_0x57c029(0x64d)],[_0x57c029(0x840),'JS\x20BATTLE\x20DEFEAT'],[_0x57c029(0x7d0),_0x57c029(0x47a)],[_0x57c029(0x4de),'JS\x20ESCAPE\x20FAILURE'],['%1StartTurnJS',_0x57c029(0x8f7)],[_0x57c029(0x62f),_0x57c029(0x323)],[_0x57c029(0x42b),_0x57c029(0x906)]];for(const _0x5b808c of _0x153110){for(const _0x126559 of _0x5580fa){const _0x788376=_0x5b808c[0x0][_0x57c029(0x355)](_0x126559[0x0]),_0x159671=_0x5b808c[0x1]['format'](_0x126559[0x1]),_0x144b6f=new RegExp(_0x1dcfba[_0x57c029(0x355)](_0x159671),'i');_0x3b7f7d[_0x788376]=_0x144b6f;}}},Scene_Boot[_0x482454(0x61b)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x24af29=_0x482454,_0x341424=$dataSkills[_0x24af29(0x515)]($dataItems);for(const _0x5210ce of _0x341424){if(!_0x5210ce)continue;VisuMZ[_0x24af29(0x16e)][_0x24af29(0x198)](_0x5210ce);}},Scene_Boot[_0x482454(0x61b)][_0x482454(0x7a1)]=function(){const _0x12af7d=_0x482454,_0x36ea71=$dataActors[_0x12af7d(0x515)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x524ef7 of _0x36ea71){if(!_0x524ef7)continue;VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x524ef7);}},Scene_Boot[_0x482454(0x61b)][_0x482454(0x4d8)]=function(){const _0xd70bb4=_0x482454,_0xa36e0e=VisuMZ['BattleCore'][_0xd70bb4(0x4ae)]['Mechanics'][_0xd70bb4(0x318)],_0x52b1fa=[];for(const _0x5282d1 of _0xa36e0e){const _0x4d8f92=$dataTroops[_0x5282d1];if(_0x4d8f92)_0x52b1fa[_0xd70bb4(0x32d)](JsonEx['makeDeepCopy'](_0x4d8f92));}for(const _0x603d3b of $dataTroops){if(!_0x603d3b)continue;for(const _0x171c5b of _0x52b1fa){if(_0x171c5b['id']===_0x603d3b['id'])continue;_0x603d3b['pages']=_0x603d3b[_0xd70bb4(0x53b)]['concat'](_0x171c5b['pages']);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PreBattleCommonEvent']=function(){const _0x263c8e=_0x482454,_0x39edff=VisuMZ[_0x263c8e(0x16e)]['Settings'][_0x263c8e(0x573)];if(_0x39edff[_0x263c8e(0x2af)]>0x0&&$dataCommonEvents[_0x39edff[_0x263c8e(0x2af)]]){const _0x478d0e=$dataCommonEvents[_0x39edff[_0x263c8e(0x2af)]],_0x366da7=_0x478d0e[_0x263c8e(0x1fa)][_0x263c8e(0x403)]-0x2,_0x863a04=_0x478d0e[_0x263c8e(0x1fa)][_0x366da7];if(_0x863a04&&_0x863a04[_0x263c8e(0x29f)]!==0xe6){const _0x5447b3={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x21850d=_0x478d0e[_0x263c8e(0x1fa)][_0x263c8e(0x54a)]();_0x478d0e[_0x263c8e(0x1fa)][_0x263c8e(0x30e)](_0x5447b3),_0x478d0e['list']['unshift'](_0x21850d);}}},Scene_Boot[_0x482454(0x61b)][_0x482454(0x8dd)]=function(){const _0x46f0c1=_0x482454;VisuMZ[_0x46f0c1(0x16e)]['CreateCommonEventKeys'](),VisuMZ[_0x46f0c1(0x16e)][_0x46f0c1(0xe1)]($dataSkills),VisuMZ[_0x46f0c1(0x16e)][_0x46f0c1(0xe1)]($dataItems);},VisuMZ[_0x482454(0x16e)][_0x482454(0x282)]=function(){const _0x495701=_0x482454;VisuMZ['BattleCore']['_commonEventKey']={};for(const _0x561afb of $dataCommonEvents){if(!_0x561afb)continue;if(_0x561afb[_0x495701(0x7cb)][_0x495701(0x445)](/\[(.*)\]/i)){let _0x573082=String(RegExp['$1'])[_0x495701(0x563)](/,/g,'')['toUpperCase']()[_0x495701(0x910)]();VisuMZ[_0x495701(0x16e)][_0x495701(0x554)][_0x573082]=_0x561afb['id'];}}},VisuMZ[_0x482454(0x16e)][_0x482454(0xe1)]=function(_0x2cf9c0){const _0x44c4e5=_0x482454;for(const _0x1dfd70 of _0x2cf9c0){if(!_0x1dfd70)continue;VisuMZ['BattleCore'][_0x44c4e5(0x755)](_0x1dfd70);}},VisuMZ[_0x482454(0x16e)][_0x482454(0x755)]=function(_0x2cb9b7){const _0x5af174=_0x482454;if(!_0x2cb9b7)return;if(!_0x2cb9b7['effects'])return;VisuMZ[_0x5af174(0x16e)][_0x5af174(0x554)]=VisuMZ['BattleCore'][_0x5af174(0x554)]||{};const _0x4a3b15=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0xfebb04=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x14ee0a=[];const _0x7298af=_0x2cb9b7[_0x5af174(0x305)][_0x5af174(0x445)](_0x4a3b15);if(_0x7298af){for(const _0x184617 of _0x7298af){_0x184617[_0x5af174(0x445)](_0x4a3b15);const _0x1a42cc=String(RegExp['$1'])[_0x5af174(0x8b5)](',')[_0x5af174(0x597)](_0x5dbf0b=>String(_0x5dbf0b)[_0x5af174(0x24b)]()[_0x5af174(0x910)]());_0x14ee0a=_0x14ee0a[_0x5af174(0x515)](_0x1a42cc);}!_0x2cb9b7[_0x5af174(0x305)][_0x5af174(0x445)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2cb9b7['note']+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x2cb9b7[_0x5af174(0x305)][_0x5af174(0x445)](_0xfebb04)){const _0x469a54=String(RegExp['$1'])[_0x5af174(0x8b5)](/[\r\n]+/)['map'](_0x345b12=>String(_0x345b12)['toUpperCase']()[_0x5af174(0x910)]());_0x14ee0a=_0x14ee0a['concat'](_0x469a54);!_0x2cb9b7[_0x5af174(0x305)][_0x5af174(0x445)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x2cb9b7[_0x5af174(0x305)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x521817 of _0x14ee0a){if(VisuMZ[_0x5af174(0x16e)][_0x5af174(0x554)][_0x521817]){const _0x47f0d6=VisuMZ['BattleCore']['_commonEventKey'][_0x521817],_0x1f2e19={'code':0x2c,'dataId':_0x47f0d6,'value1':0x1,'value2':0x0};_0x2cb9b7[_0x5af174(0x43d)][_0x5af174(0x32d)](_0x1f2e19);}}},Scene_Boot['prototype'][_0x482454(0x1e2)]=function(){const _0x32fd26=_0x482454,_0x49d2e5=$dataSkills['concat']($dataItems);for(const _0x5500f8 of _0x49d2e5){if(!_0x5500f8)continue;VisuMZ[_0x32fd26(0x16e)][_0x32fd26(0x136)](_0x5500f8);}},VisuMZ[_0x482454(0x16e)]['ParseActorNotetags']=VisuMZ[_0x482454(0x421)],VisuMZ[_0x482454(0x421)]=function(_0x107aaa){const _0x5c8f5c=_0x482454;VisuMZ[_0x5c8f5c(0x16e)][_0x5c8f5c(0x421)]&&VisuMZ[_0x5c8f5c(0x16e)][_0x5c8f5c(0x421)][_0x5c8f5c(0x2b9)](this,_0x107aaa),VisuMZ[_0x5c8f5c(0x16e)][_0x5c8f5c(0x577)](_0x107aaa);},VisuMZ[_0x482454(0x16e)][_0x482454(0x58b)]=VisuMZ[_0x482454(0x58b)],VisuMZ[_0x482454(0x58b)]=function(_0x4f49f0){const _0x4d15af=_0x482454;VisuMZ[_0x4d15af(0x16e)][_0x4d15af(0x58b)]&&VisuMZ[_0x4d15af(0x16e)]['ParseClassNotetags'][_0x4d15af(0x2b9)](this,_0x4f49f0),VisuMZ[_0x4d15af(0x16e)][_0x4d15af(0x577)](_0x4f49f0);},VisuMZ[_0x482454(0x16e)][_0x482454(0x104)]=VisuMZ[_0x482454(0x104)],VisuMZ['ParseSkillNotetags']=function(_0x463f28){const _0x509b2d=_0x482454;VisuMZ[_0x509b2d(0x16e)][_0x509b2d(0x104)]&&VisuMZ[_0x509b2d(0x16e)][_0x509b2d(0x104)]['call'](this,_0x463f28),VisuMZ[_0x509b2d(0x16e)][_0x509b2d(0x198)](_0x463f28),VisuMZ['BattleCore'][_0x509b2d(0x136)](_0x463f28);},VisuMZ[_0x482454(0x16e)][_0x482454(0x1db)]=VisuMZ[_0x482454(0x1db)],VisuMZ[_0x482454(0x1db)]=function(_0x3553c0){const _0xef9f1a=_0x482454;VisuMZ[_0xef9f1a(0x16e)][_0xef9f1a(0x1db)]&&VisuMZ[_0xef9f1a(0x16e)][_0xef9f1a(0x1db)][_0xef9f1a(0x2b9)](this,_0x3553c0),VisuMZ[_0xef9f1a(0x16e)][_0xef9f1a(0x198)](_0x3553c0),VisuMZ['BattleCore'][_0xef9f1a(0x136)](_0x3553c0);},VisuMZ['BattleCore'][_0x482454(0x298)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x482454(0x298)]=function(_0x5ae8e0){const _0x5c0435=_0x482454;VisuMZ['BattleCore']['ParseWeaponNotetags']&&VisuMZ[_0x5c0435(0x16e)][_0x5c0435(0x298)][_0x5c0435(0x2b9)](this,_0x5ae8e0),VisuMZ[_0x5c0435(0x16e)][_0x5c0435(0x577)](_0x5ae8e0);},VisuMZ[_0x482454(0x16e)][_0x482454(0x225)]=VisuMZ[_0x482454(0x225)],VisuMZ['ParseArmorNotetags']=function(_0x5b3205){const _0xc7af=_0x482454;VisuMZ[_0xc7af(0x16e)]['ParseArmorNotetags']&&VisuMZ[_0xc7af(0x16e)][_0xc7af(0x225)]['call'](this,_0x5b3205),VisuMZ[_0xc7af(0x16e)][_0xc7af(0x577)](_0x5b3205);},VisuMZ[_0x482454(0x16e)][_0x482454(0x438)]=VisuMZ[_0x482454(0x438)],VisuMZ[_0x482454(0x438)]=function(_0x652d85){const _0x433280=_0x482454;VisuMZ['BattleCore'][_0x433280(0x438)]&&VisuMZ['BattleCore'][_0x433280(0x438)][_0x433280(0x2b9)](this,_0x652d85),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x652d85);},VisuMZ[_0x482454(0x16e)][_0x482454(0x26a)]=VisuMZ[_0x482454(0x26a)],VisuMZ[_0x482454(0x26a)]=function(_0x4e300a){const _0x4c6a8d=_0x482454;VisuMZ[_0x4c6a8d(0x16e)][_0x4c6a8d(0x26a)]&&VisuMZ[_0x4c6a8d(0x16e)][_0x4c6a8d(0x26a)]['call'](this,_0x4e300a),VisuMZ[_0x4c6a8d(0x16e)][_0x4c6a8d(0x577)](_0x4e300a);},VisuMZ[_0x482454(0x16e)][_0x482454(0x198)]=function(_0x475c7d){const _0xc19cb0=_0x482454,_0x209708=['PreApplyJS',_0xc19cb0(0xdf),_0xc19cb0(0x18f),_0xc19cb0(0x5c7),_0xc19cb0(0x650),'PostStartActionJS',_0xc19cb0(0x45a),_0xc19cb0(0x2ad)];for(const _0xf2955c of _0x209708){VisuMZ[_0xc19cb0(0x16e)]['createJS'](_0x475c7d,_0xf2955c);}const _0x12e4f8=_0x475c7d['note'];_0x12e4f8[_0xc19cb0(0x445)](/<ALWAYS CRITICAL/i)&&(_0x475c7d[_0xc19cb0(0x166)][_0xc19cb0(0x12c)]=!![]),_0x12e4f8[_0xc19cb0(0x445)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x475c7d[_0xc19cb0(0x6de)]=Math[_0xc19cb0(0x1e3)](0x1,Number(RegExp['$1']))),_0x12e4f8[_0xc19cb0(0x445)](/<TARGET:[ ](.*)>/i)&&(_0x475c7d[_0xc19cb0(0x65f)]=String(RegExp['$1'])[_0xc19cb0(0x24b)]()[_0xc19cb0(0x910)]());},VisuMZ[_0x482454(0x16e)][_0x482454(0x577)]=function(_0x398426){const _0x1a084f=_0x482454,_0x14c8c0=[_0x1a084f(0x269),_0x1a084f(0x7d2),_0x1a084f(0x672),'PostDamageAsUserJS',_0x1a084f(0x272),_0x1a084f(0x550),'PreDamageAsTargetJS',_0x1a084f(0x526),_0x1a084f(0x650),_0x1a084f(0x7bc),'PreEndActionJS',_0x1a084f(0x2ad),'PreStartBattleJS','PostStartBattleJS',_0x1a084f(0x737),'PostEndBattleJS',_0x1a084f(0x7c5),'BattleDefeatJS',_0x1a084f(0x7d0),_0x1a084f(0x4de),_0x1a084f(0x4d2),_0x1a084f(0x8f9),_0x1a084f(0x42e),'PostEndTurnJS',_0x1a084f(0x709),_0x1a084f(0x956)];for(const _0x36b120 of _0x14c8c0){VisuMZ[_0x1a084f(0x16e)][_0x1a084f(0x483)](_0x398426,_0x36b120);}},VisuMZ[_0x482454(0x16e)][_0x482454(0x136)]=function(_0x5d34d1){const _0x1f1482=_0x482454,_0x16331c=_0x5d34d1['note'];if(_0x16331c['match'](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x56b257=String(RegExp['$1']),_0x2b2c4b=VisuMZ[_0x1f1482(0x16e)][_0x1f1482(0x88d)](_0x5d34d1,_0x1f1482(0x71a));VisuMZ[_0x1f1482(0x16e)]['createTargetsJS'](_0x56b257,_0x2b2c4b);}if(_0x16331c[_0x1f1482(0x445)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x37e4d2=String(RegExp['$1']),_0x594fce=VisuMZ[_0x1f1482(0x16e)][_0x1f1482(0x88d)](_0x5d34d1,'CommandVisible');VisuMZ[_0x1f1482(0x16e)][_0x1f1482(0x13b)](_0x37e4d2,_0x594fce);}},VisuMZ[_0x482454(0x16e)]['JS']={},VisuMZ[_0x482454(0x16e)]['createJS']=function(_0x3d6156,_0x16d4b9){const _0x46fc13=_0x482454,_0x17743e=_0x3d6156[_0x46fc13(0x305)];if(_0x17743e['match'](VisuMZ[_0x46fc13(0x16e)]['RegExp'][_0x16d4b9])){const _0xcd9b65=RegExp['$1'],_0x52131c='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'[_0x46fc13(0x355)](_0xcd9b65),_0x1e1b1d=VisuMZ[_0x46fc13(0x16e)][_0x46fc13(0x88d)](_0x3d6156,_0x16d4b9);VisuMZ[_0x46fc13(0x16e)]['JS'][_0x1e1b1d]=new Function(_0x52131c);}},VisuMZ['BattleCore']['createKeyJS']=function(_0x48f108,_0x51e1a2){const _0x353dae=_0x482454;let _0x2f374e='';if($dataActors[_0x353dae(0x4df)](_0x48f108))_0x2f374e=_0x353dae(0x77d)[_0x353dae(0x355)](_0x48f108['id'],_0x51e1a2);if($dataClasses[_0x353dae(0x4df)](_0x48f108))_0x2f374e=_0x353dae(0x317)['format'](_0x48f108['id'],_0x51e1a2);if($dataSkills[_0x353dae(0x4df)](_0x48f108))_0x2f374e=_0x353dae(0x34a)[_0x353dae(0x355)](_0x48f108['id'],_0x51e1a2);if($dataItems[_0x353dae(0x4df)](_0x48f108))_0x2f374e='Item-%1-%2'[_0x353dae(0x355)](_0x48f108['id'],_0x51e1a2);if($dataWeapons['includes'](_0x48f108))_0x2f374e=_0x353dae(0x3c7)['format'](_0x48f108['id'],_0x51e1a2);if($dataArmors['includes'](_0x48f108))_0x2f374e='Armor-%1-%2'[_0x353dae(0x355)](_0x48f108['id'],_0x51e1a2);if($dataEnemies['includes'](_0x48f108))_0x2f374e=_0x353dae(0x4d5)['format'](_0x48f108['id'],_0x51e1a2);if($dataStates[_0x353dae(0x4df)](_0x48f108))_0x2f374e=_0x353dae(0x7af)[_0x353dae(0x355)](_0x48f108['id'],_0x51e1a2);return _0x2f374e;},VisuMZ[_0x482454(0x16e)]['createTargetsJS']=function(_0x1c2aca,_0x389ceb){const _0x2c0773=_0x482454,_0x1eec79=_0x2c0773(0x248)[_0x2c0773(0x355)](_0x1c2aca);VisuMZ[_0x2c0773(0x16e)]['JS'][_0x389ceb]=new Function(_0x1eec79);},VisuMZ[_0x482454(0x16e)]['createCommandVisibleJS']=function(_0x1430f4,_0x38a8a6){const _0xbd308e=_0x482454,_0x3e5f68='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0xbd308e(0x355)](_0x1430f4);VisuMZ['BattleCore']['JS'][_0x38a8a6]=new Function(_0x3e5f68);},TextManager[_0x482454(0x4be)]=VisuMZ['BattleCore'][_0x482454(0x4ae)][_0x482454(0x8ee)][_0x482454(0x3fe)],TextManager[_0x482454(0x2ec)]=VisuMZ[_0x482454(0x16e)][_0x482454(0x4ae)]['AutoBattle'][_0x482454(0x945)],TextManager['autoBattleStyle']=VisuMZ[_0x482454(0x16e)][_0x482454(0x4ae)][_0x482454(0x6c4)]['StyleName'],TextManager['visualHpGauge']=VisuMZ[_0x482454(0x16e)][_0x482454(0x4ae)][_0x482454(0x208)][_0x482454(0x599)],ColorManager[_0x482454(0x72a)]=function(_0x55bd05){const _0x3ba0af=_0x482454;return _0x55bd05=String(_0x55bd05),_0x55bd05[_0x3ba0af(0x445)](/#(.*)/i)?'#%1'[_0x3ba0af(0x355)](String(RegExp['$1'])):this[_0x3ba0af(0x3f2)](Number(_0x55bd05));},DataManager[_0x482454(0x34d)]=function(_0x5f2557){const _0xfc49cf=_0x482454;if(_0x5f2557[_0xfc49cf(0x305)][_0xfc49cf(0x445)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x12a983=String(RegExp['$1'])[_0xfc49cf(0x24b)]()[_0xfc49cf(0x910)]();if(_0x12a983==='MANUAL')return _0xfc49cf(0x89c);if(VisuMZ[_0xfc49cf(0x84f)][_0x12a983])return _0x12a983;}const _0x1e1557=VisuMZ[_0xfc49cf(0x16e)]['Settings'][_0xfc49cf(0x448)][_0xfc49cf(0x6c0)][_0xfc49cf(0x24b)]()[_0xfc49cf(0x910)]();if(VisuMZ[_0xfc49cf(0x84f)][_0x1e1557])return _0x1e1557;return _0xfc49cf(0x89c);},DataManager[_0x482454(0x222)]=function(_0x293ec2){const _0x4ab59c=_0x482454;_0x293ec2=_0x293ec2[_0x4ab59c(0x24b)]()[_0x4ab59c(0x910)](),this[_0x4ab59c(0x90b)]=this[_0x4ab59c(0x90b)]||{};if(this[_0x4ab59c(0x90b)][_0x293ec2])return this[_0x4ab59c(0x90b)][_0x293ec2];for(let _0x5d7d8f=0x1;_0x5d7d8f<0x64;_0x5d7d8f++){if(!$dataSystem[_0x4ab59c(0x1d2)][_0x5d7d8f])continue;let _0x4adf2d=$dataSystem['skillTypes'][_0x5d7d8f][_0x4ab59c(0x24b)]()['trim']();_0x4adf2d=_0x4adf2d[_0x4ab59c(0x563)](/\x1I\[(\d+)\]/gi,''),_0x4adf2d=_0x4adf2d[_0x4ab59c(0x563)](/\\I\[(\d+)\]/gi,''),this[_0x4ab59c(0x90b)][_0x4adf2d]=_0x5d7d8f;}return this[_0x4ab59c(0x90b)][_0x293ec2]||0x0;},DataManager['getSkillIdWithName']=function(_0x552d3e){const _0x828bd=_0x482454;_0x552d3e=_0x552d3e[_0x828bd(0x24b)]()[_0x828bd(0x910)](),this[_0x828bd(0x77c)]=this['_skillIDs']||{};if(this[_0x828bd(0x77c)][_0x552d3e])return this[_0x828bd(0x77c)][_0x552d3e];for(const _0x338a1b of $dataSkills){if(!_0x338a1b)continue;this['_skillIDs'][_0x338a1b['name'][_0x828bd(0x24b)]()['trim']()]=_0x338a1b['id'];}return this[_0x828bd(0x77c)][_0x552d3e]||0x0;},DataManager[_0x482454(0x64c)]=function(_0xffd5bd){const _0x50da1b=_0x482454;_0xffd5bd=_0xffd5bd[_0x50da1b(0x24b)]()[_0x50da1b(0x910)](),this[_0x50da1b(0x468)]=this[_0x50da1b(0x468)]||{};if(this[_0x50da1b(0x468)][_0xffd5bd])return this['_enemyIDs'][_0xffd5bd];for(const _0x45ca2d of $dataEnemies){if(!_0x45ca2d)continue;this[_0x50da1b(0x468)][_0x45ca2d['name']['toUpperCase']()[_0x50da1b(0x910)]()]=_0x45ca2d['id'];}return this[_0x50da1b(0x468)][_0xffd5bd]||0x0;},DataManager[_0x482454(0x4bf)]=function(_0x273eab){const _0x4cdfd9=_0x482454;_0x273eab=_0x273eab[_0x4cdfd9(0x24b)]()[_0x4cdfd9(0x910)](),this['_wtypeIDs']=this[_0x4cdfd9(0x716)]||{};if(this[_0x4cdfd9(0x716)][_0x273eab])return this[_0x4cdfd9(0x716)][_0x273eab];for(let _0x33b0a3=0x1;_0x33b0a3<0x64;_0x33b0a3++){if(!$dataSystem[_0x4cdfd9(0x3f7)][_0x33b0a3])continue;let _0x3207c7=$dataSystem[_0x4cdfd9(0x3f7)][_0x33b0a3][_0x4cdfd9(0x24b)]()[_0x4cdfd9(0x910)]();_0x3207c7=_0x3207c7[_0x4cdfd9(0x563)](/\x1I\[(\d+)\]/gi,''),_0x3207c7=_0x3207c7[_0x4cdfd9(0x563)](/\\I\[(\d+)\]/gi,''),this['_wtypeIDs'][_0x3207c7]=_0x33b0a3;}return this[_0x4cdfd9(0x716)][_0x4cdfd9(0x45e)]=0x0,this['_wtypeIDs'][_0x273eab]||0x0;},DataManager[_0x482454(0x8d5)]=function(_0x3b1991){const _0x207cee=_0x482454,_0x48648f=_0x207cee(0x655);let _0x3834b6=_0x3b1991[_0x207cee(0x551)],_0x85a28d=_0x3b1991['name'];const _0x45558c=_0x3b1991[_0x207cee(0x305)];return _0x45558c['match'](/<DISPLAY ICON: (\d+)>/i)&&(_0x3834b6=Number(RegExp['$1'])),_0x45558c[_0x207cee(0x445)](/<DISPLAY TEXT: (.*)>/i)&&(_0x85a28d=String(RegExp['$1'])),_0x48648f[_0x207cee(0x355)](_0x3834b6,_0x85a28d);},DataManager[_0x482454(0x4e7)]=function(_0x22cc33){const _0x4b431a=_0x482454;return _0x22cc33['note'][_0x4b431a(0x445)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x22cc33[_0x4b431a(0x7cb)];},DataManager[_0x482454(0x4f4)]=function(_0x57f11c){const _0x6c83c6=_0x482454;return _0x57f11c[_0x6c83c6(0x305)][_0x6c83c6(0x445)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x57f11c[_0x6c83c6(0x551)];},DataManager[_0x482454(0x871)]=function(_0x52e1fd){const _0x47635e=_0x482454,_0x519325=$dataEnemies[_0x52e1fd];if(_0x519325){if(_0x519325[_0x47635e(0x305)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x5aec66=String(RegExp['$1'])[_0x47635e(0x8b5)](/[\r\n]+/)[_0x47635e(0x350)](''),_0x242637=this[_0x47635e(0x960)](_0x5aec66);_0x52e1fd=this['getEnemyIdWithName'](_0x242637)||_0x52e1fd,_0x52e1fd=DataManager[_0x47635e(0x871)](_0x52e1fd);}}return _0x52e1fd;},DataManager['processRandomizedData']=function(_0x27363e){const _0x4c9443=_0x482454;let _0x1a58d9=0x0;const _0x461b5f={};for(const _0x3cad54 of _0x27363e){if(_0x3cad54[_0x4c9443(0x445)](/(.*):[ ](\d+)/i)){const _0x4e6c18=String(RegExp['$1'])[_0x4c9443(0x910)](),_0x5c1bbe=Number(RegExp['$2']);_0x461b5f[_0x4e6c18]=_0x5c1bbe,_0x1a58d9+=_0x5c1bbe;}else{if(_0x3cad54[_0x4c9443(0x445)](/(.*):[ ](\d+\.?\d+)/i)){const _0x560796=String(RegExp['$1'])[_0x4c9443(0x910)](),_0x1d0b03=Number(RegExp['$2']);_0x461b5f[_0x560796]=_0x1d0b03,_0x1a58d9+=_0x1d0b03;}else _0x3cad54!==''&&(_0x461b5f[_0x3cad54]=0x1,_0x1a58d9++);}}if(_0x1a58d9<=0x0)return'';let _0x125679=Math[_0x4c9443(0x165)]()*_0x1a58d9;for(const _0x53454a in _0x461b5f){_0x125679-=_0x461b5f[_0x53454a];if(_0x125679<=0x0)return _0x53454a;}return'';},DataManager[_0x482454(0x46c)]=function(_0x51a6a7){const _0x33cab0=_0x482454;if(!_0x51a6a7)return![];if(!VisuMZ[_0x33cab0(0x16e)][_0x33cab0(0x4ae)][_0x33cab0(0x1ee)][_0x33cab0(0x7a9)])return![];if(_0x51a6a7['note'][_0x33cab0(0x445)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x51a6a7[_0x33cab0(0x305)][_0x33cab0(0x445)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x2d233c of _0x51a6a7[_0x33cab0(0x43d)]){if(!_0x2d233c)continue;if(_0x2d233c[_0x33cab0(0x29f)]===Game_Action[_0x33cab0(0x2d2)])return!![];}return![];},DataManager['createTroopNote']=function(_0x509a0d){const _0x18508c=_0x482454,_0x5619d6=$dataTroops[_0x509a0d];if(!_0x5619d6)return'';let _0x11e4b9='';_0x11e4b9+=_0x5619d6[_0x18508c(0x7cb)];for(const _0x11449a of _0x5619d6[_0x18508c(0x53b)]){for(const _0x47f485 of _0x11449a[_0x18508c(0x1fa)]){[0x6c,0x198][_0x18508c(0x4df)](_0x47f485[_0x18508c(0x29f)])&&(_0x11e4b9+='\x0a',_0x11e4b9+=_0x47f485['parameters'][0x0]);}}return _0x11e4b9;},ConfigManager[_0x482454(0x449)]=ConfigManager[_0x482454(0x449)]??![],ConfigManager[_0x482454(0x872)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager['visualHpGauge']=ConfigManager['visualHpGauge']??!![],VisuMZ[_0x482454(0x16e)]['ConfigManager_makeData']=ConfigManager['makeData'],ConfigManager[_0x482454(0x826)]=function(){const _0x38f21f=_0x482454,_0xcd840f=VisuMZ['BattleCore']['ConfigManager_makeData'][_0x38f21f(0x2b9)](this);return _0xcd840f[_0x38f21f(0x449)]=this[_0x38f21f(0x449)],_0xcd840f[_0x38f21f(0x872)]=this[_0x38f21f(0x872)],_0xcd840f[_0x38f21f(0x48a)]=this[_0x38f21f(0x48a)],_0xcd840f;},VisuMZ['BattleCore'][_0x482454(0x666)]=ConfigManager[_0x482454(0x546)],ConfigManager[_0x482454(0x546)]=function(_0x5443c1){const _0x4de396=_0x482454;VisuMZ['BattleCore'][_0x4de396(0x666)]['call'](this,_0x5443c1),_0x4de396(0x449)in _0x5443c1?this[_0x4de396(0x449)]=_0x5443c1[_0x4de396(0x449)]:this[_0x4de396(0x449)]=![],_0x4de396(0x872)in _0x5443c1?this[_0x4de396(0x872)]=_0x5443c1[_0x4de396(0x872)]:this[_0x4de396(0x872)]=![],_0x4de396(0x48a)in _0x5443c1?this[_0x4de396(0x48a)]=_0x5443c1[_0x4de396(0x48a)]:this[_0x4de396(0x48a)]=!![];},VisuMZ[_0x482454(0x16e)][_0x482454(0x293)]=BattleManager[_0x482454(0x4fa)],BattleManager[_0x482454(0x4fa)]=function(){const _0x1992ca=_0x482454;VisuMZ['BattleCore'][_0x1992ca(0x293)][_0x1992ca(0x2b9)](this),this['_forcedBattlers']=[];},BattleManager['refreshStatusWindow']=function(){const _0x1031e7=_0x482454;if(!SceneManager[_0x1031e7(0x1f8)]())return;const _0x4daec0=SceneManager['_scene'][_0x1031e7(0x63d)];if(_0x4daec0)_0x4daec0[_0x1031e7(0x118)]();},BattleManager[_0x482454(0x266)]=function(){const _0x160ab2=_0x482454;if(BattleManager[_0x160ab2(0x95b)]())return _0x160ab2(0x689);return _0x160ab2(0x62e);},BattleManager[_0x482454(0x5db)]=function(_0x202367){const _0x57e3e5=_0x482454;return _0x202367=_0x202367[_0x57e3e5(0x24b)]()['trim'](),this[_0x57e3e5(0x266)]()===_0x202367;},BattleManager[_0x482454(0x217)]=function(){return this['isBattleSys']('DTB');},BattleManager[_0x482454(0x2ee)]=function(){const _0x4af348=_0x482454;return this[_0x4af348(0x217)]();},BattleManager[_0x482454(0x13f)]=function(){const _0x45c3e4=_0x482454;return!this[_0x45c3e4(0x2ee)]();},BattleManager[_0x482454(0x2d0)]=function(){const _0x13376c=_0x482454;return!this[_0x13376c(0x2ee)]()&&!this[_0x13376c(0x13f)]();},BattleManager[_0x482454(0x38d)]=function(_0x8233b8){const _0x35ae60=_0x482454;$gameParty['processBattleCoreJS'](_0x8233b8),$gameTroop[_0x35ae60(0x38d)](_0x8233b8);},VisuMZ[_0x482454(0x16e)][_0x482454(0x381)]=BattleManager[_0x482454(0x87d)],BattleManager[_0x482454(0x87d)]=function(){const _0x346892=_0x482454;this['_endBattle']=![],this[_0x346892(0x163)]=ConfigManager[_0x346892(0x449)],this[_0x346892(0x38d)](_0x346892(0x2ab)),VisuMZ[_0x346892(0x16e)][_0x346892(0x381)][_0x346892(0x2b9)](this),this['processBattleCoreJS']('PostStartBattleJS');},BattleManager['processPostBattleCommonEvents']=function(_0x1df1e9){const _0x3056d8=_0x482454,_0x4cfb29=VisuMZ[_0x3056d8(0x16e)][_0x3056d8(0x4ae)][_0x3056d8(0x573)];_0x4cfb29[_0x3056d8(0x402)]&&VisuMZ[_0x3056d8(0x16e)][_0x3056d8(0x5a3)](_0x4cfb29[_0x3056d8(0x402)])&&$gameTemp[_0x3056d8(0x4e5)](_0x4cfb29[_0x3056d8(0x402)]);const _0x1b1594=_0x3056d8(0x41c)[_0x3056d8(0x355)](_0x1df1e9);_0x4cfb29[_0x1b1594]&&VisuMZ[_0x3056d8(0x16e)][_0x3056d8(0x5a3)](_0x4cfb29[_0x1b1594])&&$gameTemp[_0x3056d8(0x4e5)](_0x4cfb29[_0x1b1594]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x816)]=BattleManager['processVictory'],BattleManager[_0x482454(0x966)]=function(){const _0x1f4414=_0x482454;this[_0x1f4414(0x38d)](_0x1f4414(0x7c5)),VisuMZ['BattleCore'][_0x1f4414(0x816)][_0x1f4414(0x2b9)](this),this[_0x1f4414(0x639)]('Victory');},VisuMZ[_0x482454(0x16e)][_0x482454(0x473)]=BattleManager[_0x482454(0x85c)],BattleManager[_0x482454(0x85c)]=function(){const _0x4a973a=_0x482454;this[_0x4a973a(0x38d)]('BattleDefeatJS'),VisuMZ[_0x4a973a(0x16e)][_0x4a973a(0x473)][_0x4a973a(0x2b9)](this),this[_0x4a973a(0x639)](_0x4a973a(0x94d));},VisuMZ[_0x482454(0x16e)][_0x482454(0x1af)]=BattleManager[_0x482454(0x7a5)],BattleManager['endBattle']=function(_0x5d000a){const _0x53f142=_0x482454;this[_0x53f142(0x280)]=!![],this[_0x53f142(0x163)]=![],this['processBattleCoreJS']('PreEndBattleJS'),VisuMZ['BattleCore']['BattleManager_endBattle'][_0x53f142(0x2b9)](this,_0x5d000a),this[_0x53f142(0x38d)](_0x53f142(0x25d));},VisuMZ[_0x482454(0x16e)][_0x482454(0x2de)]=BattleManager[_0x482454(0x518)],BattleManager[_0x482454(0x518)]=function(){const _0x8d3b0e=_0x482454;if(this[_0x8d3b0e(0x2ee)]())this[_0x8d3b0e(0x38d)](_0x8d3b0e(0x4d2));VisuMZ[_0x8d3b0e(0x16e)][_0x8d3b0e(0x2de)]['call'](this);if(this[_0x8d3b0e(0x2ee)]())this[_0x8d3b0e(0x38d)]('PostStartTurnJS');},VisuMZ['BattleCore'][_0x482454(0x78b)]=BattleManager[_0x482454(0x560)],BattleManager['startAction']=function(){const _0x38acae=_0x482454,_0x5855fa=this[_0x38acae(0x57d)][_0x38acae(0x663)](),_0x534fab=this[_0x38acae(0x57d)];_0x5855fa&&_0x5855fa[_0x38acae(0x853)]()===_0x534fab&&_0x5855fa[_0x38acae(0x6c6)](_0x38acae(0x650)),VisuMZ[_0x38acae(0x16e)][_0x38acae(0x78b)][_0x38acae(0x2b9)](this),_0x5855fa&&_0x5855fa[_0x38acae(0x853)]()===_0x534fab&&_0x5855fa[_0x38acae(0x6c6)](_0x38acae(0x7bc));},VisuMZ[_0x482454(0x16e)][_0x482454(0x2b0)]=BattleManager[_0x482454(0x8bb)],BattleManager[_0x482454(0x8bb)]=function(){const _0x317fa4=_0x482454,_0x20a75c=this[_0x317fa4(0x815)],_0x3ddf8a=this[_0x317fa4(0x57d)];_0x20a75c&&_0x20a75c!==this[_0x317fa4(0x93b)]&&_0x20a75c[_0x317fa4(0x853)]()===_0x3ddf8a&&_0x20a75c['actionBattleCoreJS'](_0x317fa4(0x45a)),VisuMZ[_0x317fa4(0x16e)][_0x317fa4(0x2b0)][_0x317fa4(0x2b9)](this),_0x20a75c&&_0x20a75c!==this['_lastAction']&&_0x20a75c[_0x317fa4(0x853)]()===_0x3ddf8a&&_0x20a75c[_0x317fa4(0x6c6)]('PostEndActionJS'),this[_0x317fa4(0x417)](this[_0x317fa4(0x1ed)]()),this['_lastAction']=this[_0x317fa4(0x815)];},BattleManager[_0x482454(0x417)]=function(_0x274291){const _0x539fe4=_0x482454;for(const _0x326359 of _0x274291){if(!_0x326359)continue;if(!_0x326359[_0x539fe4(0x1f6)]())continue;_0x326359['battler']()[_0x539fe4(0x5c9)]();}},BattleManager[_0x482454(0x10f)]=function(){const _0x5baa1d=_0x482454;!this[_0x5baa1d(0x3bc)][_0x5baa1d(0x7aa)]()&&this['endAction']();},Game_Battler[_0x482454(0x61b)][_0x482454(0x367)]=function(){const _0x84d265=_0x482454;this[_0x84d265(0x4b3)]();if(Imported[_0x84d265(0x429)]){const _0x3de428=VisuMZ[_0x84d265(0x85b)][_0x84d265(0x4ae)]['States'];_0x3de428&&_0x3de428[_0x84d265(0x707)]===![]&&this[_0x84d265(0x735)](0x1);}else this[_0x84d265(0x735)](0x1);this[_0x84d265(0x31b)]();},BattleManager[_0x482454(0x1de)]=function(){const _0x1edf6d=_0x482454;this['_escapeRatio']=VisuMZ[_0x1edf6d(0x16e)][_0x1edf6d(0x4ae)][_0x1edf6d(0x573)][_0x1edf6d(0x237)][_0x1edf6d(0x2b9)](this);},VisuMZ[_0x482454(0x16e)]['BattleManager_onEscapeSuccess']=BattleManager[_0x482454(0x6d2)],BattleManager[_0x482454(0x6d2)]=function(){const _0x4c7ca7=_0x482454;this[_0x4c7ca7(0x38d)](_0x4c7ca7(0x7d0)),BattleManager[_0x4c7ca7(0x82e)][_0x4c7ca7(0x260)](),VisuMZ['BattleCore']['BattleManager_onEscapeSuccess'][_0x4c7ca7(0x2b9)](this),this[_0x4c7ca7(0x639)]('EscapeSuccess');},VisuMZ[_0x482454(0x16e)][_0x482454(0x6f3)]=BattleManager[_0x482454(0x152)],BattleManager['onEscapeFailure']=function(){const _0x45593c=_0x482454;this[_0x45593c(0x38d)](_0x45593c(0x4de));const _0x365740=this['_escapeRatio'];VisuMZ[_0x45593c(0x16e)][_0x45593c(0x6f3)][_0x45593c(0x2b9)](this),this[_0x45593c(0x918)]=_0x365740+VisuMZ[_0x45593c(0x16e)][_0x45593c(0x4ae)][_0x45593c(0x573)][_0x45593c(0x162)][_0x45593c(0x2b9)](this),this[_0x45593c(0x639)]('EscapeFail');},BattleManager[_0x482454(0x628)]=function(){const _0xfeb28f=_0x482454;let _0x5f01fa=![];if(this[_0xfeb28f(0x810)]())for(const _0x595be5 of $gameTroop['enemyNames']()){this[_0xfeb28f(0x3bc)]['push'](_0xfeb28f(0x908),TextManager[_0xfeb28f(0x70c)]['format'](_0x595be5)),this[_0xfeb28f(0x3bc)][_0xfeb28f(0x32d)](_0xfeb28f(0x223)),_0x5f01fa=!![];}if(this[_0xfeb28f(0x233)])this[_0xfeb28f(0x3bc)][_0xfeb28f(0x32d)](_0xfeb28f(0x908),TextManager[_0xfeb28f(0x4cf)][_0xfeb28f(0x355)]($gameParty[_0xfeb28f(0x7cb)]())),this[_0xfeb28f(0x3bc)][_0xfeb28f(0x32d)](_0xfeb28f(0x223));else this['_surprise']&&(this['_logWindow']['push'](_0xfeb28f(0x908),TextManager[_0xfeb28f(0x79c)]['format']($gameParty['name']())),this[_0xfeb28f(0x3bc)]['push'](_0xfeb28f(0x223)));_0x5f01fa&&(this[_0xfeb28f(0x3bc)][_0xfeb28f(0x32d)]('wait'),this['_logWindow'][_0xfeb28f(0x32d)](_0xfeb28f(0x4f7))),this['isTpb']()&&this[_0xfeb28f(0x4aa)]()&&(this['_tpbNeedsPartyCommand']=![]);},BattleManager[_0x482454(0x810)]=function(){const _0x52e128=_0x482454;if(BattleManager[_0x52e128(0x163)])return![];return VisuMZ[_0x52e128(0x16e)][_0x52e128(0x4ae)]['Enemy'][_0x52e128(0x606)];},VisuMZ[_0x482454(0x16e)][_0x482454(0x771)]=BattleManager['startInput'],BattleManager[_0x482454(0x1d0)]=function(){const _0x40a5e9=_0x482454;VisuMZ[_0x40a5e9(0x16e)][_0x40a5e9(0x771)][_0x40a5e9(0x2b9)](this),this['isDTB']()&&this[_0x40a5e9(0x4aa)]()&&!this[_0x40a5e9(0x21b)]&&$gameParty[_0x40a5e9(0x289)]()&&this[_0x40a5e9(0x219)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0xd88b08=_0x482454;return VisuMZ['BattleCore'][_0xd88b08(0x4ae)][_0xd88b08(0x8ee)][_0xd88b08(0x331)];},BattleManager[_0x482454(0x284)]=function(){const _0x4783e3=_0x482454;this[_0x4783e3(0x20f)]()&&this[_0x4783e3(0x219)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x8cf)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x498)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x498)]=function(){const _0x1fb83f=_0x482454;VisuMZ[_0x1fb83f(0x16e)][_0x1fb83f(0x8cf)]['call'](this),BattleManager[_0x1fb83f(0x95b)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x1fb83f(0x757)]=![],this['actorCommandCancelTPB']());},BattleManager[_0x482454(0x7a4)]=function(_0x191c08,_0x211b41){const _0x4ff2b7=_0x482454;this[_0x4ff2b7(0x815)]['_reflectionTarget']=_0x211b41,this[_0x4ff2b7(0x3bc)][_0x4ff2b7(0x4ee)](_0x211b41),this[_0x4ff2b7(0x3bc)][_0x4ff2b7(0x3f1)](_0x191c08,this[_0x4ff2b7(0x815)]),this['_action'][_0x4ff2b7(0x524)](_0x191c08),this[_0x4ff2b7(0x3bc)][_0x4ff2b7(0x698)](_0x191c08,_0x191c08);},VisuMZ[_0x482454(0x16e)][_0x482454(0xf3)]=BattleManager[_0x482454(0x540)],BattleManager[_0x482454(0x540)]=function(){const _0x46b6e8=_0x482454;VisuMZ[_0x46b6e8(0x16e)][_0x46b6e8(0xf3)][_0x46b6e8(0x2b9)](this),this['_actionBattlers']=this[_0x46b6e8(0x807)][_0x46b6e8(0x19d)](_0x1957bd=>_0x1957bd&&_0x1957bd['isAppeared']());},VisuMZ[_0x482454(0x16e)][_0x482454(0x11d)]=BattleManager[_0x482454(0x4d6)],BattleManager[_0x482454(0x4d6)]=function(_0x22b6ac){const _0x3ae261=_0x482454;if(this['_phase']===_0x3ae261(0x683))this[_0x3ae261(0x8fb)]();else this[_0x3ae261(0x14b)]===_0x3ae261(0x277)?this[_0x3ae261(0x92b)]():VisuMZ[_0x3ae261(0x16e)][_0x3ae261(0x11d)][_0x3ae261(0x2b9)](this,_0x22b6ac);},BattleManager['prepareCustomActionSequence']=function(){const _0xefdad2=_0x482454;this['_allTargets']=this[_0xefdad2(0x61e)]['slice'](0x0),this[_0xefdad2(0x1ef)]=0x0,this[_0xefdad2(0x2e8)]=this['_allTargets'][0x0]||null,this[_0xefdad2(0x14b)]='custom';},BattleManager[_0x482454(0x8fb)]=function(){const _0x3ff175=_0x482454;!this[_0x3ff175(0x309)]()&&!this[_0x3ff175(0x3bc)][_0x3ff175(0x7aa)]()&&(this[_0x3ff175(0x14b)]=_0x3ff175(0x578));},BattleManager[_0x482454(0x277)]=function(_0x2267ee){const _0x492378=_0x482454;this[_0x492378(0x807)][_0x492378(0x350)](_0x2267ee);if(_0x2267ee===this[_0x492378(0x57d)])return;const _0x32b497=JsonEx[_0x492378(0x627)](_0x2267ee['currentAction']());this['_forcedBattlers'][_0x492378(0x32d)]([_0x2267ee,_0x32b497]);},BattleManager[_0x482454(0x405)]=function(){},BattleManager['updateStart']=function(){const _0x536e50=_0x482454;if(this['isTpb']())this['_phase']=_0x536e50(0x519);else this[_0x536e50(0x120)][_0x536e50(0x403)]>0x0?this[_0x536e50(0x14b)]=_0x536e50(0x519):this[_0x536e50(0x1d0)]();},BattleManager[_0x482454(0x25e)]=function(){const _0x567049=_0x482454,_0x10c9c0=this[_0x567049(0x57d)];_0x10c9c0&&this['isTpb']()&&_0x10c9c0[_0x567049(0x50b)](_0x567049(0x386));for(;;){const _0x1c3d0a=this[_0x567049(0x50d)]();if(!_0x1c3d0a)return null;if(_0x1c3d0a['isBattleMember']()&&_0x1c3d0a['isAlive']())return _0x1c3d0a;}},BattleManager['getNextSubjectFromPool']=function(){const _0x287fa4=_0x482454;if(this[_0x287fa4(0x120)][_0x287fa4(0x403)]>0x0){const _0x222959=this[_0x287fa4(0x120)][_0x287fa4(0x17b)](),_0x1633d9=_0x222959[0x0];return _0x1633d9['_actions']=_0x1633d9[_0x287fa4(0x48d)]||[],_0x1633d9['_actions'][0x0]=_0x222959[0x1],_0x1633d9;}else return this['_actionBattlers']['shift']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x169)]=Game_Battler[_0x482454(0x61b)][_0x482454(0x277)],Game_Battler[_0x482454(0x61b)][_0x482454(0x277)]=function(_0x5c38b1,_0x25f1a8){const _0x234102=_0x482454;VisuMZ['BattleCore']['Game_Battler_forceAction'][_0x234102(0x2b9)](this,_0x5c38b1,_0x25f1a8),this[_0x234102(0x48d)][this[_0x234102(0x48d)]['length']-0x1][_0x234102(0x7d6)]=!![];},Game_Interpreter[_0x482454(0x61b)][_0x482454(0x2a8)]=function(_0x28e437){const _0x305e11=_0x482454;return this[_0x305e11(0x6f5)](_0x28e437[0x0],_0x28e437[0x1],_0x4bc4a3=>{const _0x10da31=_0x305e11;!_0x4bc4a3['isDeathStateAffected']()&&(_0x4bc4a3[_0x10da31(0x277)](_0x28e437[0x2],_0x28e437[0x3]),BattleManager[_0x10da31(0x277)](_0x4bc4a3));}),!![];},VisuMZ[_0x482454(0x16e)]['Game_Battler_makeSpeed']=Game_Battler['prototype']['makeSpeed'],Game_Battler[_0x482454(0x61b)]['makeSpeed']=function(){const _0x17bffd=_0x482454;VisuMZ[_0x17bffd(0x16e)][_0x17bffd(0x94a)][_0x17bffd(0x2b9)](this),this[_0x17bffd(0x48d)][_0x17bffd(0x403)]<=0x0&&(this[_0x17bffd(0x4fd)]=Number[_0x17bffd(0x779)]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x4ab)]=BattleManager[_0x482454(0x219)],BattleManager['selectNextCommand']=function(){const _0x4db33b=_0x482454;this['isTpb']()?this[_0x4db33b(0x462)]():VisuMZ['BattleCore'][_0x4db33b(0x4ab)][_0x4db33b(0x2b9)](this);},BattleManager[_0x482454(0x462)]=function(){const _0x18f0cf=_0x482454;if(this['_currentActor']){if(this[_0x18f0cf(0x7b5)][_0x18f0cf(0x219)]())return;this[_0x18f0cf(0x86a)](),this[_0x18f0cf(0x39a)](),!this[_0x18f0cf(0x57d)]&&!this[_0x18f0cf(0x7b5)]&&SceneManager[_0x18f0cf(0x938)]['updateBattleProcess']();}else!this[_0x18f0cf(0x57d)]&&this[_0x18f0cf(0x3ad)]();},BattleManager[_0x482454(0x39a)]=function(){const _0x4bb177=_0x482454;(!this[_0x4bb177(0x20f)]()||this['needsActorInputCancel']())&&(this[_0x4bb177(0x6a5)]&&(!$gameParty['battleMembers']()[_0x4bb177(0x4df)](this[_0x4bb177(0x6a5)])&&(this[_0x4bb177(0x6a5)]=null)),!this[_0x4bb177(0x6a5)]?(this['cancelActorInput'](),this[_0x4bb177(0x7b5)]=null,this[_0x4bb177(0x388)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x482454(0x7c3)]=function(){const _0x219ec4=_0x482454;!$gameParty[_0x219ec4(0x49d)]()[_0x219ec4(0x4df)](this[_0x219ec4(0x6a5)])&&(this[_0x219ec4(0x6a5)]=null),this[_0x219ec4(0x6a5)]?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this[_0x219ec4(0x7b5)]['_tpbState']='charged',this[_0x219ec4(0x388)]=!![],this[_0x219ec4(0x6a5)]=null):(this[_0x219ec4(0x407)](),this[_0x219ec4(0x7b5)]=null,this['_inputting']=![]);},VisuMZ['BattleCore']['BattleManager_isTpbMainPhase']=BattleManager['isTpbMainPhase'],BattleManager[_0x482454(0x705)]=function(){const _0x583275=_0x482454;return this[_0x583275(0x14b)]===_0x583275(0x683)?this[_0x583275(0x21e)]():VisuMZ[_0x583275(0x16e)][_0x583275(0x8ce)][_0x583275(0x2b9)](this);},BattleManager['battleCoreTpbMainPhase']=function(){const _0x20a83d=_0x482454;return this[_0x20a83d(0x690)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x135)]=BattleManager[_0x482454(0x407)],BattleManager[_0x482454(0x407)]=function(){const _0x56a008=_0x482454;this[_0x56a008(0x95b)]()&&this[_0x56a008(0x14b)]==='battleEnd'&&(this[_0x56a008(0x7b5)]=null),VisuMZ['BattleCore']['BattleManager_cancelActorInput'][_0x56a008(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x40e)]=BattleManager[_0x482454(0x548)],BattleManager[_0x482454(0x548)]=function(){const _0x403a44=_0x482454,_0x32c6c7=this['_currentActor'];if(_0x32c6c7&&!_0x32c6c7[_0x403a44(0x548)]()){const _0x238d35=_0x32c6c7['_actionInputIndex'];_0x32c6c7['_actions'][_0x238d35]=new Game_Action(_0x32c6c7);}return VisuMZ[_0x403a44(0x16e)][_0x403a44(0x40e)][_0x403a44(0x2b9)](this);},VisuMZ['BattleCore'][_0x482454(0x1cd)]=BattleManager[_0x482454(0x1b9)],BattleManager['checkSubstitute']=function(_0x53cdf0){const _0x162dcb=_0x482454;if(this[_0x162dcb(0x815)]['isForFriend']())return![];return VisuMZ['BattleCore'][_0x162dcb(0x1cd)][_0x162dcb(0x2b9)](this,_0x53cdf0);},SceneManager['isSceneBattle']=function(){const _0x4a736e=_0x482454;return this['_scene']&&this[_0x4a736e(0x938)][_0x4a736e(0x7cc)]===Scene_Battle;},SceneManager[_0x482454(0x2fe)]=function(){const _0x165045=_0x482454;return Spriteset_Battle[_0x165045(0x61b)][_0x165045(0x667)]();},SceneManager[_0x482454(0x617)]=function(){const _0x1fd2f3=_0x482454;if(SceneManager[_0x1fd2f3(0x249)](Scene_Options))return!![];return![];},SceneManager['isNextSceneBattleTransitionable']=function(){const _0x4909ce=_0x482454;if(SceneManager[_0x4909ce(0x703)](Scene_Options))return!![];return![];},SceneManager[_0x482454(0x67c)]=function(_0x350467){const _0xd5eef2=_0x482454;if(!SceneManager[_0xd5eef2(0x1f8)]())return!![];const _0x572c15=[_0xd5eef2(0x86c),_0xd5eef2(0x5da)];return _0x572c15['includes'](_0x350467[_0xd5eef2(0x7cb)]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x6e8)]=SceneManager['push'],SceneManager[_0x482454(0x32d)]=function(_0x3de04c){const _0x2ba8d7=_0x482454;if(!SceneManager[_0x2ba8d7(0x67c)](_0x3de04c))return this['displayBattleCoreTransitionErrorMsg'](_0x3de04c);VisuMZ[_0x2ba8d7(0x16e)][_0x2ba8d7(0x6e8)][_0x2ba8d7(0x2b9)](this,_0x3de04c);},SceneManager[_0x482454(0x819)]=function(_0xeb47a7){const _0x7ed6b6=_0x482454;if(!$gameTemp[_0x7ed6b6(0x145)]())return;if(this[_0x7ed6b6(0x897)])return;this[_0x7ed6b6(0x897)]=!![];let _0x5acfea='';_0x5acfea+=_0x7ed6b6(0x3fc),_0x5acfea+=_0x7ed6b6(0x338)[_0x7ed6b6(0x355)](_0xeb47a7[_0x7ed6b6(0x7cb)]),alert(_0x5acfea);},VisuMZ['BattleCore'][_0x482454(0x8b8)]=Game_Temp['prototype'][_0x482454(0x3b4)],Game_Temp[_0x482454(0x61b)][_0x482454(0x3b4)]=function(_0x28da97,_0x6a0e9c,_0x2833ae){const _0x435ef7=_0x482454;_0x28da97=_0x28da97['filter']((_0x18f28b,_0x2022b8,_0x12ab4e)=>_0x12ab4e[_0x435ef7(0x7ac)](_0x18f28b)===_0x2022b8),SceneManager[_0x435ef7(0x1f8)]()&&SceneManager[_0x435ef7(0x2fe)]()&&(_0x2833ae=!_0x2833ae),VisuMZ[_0x435ef7(0x16e)]['Game_Temp_requestAnimation']['call'](this,_0x28da97,_0x6a0e9c,_0x2833ae),SceneManager[_0x435ef7(0x1f8)]()&&BattleManager[_0x435ef7(0x82e)][_0x435ef7(0x842)]();},Game_Temp['prototype'][_0x482454(0x181)]=function(_0x39773b){const _0x2071b7=_0x482454;this[_0x2071b7(0x44f)]=_0x39773b;},Game_Temp['prototype'][_0x482454(0x2c6)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x482454(0x61b)]['clearForcedGameTroopSettingsBattleCore']=function(){const _0x124a62=_0x482454;this[_0x124a62(0x915)]=undefined;},Game_Temp['prototype'][_0x482454(0x774)]=function(_0x325ba3){const _0x557e9b=_0x482454;$gameMap&&$dataMap&&$dataMap['note']&&this[_0x557e9b(0x572)]($dataMap['note']);const _0x479566=$dataTroops[_0x325ba3];if(_0x479566){let _0x362f0a=DataManager['createTroopNote'](_0x479566['id']);this[_0x557e9b(0x572)](_0x362f0a);}},Game_Temp[_0x482454(0x61b)]['parseForcedGameTroopSettingsBattleCore']=function(_0x2cf11c){const _0x475054=_0x482454;if(!_0x2cf11c)return;if(_0x2cf11c[_0x475054(0x445)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x12ad8b=String(RegExp['$1']);if(_0x12ad8b[_0x475054(0x445)](/DEFAULT/i))this[_0x475054(0x915)]=_0x475054(0x609);else{if(_0x12ad8b[_0x475054(0x445)](/LIST/i))this[_0x475054(0x915)]='list';else{if(_0x12ad8b[_0x475054(0x445)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x12ad8b[_0x475054(0x445)](/PORTRAIT/i))this[_0x475054(0x915)]=_0x475054(0x17a);else{if(_0x12ad8b[_0x475054(0x445)](/BORDER/i))this[_0x475054(0x915)]=_0x475054(0x3a8);else _0x12ad8b[_0x475054(0x445)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x475054(0x13a)]?this['_forcedBattleLayout']=_0x475054(0x67e):this[_0x475054(0x915)]=_0x475054(0x609));}}}}}},VisuMZ[_0x482454(0x16e)][_0x482454(0x4c2)]=Game_System[_0x482454(0x61b)][_0x482454(0x63a)],Game_System[_0x482454(0x61b)][_0x482454(0x63a)]=function(){const _0x4b4865=_0x482454;VisuMZ['BattleCore'][_0x4b4865(0x4c2)][_0x4b4865(0x2b9)](this),this[_0x4b4865(0x5bf)]();},Game_System[_0x482454(0x61b)][_0x482454(0x5bf)]=function(){const _0x2b1110=_0x482454;this[_0x2b1110(0x329)]=this[_0x2b1110(0x329)]||[];},Game_System[_0x482454(0x61b)][_0x482454(0x1bf)]=function(){const _0x359b32=_0x482454;if(this[_0x359b32(0x329)]===undefined)this[_0x359b32(0x5bf)]();return this[_0x359b32(0x329)];},Game_System[_0x482454(0x61b)][_0x482454(0x3c3)]=function(_0x2ef3e7){const _0x3b1587=_0x482454;if(this['_defeatedEnemies']===undefined)this[_0x3b1587(0x5bf)]();if(!_0x2ef3e7)return;if(this[_0x3b1587(0x329)][_0x3b1587(0x4df)](_0x2ef3e7))return;this[_0x3b1587(0x329)]['push'](_0x2ef3e7),this['_defeatedEnemies'][_0x3b1587(0x73b)]((_0x45fa55,_0x4097ea)=>_0x45fa55-_0x4097ea);},VisuMZ[_0x482454(0x16e)][_0x482454(0x68a)]=Game_BattlerBase[_0x482454(0x61b)]['addNewState'],Game_BattlerBase['prototype'][_0x482454(0x360)]=function(_0x4cf29a){const _0x32d627=_0x482454,_0x17554f=this[_0x32d627(0x825)](),_0xd7b7f6=this[_0x32d627(0x427)]();VisuMZ[_0x32d627(0x16e)]['Game_BattlerBase_addNewState'][_0x32d627(0x2b9)](this,_0x4cf29a),this[_0x32d627(0x186)]()&&_0x17554f&&this['isDead']()&&(this['_visualHpGauge_JustDied']=!this['hasBeenDefeatedBefore'](),$gameSystem['registerDefeatedEnemy'](this[_0x32d627(0x140)]())),SceneManager[_0x32d627(0x1f8)]()&&_0xd7b7f6!==this[_0x32d627(0x427)]()&&(this[_0x32d627(0x1f6)]()&&this['battler']()[_0x32d627(0x5c9)]());},Game_Enemy[_0x482454(0x61b)][_0x482454(0x2c5)]=function(){const _0x466774=_0x482454;return $gameSystem[_0x466774(0x1bf)]()[_0x466774(0x4df)](this[_0x466774(0x490)]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x52e)]=Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x83c)],Game_BattlerBase['prototype'][_0x482454(0x83c)]=function(_0x5e851c){const _0x401eef=_0x482454;VisuMZ['BattleCore'][_0x401eef(0x52e)]['call'](this,_0x5e851c),this[_0x401eef(0x186)]()&&_0x5e851c===this[_0x401eef(0x25a)]()&&this[_0x401eef(0x825)]()&&(this[_0x401eef(0x90c)]=![]),!this[_0x401eef(0x55b)]&&!this['_tempBattler']&&SceneManager[_0x401eef(0x1f8)]()&&this[_0x401eef(0x2a0)]();},VisuMZ[_0x482454(0x16e)]['Game_Action_clear']=Game_Action['prototype']['clear'],Game_Action[_0x482454(0x61b)]['clear']=function(){const _0x5ee3f0=_0x482454;VisuMZ[_0x5ee3f0(0x16e)][_0x5ee3f0(0x121)][_0x5ee3f0(0x2b9)](this),this[_0x5ee3f0(0x946)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x5ee3f0(0x426)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x5ee3f0(0x619)]=_0x5ee3f0(0x609);},Game_Action[_0x482454(0x61b)]['makeDamageValue']=function(_0x19ddd2,_0x5798c0){const _0x2be1f2=_0x482454;return VisuMZ[_0x2be1f2(0x16e)][_0x2be1f2(0x4ae)][_0x2be1f2(0x448)][_0x2be1f2(0x270)][_0x2be1f2(0x2b9)](this,_0x19ddd2,_0x5798c0);},Game_Action[_0x482454(0x61b)][_0x482454(0x465)]=function(_0x2715f7,_0x54c1f3){const _0x5b3c07=_0x482454;return VisuMZ['BattleCore']['Settings']['Damage'][_0x5b3c07(0x59f)]['call'](this,_0x2715f7,_0x54c1f3);},Game_Action['prototype'][_0x482454(0x75f)]=function(_0x43171f,_0x6ac61a){const _0x48d6ab=_0x482454;return VisuMZ['BattleCore'][_0x48d6ab(0x4ae)]['Damage'][_0x48d6ab(0x2e0)][_0x48d6ab(0x2b9)](this,_0x43171f,_0x6ac61a);},VisuMZ[_0x482454(0x16e)][_0x482454(0x905)]=Game_Action[_0x482454(0x61b)][_0x482454(0x52f)],Game_Action['prototype'][_0x482454(0x52f)]=function(_0x14d43e){const _0x569cff=_0x482454,_0x59b346=this[_0x569cff(0x94e)]()[_0x569cff(0x305)];if(_0x59b346['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x59b346[_0x569cff(0x445)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x5474d5=VisuMZ['BattleCore'][_0x569cff(0x905)][_0x569cff(0x2b9)](this,_0x14d43e);return _0x5474d5=this[_0x569cff(0x426)][_0x569cff(0x310)]*_0x5474d5+this[_0x569cff(0x426)][_0x569cff(0x264)],_0x5474d5;}}},Game_Action[_0x482454(0x61b)][_0x482454(0x383)]=function(_0x5f5001){const _0x9a5120=_0x482454;if(!this[_0x9a5120(0x94e)]()[_0x9a5120(0x166)][_0x9a5120(0x12c)])return 0x0;let _0x1b6ed8=VisuMZ['BattleCore']['Settings']['Damage'][_0x9a5120(0x6a9)][_0x9a5120(0x2b9)](this,_0x5f5001);return _0x1b6ed8=this[_0x9a5120(0x426)][_0x9a5120(0x271)]*_0x1b6ed8+this['_multipliers'][_0x9a5120(0x7dc)],_0x1b6ed8;},Game_Action[_0x482454(0x61b)][_0x482454(0x7ce)]=function(_0x414a47){const _0xfa4ba7=_0x482454;return _0x414a47=VisuMZ[_0xfa4ba7(0x16e)]['Settings']['Damage']['CriticalHitMultiplier'][_0xfa4ba7(0x2b9)](this,_0x414a47),_0x414a47=this[_0xfa4ba7(0x426)]['criticalDmgRate']*_0x414a47+this['_multipliers']['criticalDmgFlat'],_0x414a47;},VisuMZ[_0x482454(0x16e)][_0x482454(0x899)]=Game_Action[_0x482454(0x61b)][_0x482454(0x503)],Game_Action['prototype'][_0x482454(0x503)]=function(_0x1960d2){const _0x57e0a2=_0x482454;if(this['_customDamageFormula']!==_0x57e0a2(0x609))return this[_0x57e0a2(0x5cb)](_0x1960d2);else return DataManager[_0x57e0a2(0x34d)](this[_0x57e0a2(0x94e)]())==='MANUAL'?VisuMZ[_0x57e0a2(0x16e)][_0x57e0a2(0x899)][_0x57e0a2(0x2b9)](this,_0x1960d2):this[_0x57e0a2(0x860)](_0x1960d2);},Game_Action[_0x482454(0x61b)][_0x482454(0x14c)]=function(_0x3afb0c){const _0x435ad7=_0x482454;this[_0x435ad7(0x619)]=_0x3afb0c;},Game_Action[_0x482454(0x61b)][_0x482454(0x5cb)]=function(_0x3dde88){const _0x3d55ec=_0x482454,_0x55bdc2=this[_0x3d55ec(0x94e)](),_0x5a000a=_0x55bdc2[_0x3d55ec(0x166)][_0x3d55ec(0x658)];_0x55bdc2['damage']['formula']=this[_0x3d55ec(0x619)];let _0x268e38=VisuMZ[_0x3d55ec(0x16e)][_0x3d55ec(0x899)]['call'](this,_0x3dde88);return _0x55bdc2[_0x3d55ec(0x166)][_0x3d55ec(0x658)]=_0x5a000a,_0x268e38;},Game_Action['prototype'][_0x482454(0x796)]=function(){const _0x594909=_0x482454;if(this['item']()[_0x594909(0x305)][_0x594909(0x445)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xd0cab0=String(RegExp['$1'])[_0x594909(0x24b)]()[_0x594909(0x910)]();return _0xd0cab0;}return _0x594909(0x89c);},Game_Action['prototype'][_0x482454(0x860)]=function(_0x11abba){const _0x59e8bc=_0x482454,_0x247387=DataManager['getDamageStyle'](this[_0x59e8bc(0x94e)]()),_0x25bf78=VisuMZ['DamageStyles'][_0x247387];try{return _0x25bf78[_0x59e8bc(0x437)]['call'](this,_0x11abba);}catch(_0x9523ec){if($gameTemp[_0x59e8bc(0x145)]())console[_0x59e8bc(0x38b)](_0x9523ec);return VisuMZ[_0x59e8bc(0x16e)]['Game_Action_evalDamageFormula']['call'](this);}},Game_Action[_0x482454(0x61b)][_0x482454(0x4f9)]=function(_0x1cd946,_0x4c11db){const _0xb7b62d=_0x482454;if(this[_0xb7b62d(0x4a2)]())return _0x4c11db;const _0xb8136e=this[_0xb7b62d(0x853)](),_0x261579=_0x1cd946;let _0x50d8f5=[],_0xe02b97=[];_0x50d8f5['push'](this[_0xb7b62d(0x946)][_0xb7b62d(0x753)],this[_0xb7b62d(0x946)][_0xb7b62d(0x2c7)]),_0xe02b97[_0xb7b62d(0x32d)](this['_armorPenetration']['arPenRate'],this[_0xb7b62d(0x946)][_0xb7b62d(0x27d)]);const _0x5b7d1b=this[_0xb7b62d(0x3f8)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3e3bd7=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0xf4735a=this[_0xb7b62d(0x3f8)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0xe8e9d2=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x50d8f5=_0x50d8f5['concat'](_0x261579[_0xb7b62d(0x6e1)]()[_0xb7b62d(0x597)](_0x22ba53=>_0x22ba53&&_0x22ba53[_0xb7b62d(0x305)][_0xb7b62d(0x445)](_0x5b7d1b)?Number(RegExp['$1']):0x0)),_0xe02b97=_0xe02b97[_0xb7b62d(0x515)](_0x261579[_0xb7b62d(0x6e1)]()[_0xb7b62d(0x597)](_0x2e3ed8=>_0x2e3ed8&&_0x2e3ed8['note'][_0xb7b62d(0x445)](_0x3e3bd7)?Number(RegExp['$1'])/0x64:0x0)),_0x50d8f5=_0x50d8f5[_0xb7b62d(0x515)](_0xb8136e[_0xb7b62d(0x6e1)]()[_0xb7b62d(0x597)](_0x37c508=>_0x37c508&&_0x37c508['note'][_0xb7b62d(0x445)](_0xf4735a)?Number(RegExp['$1']):0x0)),_0xe02b97=_0xe02b97[_0xb7b62d(0x515)](_0xb8136e[_0xb7b62d(0x6e1)]()[_0xb7b62d(0x597)](_0x1f7d9a=>_0x1f7d9a&&_0x1f7d9a[_0xb7b62d(0x305)][_0xb7b62d(0x445)](_0xe8e9d2)?Number(RegExp['$1'])/0x64:0x0)),this['item']()[_0xb7b62d(0x305)]['match'](_0xf4735a)&&_0x50d8f5[_0xb7b62d(0x32d)](Number(RegExp['$1'])),this[_0xb7b62d(0x94e)]()[_0xb7b62d(0x305)][_0xb7b62d(0x445)](_0xe8e9d2)&&_0xe02b97[_0xb7b62d(0x32d)](Number(RegExp['$1'])),_0x4c11db=_0x50d8f5[_0xb7b62d(0x39e)]((_0x4e6e1,_0x35e0b6)=>_0x4e6e1-_0x35e0b6,_0x4c11db),_0x4c11db>0x0&&(_0x4c11db=_0xe02b97['reduce']((_0x5e6363,_0x51e90c)=>_0x5e6363*(0x1-_0x51e90c),_0x4c11db)),_0x4c11db;},VisuMZ[_0x482454(0x16e)][_0x482454(0x348)]=Game_Action[_0x482454(0x61b)][_0x482454(0x452)],Game_Action[_0x482454(0x61b)][_0x482454(0x452)]=function(_0x4e6272,_0x15cf9e){const _0x4cab8f=_0x482454;_0x15cf9e=_0x15cf9e*this['_multipliers']['damageRate'],_0x15cf9e+=this[_0x4cab8f(0x426)][_0x4cab8f(0x37b)]*(_0x15cf9e>=0x0?0x1:-0x1),_0x15cf9e=this[_0x4cab8f(0x4bd)](_0x4cab8f(0x1f1),_0x4e6272,_0x15cf9e,![]),_0x15cf9e=this['applyDamageCaps'](_0x15cf9e),_0x15cf9e=Math[_0x4cab8f(0x5d9)](_0x15cf9e),this[_0x4cab8f(0x2a2)]=_0x15cf9e,this['_totalValue']=this['_totalValue']||0x0,this['_totalValue']+=_0x15cf9e,VisuMZ[_0x4cab8f(0x16e)][_0x4cab8f(0x348)][_0x4cab8f(0x2b9)](this,_0x4e6272,_0x15cf9e),this['applyBattleCoreJS'](_0x4cab8f(0x433),_0x4e6272,_0x15cf9e,!![]);},Game_Action['prototype'][_0x482454(0x8e8)]=function(_0x189b21){const _0x36d1d3=_0x482454;if(this[_0x36d1d3(0x3d1)]())return _0x189b21;return _0x189b21=this[_0x36d1d3(0x103)](_0x189b21),_0x189b21=this[_0x36d1d3(0x775)](_0x189b21),_0x189b21;},Game_Action['prototype'][_0x482454(0x3d1)]=function(){const _0x515b7d=_0x482454,_0x24316d=/<BYPASS DAMAGE CAP>/i;if(this[_0x515b7d(0x94e)]()[_0x515b7d(0x305)][_0x515b7d(0x445)](_0x24316d))return!![];if(this['subject']()['traitObjects']()[_0x515b7d(0x29d)](_0x1a75f4=>_0x1a75f4&&_0x1a75f4[_0x515b7d(0x305)][_0x515b7d(0x445)](_0x24316d)))return!![];return!VisuMZ['BattleCore'][_0x515b7d(0x4ae)]['Damage']['EnableDamageCap'];},Game_Action[_0x482454(0x61b)][_0x482454(0x103)]=function(_0x6d224f){const _0x335936=_0x482454;if(!VisuMZ[_0x335936(0x16e)][_0x335936(0x4ae)][_0x335936(0x448)][_0x335936(0x94b)])return _0x6d224f;const _0x135e39=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x335936(0x94e)]()[_0x335936(0x305)][_0x335936(0x445)](_0x135e39))return!![];if(this[_0x335936(0x853)]()['traitObjects']()[_0x335936(0x29d)](_0x3927a5=>_0x3927a5&&_0x3927a5[_0x335936(0x305)]['match'](_0x135e39)))return!![];const _0x5f4fbf=_0x6d224f<0x0?-0x1:0x1;_0x6d224f=Math[_0x335936(0x36b)](_0x6d224f);let _0x430162=this[_0x335936(0x853)]()[_0x335936(0x65a)]();this[_0x335936(0x94e)]()[_0x335936(0x305)][_0x335936(0x445)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x430162+=Number(RegExp['$1'])/0x64);_0x430162=_0x430162[_0x335936(0x464)](0.01,0x1);const _0x5a79fb=this[_0x335936(0x7ae)](),_0x1e5c38=_0x430162*_0x5a79fb;if(_0x6d224f>_0x1e5c38&&_0x5a79fb>_0x1e5c38){_0x6d224f-=_0x1e5c38;const _0x297322=VisuMZ['BattleCore'][_0x335936(0x4ae)][_0x335936(0x448)]['DefaultSoftScaler'],_0x293846=Math[_0x335936(0x1e3)](0x1-_0x6d224f/((_0x5a79fb-_0x1e5c38)*_0x297322+_0x6d224f),0.01);_0x6d224f*=_0x293846,_0x6d224f+=_0x1e5c38;}return _0x6d224f*_0x5f4fbf;},Game_Action[_0x482454(0x61b)][_0x482454(0x7ae)]=function(){const _0x6330da=_0x482454;return this[_0x6330da(0x94e)]()['note'][_0x6330da(0x445)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x6330da(0x853)]()[_0x6330da(0x827)]();},Game_Action[_0x482454(0x61b)][_0x482454(0x775)]=function(_0x54197b){const _0x21c137=_0x482454;let _0x2e4196=this['getHardDamageCap']();return _0x54197b[_0x21c137(0x464)](-_0x2e4196,_0x2e4196);},VisuMZ['BattleCore'][_0x482454(0x47b)]=Game_Action[_0x482454(0x61b)][_0x482454(0x524)],Game_Action[_0x482454(0x61b)][_0x482454(0x524)]=function(_0x3261e8){const _0x407367=_0x482454;this[_0x407367(0x4bd)]('PreApply%1JS',_0x3261e8,0x0,!![]),VisuMZ['BattleCore'][_0x407367(0x47b)][_0x407367(0x2b9)](this,_0x3261e8),this[_0x407367(0x4bd)](_0x407367(0x209),_0x3261e8,this[_0x407367(0x2a2)]||0x0,!![]),this[_0x407367(0x2e4)](_0x3261e8);},Game_Action[_0x482454(0x61b)][_0x482454(0x4bd)]=function(_0x2ea3a9,_0x911dec,_0x2502d9,_0x2ea46b){const _0xaf6dce=_0x482454;if(this[_0xaf6dce(0x53d)]||this['_tempActor'])return;_0x2502d9=_0x2502d9||0x0;const _0x42987a=_0x2502d9,_0x1a5653=VisuMZ['BattleCore'][_0xaf6dce(0x4ae)][_0xaf6dce(0x573)],_0x111990=_0x2ea3a9[_0xaf6dce(0x355)]('');if(_0x1a5653[_0x111990]){_0x2502d9=_0x1a5653[_0x111990]['call'](this,_0x2502d9,_0x911dec);if(_0x2ea46b)_0x2502d9=_0x42987a;}let _0x1d4ac7=VisuMZ['BattleCore'][_0xaf6dce(0x88d)](this[_0xaf6dce(0x94e)](),_0x2ea3a9[_0xaf6dce(0x355)](''));if(VisuMZ['BattleCore']['JS'][_0x1d4ac7]){_0x2502d9=VisuMZ[_0xaf6dce(0x16e)]['JS'][_0x1d4ac7]['call'](this,this[_0xaf6dce(0x853)](),_0x911dec,this[_0xaf6dce(0x94e)](),_0x2502d9);if(_0x2ea46b)_0x2502d9=_0x42987a;}for(const _0x439e3b of this['subject']()[_0xaf6dce(0x6e1)]()){if(!_0x439e3b)continue;_0x1d4ac7=VisuMZ[_0xaf6dce(0x16e)]['createKeyJS'](_0x439e3b,_0x2ea3a9[_0xaf6dce(0x355)](_0xaf6dce(0x3d2)));if(VisuMZ['BattleCore']['JS'][_0x1d4ac7]){_0x2502d9=VisuMZ[_0xaf6dce(0x16e)]['JS'][_0x1d4ac7][_0xaf6dce(0x2b9)](this,this['subject'](),_0x911dec,_0x439e3b,_0x2502d9);if(_0x2ea46b)_0x2502d9=_0x42987a;}}for(const _0x57dd0a of _0x911dec[_0xaf6dce(0x6e1)]()){if(!_0x57dd0a)continue;_0x1d4ac7=VisuMZ[_0xaf6dce(0x16e)]['createKeyJS'](_0x57dd0a,_0x2ea3a9[_0xaf6dce(0x355)](_0xaf6dce(0x1ac)));if(VisuMZ[_0xaf6dce(0x16e)]['JS'][_0x1d4ac7]){_0x2502d9=VisuMZ[_0xaf6dce(0x16e)]['JS'][_0x1d4ac7][_0xaf6dce(0x2b9)](this,this[_0xaf6dce(0x853)](),_0x911dec,_0x57dd0a,_0x2502d9);if(_0x2ea46b)_0x2502d9=_0x42987a;}}return _0x2502d9;},Game_Action[_0x482454(0x61b)][_0x482454(0x6c6)]=function(_0x3a40f){const _0x10a0fd=_0x482454,_0x37aea7=this[_0x10a0fd(0x73e)]||0x0,_0x4c115d=VisuMZ[_0x10a0fd(0x16e)][_0x10a0fd(0x4ae)][_0x10a0fd(0x573)],_0x15ed59=_0x3a40f[_0x10a0fd(0x355)]('');_0x4c115d[_0x15ed59]&&_0x4c115d[_0x15ed59][_0x10a0fd(0x2b9)](this,_0x37aea7);let _0x50b5da=VisuMZ['BattleCore'][_0x10a0fd(0x88d)](this[_0x10a0fd(0x94e)](),_0x3a40f);VisuMZ[_0x10a0fd(0x16e)]['JS'][_0x50b5da]&&VisuMZ['BattleCore']['JS'][_0x50b5da][_0x10a0fd(0x2b9)](this,this[_0x10a0fd(0x853)](),this[_0x10a0fd(0x853)](),this['item'](),_0x37aea7);for(const _0x5f75f4 of this['subject']()[_0x10a0fd(0x6e1)]()){if(!_0x5f75f4)continue;_0x50b5da=VisuMZ[_0x10a0fd(0x16e)][_0x10a0fd(0x88d)](_0x5f75f4,_0x3a40f),VisuMZ[_0x10a0fd(0x16e)]['JS'][_0x50b5da]&&VisuMZ['BattleCore']['JS'][_0x50b5da]['call'](this,this[_0x10a0fd(0x853)](),this['subject'](),_0x5f75f4,_0x37aea7);}},Game_Action[_0x482454(0x61b)]['speed']=function(){const _0x1331d1=_0x482454;return VisuMZ[_0x1331d1(0x16e)][_0x1331d1(0x4ae)][_0x1331d1(0x573)][_0x1331d1(0x472)][_0x1331d1(0x2b9)](this);},Game_Action['prototype']['allowRandomSpeed']=function(){const _0x3a54de=_0x482454;return VisuMZ['BattleCore'][_0x3a54de(0x4ae)][_0x3a54de(0x573)][_0x3a54de(0x58c)];},Game_Action[_0x482454(0x61b)][_0x482454(0x7fa)]=function(){const _0x2518ad=_0x482454;return this['item']()[_0x2518ad(0x305)][_0x2518ad(0x445)](/<JS TARGETS>/i);},Game_Action[_0x482454(0x61b)][_0x482454(0x340)]=function(){const _0x1235c2=_0x482454;if(!this['_forcing']&&this[_0x1235c2(0x853)]()[_0x1235c2(0x301)]())return![];if(this['isCustomBattleScope']())return!![];return typeof this[_0x1235c2(0x94e)]()[_0x1235c2(0x65f)]===_0x1235c2(0x586);},VisuMZ['BattleCore'][_0x482454(0x12d)]=Game_Action['prototype'][_0x482454(0x797)],Game_Action[_0x482454(0x61b)][_0x482454(0x797)]=function(){const _0x59f487=_0x482454;return this['isBattleCoreTargetScope']()&&!this[_0x59f487(0x7fa)]()?this[_0x59f487(0x151)]():VisuMZ['BattleCore']['Game_Action_isForOpponent'][_0x59f487(0x2b9)](this);},Game_Action['prototype'][_0x482454(0x151)]=function(){const _0x1a68dc=_0x482454,_0x5f1e02=this[_0x1a68dc(0x94e)]()['scope'];return _0x5f1e02[_0x1a68dc(0x445)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x482454(0x2a7)]=Game_Action['prototype'][_0x482454(0x6d4)],Game_Action[_0x482454(0x61b)][_0x482454(0x6d4)]=function(){const _0x428c0e=_0x482454;return this[_0x428c0e(0x340)]()&&!this[_0x428c0e(0x7fa)]()?this[_0x428c0e(0x610)]():VisuMZ['BattleCore'][_0x428c0e(0x2a7)][_0x428c0e(0x2b9)](this);},Game_Action['prototype'][_0x482454(0x610)]=function(){const _0x5e3bdf=_0x482454,_0x298a28=this[_0x5e3bdf(0x94e)]()[_0x5e3bdf(0x65f)];return _0x298a28[_0x5e3bdf(0x445)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x482454(0x16e)][_0x482454(0x76b)]=Game_Action[_0x482454(0x61b)][_0x482454(0x5bd)],Game_Action[_0x482454(0x61b)][_0x482454(0x5bd)]=function(){const _0x37ad52=_0x482454;return this[_0x37ad52(0x340)]()&&!this['isCustomBattleScope']()?this[_0x37ad52(0x68f)]():VisuMZ[_0x37ad52(0x16e)]['Game_Action_isForRandom'][_0x37ad52(0x2b9)](this);},Game_Action[_0x482454(0x61b)][_0x482454(0x68f)]=function(){const _0x5086f7=_0x482454,_0xad2dbf=this[_0x5086f7(0x94e)]()[_0x5086f7(0x65f)];return _0xad2dbf[_0x5086f7(0x445)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore'][_0x482454(0x2b3)]=Game_Action[_0x482454(0x61b)]['needsSelection'],Game_Action[_0x482454(0x61b)][_0x482454(0x195)]=function(){const _0x55bb67=_0x482454;return this[_0x55bb67(0x340)]()&&!this['isCustomBattleScope']()?this[_0x55bb67(0x6b9)]():VisuMZ[_0x55bb67(0x16e)][_0x55bb67(0x2b3)]['call'](this);},Game_Action['prototype']['needsSelectionBattleCore']=function(){const _0x5c1f54=_0x482454,_0x1e119d=this['item']()[_0x5c1f54(0x65f)];if(_0x1e119d[_0x5c1f54(0x445)](/RANDOM/i))return![];if(_0x1e119d[_0x5c1f54(0x445)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x1e119d['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0x5c1f54(0x16e)][_0x5c1f54(0x2b3)]['call'](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x1dc)]=Game_Action[_0x482454(0x61b)]['makeTargets'],Game_Action['prototype'][_0x482454(0x687)]=function(){const _0x214a77=_0x482454;let _0x396b8e=[];return this['isBattleCoreTargetScope']()?_0x396b8e=this[_0x214a77(0x676)]():_0x396b8e=VisuMZ[_0x214a77(0x16e)][_0x214a77(0x1dc)]['call'](this),_0x396b8e=this[_0x214a77(0x4f6)](_0x396b8e),_0x396b8e;},Game_Action['prototype']['makeTargetsBattleCore']=function(){const _0x57b290=_0x482454;let _0x15f699=[];const _0x359a4f=String(this[_0x57b290(0x94e)]()[_0x57b290(0x65f)]),_0x5768db=VisuMZ[_0x57b290(0x16e)][_0x57b290(0x88d)](this[_0x57b290(0x94e)](),_0x57b290(0x71a));if(VisuMZ[_0x57b290(0x16e)]['JS'][_0x5768db]){_0x15f699=VisuMZ[_0x57b290(0x16e)]['Game_Action_makeTargets'][_0x57b290(0x2b9)](this);const _0xfdc601=VisuMZ[_0x57b290(0x16e)][_0x57b290(0x88d)](this[_0x57b290(0x94e)](),_0x57b290(0x71a));return _0x15f699=VisuMZ['BattleCore']['JS'][_0xfdc601][_0x57b290(0x2b9)](this,this['subject'](),_0x15f699),this[_0x57b290(0x508)](_0x15f699);}if(_0x359a4f[_0x57b290(0x445)](/(\d+) RANDOM ANY/i)){let _0x3c6605=Number(RegExp['$1']);while(_0x3c6605--){const _0x36da96=Math[_0x57b290(0x5d0)](0x2)===0x0?this[_0x57b290(0xfd)]():this[_0x57b290(0x732)]();_0x15f699['push'](_0x36da96[_0x57b290(0x949)]());}return this[_0x57b290(0x508)](_0x15f699);}if(_0x359a4f[_0x57b290(0x445)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x5a3304=Number(RegExp['$1']);while(_0x5a3304--){_0x15f699[_0x57b290(0x32d)](this[_0x57b290(0xfd)]()[_0x57b290(0x949)]());}return this[_0x57b290(0x508)](_0x15f699);}if(_0x359a4f[_0x57b290(0x445)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x410ecb=Number(RegExp['$1']);while(_0x410ecb--){_0x15f699['push'](this['friendsUnit']()[_0x57b290(0x949)]());}return this[_0x57b290(0x508)](_0x15f699);}if(_0x359a4f['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x15f699[_0x57b290(0x32d)](...this['friendsUnit']()[_0x57b290(0x7e3)]()[_0x57b290(0x19d)](_0x437de2=>_0x437de2!==this[_0x57b290(0x853)]())),this['repeatTargets'](_0x15f699);return VisuMZ[_0x57b290(0x16e)]['Game_Action_makeTargets']['call'](this);},Game_Action[_0x482454(0x61b)][_0x482454(0x4ed)]=function(_0x16918e){const _0xdd5631=_0x482454,_0x20060d=[];for(let _0x3af150=0x0;_0x3af150<this[_0xdd5631(0x630)]();_0x3af150++){_0x20060d['push'](_0x16918e['trueRandomTarget']());}return _0x20060d;},Game_Action[_0x482454(0x61b)][_0x482454(0x4f6)]=function(_0x5aeb0c){const _0x468979=_0x482454;if(!this[_0x468979(0x94e)]())return _0x5aeb0c;const _0x56d853=this[_0x468979(0x94e)]()['note'];return _0x56d853['match'](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x5aeb0c[_0x468979(0x350)](this['subject']()),_0x5aeb0c;},VisuMZ[_0x482454(0x16e)][_0x482454(0x2a9)]=Game_Action[_0x482454(0x61b)]['itemEffectAddAttackState'],Game_Action[_0x482454(0x61b)]['itemEffectAddAttackState']=function(_0x8a1ff4,_0x4a363d){const _0x168e75=_0x482454;VisuMZ[_0x168e75(0x16e)][_0x168e75(0x2a9)][_0x168e75(0x2b9)](this,_0x8a1ff4,_0x4a363d);if(!_0x8a1ff4['isImmortal']())return;for(const _0x26e162 of this[_0x168e75(0x853)]()[_0x168e75(0x171)]()){if(_0x26e162===_0x8a1ff4[_0x168e75(0x25a)]()){let _0x138f3f=_0x4a363d[_0x168e75(0x523)];_0x138f3f*=_0x8a1ff4[_0x168e75(0x179)](_0x26e162),_0x138f3f*=this['subject']()[_0x168e75(0x7b4)](_0x26e162),_0x138f3f*=this[_0x168e75(0x8a1)](_0x8a1ff4),Math[_0x168e75(0x165)]()<_0x138f3f&&(_0x8a1ff4[_0x168e75(0x316)]=!![],this[_0x168e75(0x50a)](_0x8a1ff4));}}},VisuMZ[_0x482454(0x16e)]['Game_Action_itemEffectAddNormalState']=Game_Action[_0x482454(0x61b)]['itemEffectAddNormalState'],Game_Action[_0x482454(0x61b)][_0x482454(0x1c8)]=function(_0x16af6f,_0x36534a){const _0x6e5964=_0x482454;VisuMZ[_0x6e5964(0x16e)][_0x6e5964(0x2ed)][_0x6e5964(0x2b9)](this,_0x16af6f,_0x36534a);if(!_0x16af6f[_0x6e5964(0x337)]())return;if(_0x36534a['dataId']!==_0x16af6f[_0x6e5964(0x25a)]())return;let _0x339966=_0x36534a[_0x6e5964(0x523)];!this[_0x6e5964(0x4a2)]()&&(_0x339966*=_0x16af6f[_0x6e5964(0x179)](_0x36534a[_0x6e5964(0x543)]),_0x339966*=this[_0x6e5964(0x8a1)](_0x16af6f)),Math[_0x6e5964(0x165)]()<_0x339966&&(_0x16af6f[_0x6e5964(0x316)]=!![],this[_0x6e5964(0x50a)](_0x16af6f));},VisuMZ[_0x482454(0x16e)]['Game_Action_applyGlobal']=Game_Action[_0x482454(0x61b)][_0x482454(0x13e)],Game_Action[_0x482454(0x61b)][_0x482454(0x13e)]=function(){const _0x531a77=_0x482454;VisuMZ[_0x531a77(0x16e)][_0x531a77(0x1b7)][_0x531a77(0x2b9)](this),this['applyGlobalCommonEventNotetags'](),this[_0x531a77(0x6b0)]();},Game_Action[_0x482454(0x61b)][_0x482454(0x6ba)]=function(){const _0xb206f3=_0x482454;if(!SceneManager[_0xb206f3(0x1f8)]())return;const _0x155838=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x42dc57=this['item']()['note']['match'](_0x155838);if(_0x42dc57)for(const _0x17b5c5 of _0x42dc57){if(!_0x17b5c5)continue;_0x17b5c5[_0xb206f3(0x445)](_0x155838);const _0x357a24=String(RegExp['$1'])['split'](',')[_0xb206f3(0x597)](_0x23651d=>String(_0x23651d)['trim']()),_0x3a00d5=_0x357a24[_0xb206f3(0x597)](_0x1b5d4d=>DataManager[_0xb206f3(0x1d7)](_0x1b5d4d));for(const _0x180848 of _0x3a00d5){const _0x468cb9=$dataCommonEvents[_0x180848];_0x468cb9&&$gameTemp['reserveCommonEvent'](_0x180848);}}},DataManager[_0x482454(0x1d7)]=function(_0x1f8c5b){const _0x507b84=_0x482454;_0x1f8c5b=_0x1f8c5b[_0x507b84(0x24b)]()[_0x507b84(0x910)](),this[_0x507b84(0x2e9)]=this[_0x507b84(0x2e9)]||{};if(this['_commonEventIDs'][_0x1f8c5b])return this[_0x507b84(0x2e9)][_0x1f8c5b];for(const _0x1b8eda of $dataCommonEvents){if(!_0x1b8eda)continue;let _0x244ae5=_0x1b8eda[_0x507b84(0x7cb)];_0x244ae5=_0x244ae5['replace'](/\x1I\[(\d+)\]/gi,''),_0x244ae5=_0x244ae5[_0x507b84(0x563)](/\\I\[(\d+)\]/gi,''),this[_0x507b84(0x2e9)][_0x244ae5[_0x507b84(0x24b)]()['trim']()]=_0x1b8eda['id'];}return this['_commonEventIDs'][_0x1f8c5b]||0x0;},Game_Action[_0x482454(0x61b)][_0x482454(0x6b0)]=function(){const _0x2bc3bb=_0x482454;if(!SceneManager[_0x2bc3bb(0x1f8)]())return;const _0x5da99d=VisuMZ['BattleCore']['Settings'][_0x2bc3bb(0x573)];_0x5da99d[_0x2bc3bb(0x2fd)]&&$gameSwitches['setValue'](_0x5da99d[_0x2bc3bb(0x2fd)],![]),_0x5da99d[_0x2bc3bb(0x14a)]&&$gameSwitches[_0x2bc3bb(0x443)](_0x5da99d[_0x2bc3bb(0x14a)],![]),_0x5da99d[_0x2bc3bb(0x92d)]&&$gameVariables['setValue'](_0x5da99d[_0x2bc3bb(0x92d)],0x0),_0x5da99d[_0x2bc3bb(0x63b)]&&$gameVariables[_0x2bc3bb(0x443)](_0x5da99d[_0x2bc3bb(0x63b)],0x0);},Game_Action[_0x482454(0x61b)]['applyResultSwitches']=function(_0x1fbd47){const _0x32cde3=_0x482454;if(!SceneManager[_0x32cde3(0x1f8)]())return;if(!_0x1fbd47)return;const _0x46b557=_0x1fbd47['result'](),_0x52396a=VisuMZ[_0x32cde3(0x16e)][_0x32cde3(0x4ae)]['Mechanics'];_0x52396a['SwitchCritical']&&_0x46b557[_0x32cde3(0x12c)]&&$gameSwitches[_0x32cde3(0x443)](_0x52396a['SwitchCritical'],!![]);_0x52396a['SwitchMissEvade']&&(_0x46b557[_0x32cde3(0x821)]||_0x46b557[_0x32cde3(0x92e)])&&$gameSwitches[_0x32cde3(0x443)](_0x52396a[_0x32cde3(0x14a)],!![]);if(_0x52396a['VariableDmg']){let _0x4840cc=$gameVariables[_0x32cde3(0x5b0)](_0x52396a[_0x32cde3(0x92d)]);_0x46b557[_0x32cde3(0x327)]>0x0&&(_0x4840cc+=Math[_0x32cde3(0x36b)](_0x46b557[_0x32cde3(0x327)])),$gameVariables[_0x32cde3(0x443)](_0x52396a['VariableDmg'],_0x4840cc);}if(_0x52396a[_0x32cde3(0x63b)]){let _0x234cd4=$gameVariables[_0x32cde3(0x5b0)](_0x52396a[_0x32cde3(0x63b)]);_0x46b557[_0x32cde3(0x327)]<0x0&&(_0x234cd4+=Math[_0x32cde3(0x36b)](_0x46b557[_0x32cde3(0x327)])),$gameVariables[_0x32cde3(0x443)](_0x52396a[_0x32cde3(0x63b)],_0x234cd4);}},VisuMZ[_0x482454(0x16e)][_0x482454(0x685)]=Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x4fa)],Game_BattlerBase[_0x482454(0x61b)]['initMembers']=function(){const _0x267bf6=_0x482454;VisuMZ[_0x267bf6(0x16e)][_0x267bf6(0x685)][_0x267bf6(0x2b9)](this),this[_0x267bf6(0x259)]();},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x259)]=function(){const _0x26afb1=_0x482454;this[_0x26afb1(0x28c)]=![];},VisuMZ['BattleCore'][_0x482454(0x5d8)]=Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x477)],Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x477)]=function(){const _0x307371=_0x482454;this['_cache']={},VisuMZ[_0x307371(0x16e)]['Game_BattlerBase_refresh']['call'](this);},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x200)]=function(_0x3dd323){const _0x1f3675=_0x482454;return this[_0x1f3675(0x36d)]=this[_0x1f3675(0x36d)]||{},this[_0x1f3675(0x36d)][_0x3dd323]!==undefined;},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x827)]=function(){const _0x383086=_0x482454;if(this['_cache']['hardDamageCap']!==undefined)return this[_0x383086(0x36d)]['hardDamageCap'];const _0x2ffe20=/<DAMAGE CAP:[ ](\d+)>/i,_0x45ae39=this[_0x383086(0x6e1)]()[_0x383086(0x597)](_0x3b010a=>_0x3b010a&&_0x3b010a['note'][_0x383086(0x445)](_0x2ffe20)?Number(RegExp['$1']):0x0);let _0x1aea2e=_0x45ae39[_0x383086(0x403)]>0x0?Math[_0x383086(0x1e3)](..._0x45ae39):0x0;if(_0x1aea2e<=0x0)_0x1aea2e=VisuMZ['BattleCore'][_0x383086(0x4ae)][_0x383086(0x448)]['DefaultHardCap'];return this[_0x383086(0x36d)][_0x383086(0x827)]=_0x1aea2e,this['_cache'][_0x383086(0x827)];},Game_BattlerBase[_0x482454(0x61b)]['softDamageCapRate']=function(){const _0x1b7d5f=_0x482454;if(this['_cache'][_0x1b7d5f(0x6c7)]!==undefined)return this[_0x1b7d5f(0x36d)]['softDamageCap'];let _0x268c76=VisuMZ[_0x1b7d5f(0x16e)]['Settings']['Damage']['DefaultSoftCap'];const _0x1e65f7=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x11a1b5=this[_0x1b7d5f(0x6e1)]()[_0x1b7d5f(0x597)](_0x1875bb=>_0x1875bb&&_0x1875bb['note'][_0x1b7d5f(0x445)](_0x1e65f7)?Number(RegExp['$1'])/0x64:0x0);return _0x268c76=_0x11a1b5[_0x1b7d5f(0x39e)]((_0x3d3b8d,_0x1b98d6)=>_0x3d3b8d+_0x1b98d6,_0x268c76),this[_0x1b7d5f(0x36d)][_0x1b7d5f(0x6c7)]=_0x268c76,this[_0x1b7d5f(0x36d)][_0x1b7d5f(0x6c7)][_0x1b7d5f(0x464)](0.01,0x1);},VisuMZ['BattleCore']['Game_BattlerBase_die']=Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x50f)],Game_BattlerBase[_0x482454(0x61b)]['die']=function(){const _0x5dde62=_0x482454;VisuMZ['BattleCore']['Game_BattlerBase_die']['call'](this),SceneManager[_0x5dde62(0x1f8)]()&&this[_0x5dde62(0x6ca)]('dead');},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x1f6)]=function(){const _0xde3ac7=_0x482454;if(!SceneManager['isSceneBattle']())return null;if(!SceneManager[_0xde3ac7(0x938)][_0xde3ac7(0x82e)])return null;return SceneManager[_0xde3ac7(0x938)][_0xde3ac7(0x82e)][_0xde3ac7(0x393)](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x4c2afb=_0x482454;return VisuMZ[_0x4c2afb(0x16e)]['Settings'][_0x4c2afb(0x2ef)][_0x4c2afb(0x539)];},Game_BattlerBase[_0x482454(0x61b)]['svBattlerAnchorY']=function(){const _0x1426be=_0x482454;return VisuMZ['BattleCore'][_0x1426be(0x4ae)][_0x1426be(0x2ef)]['AnchorY'];},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x652)]=function(){const _0x2b9e2c=_0x482454;return this['isActor']&&this[_0x2b9e2c(0x761)]()?VisuMZ[_0x2b9e2c(0x16e)]['Settings'][_0x2b9e2c(0x2ef)][_0x2b9e2c(0x379)]:VisuMZ[_0x2b9e2c(0x16e)][_0x2b9e2c(0x4ae)][_0x2b9e2c(0x8c8)][_0x2b9e2c(0x379)];},Game_BattlerBase[_0x482454(0x61b)]['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x695)]=function(){return 0x0;},Game_BattlerBase[_0x482454(0x61b)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x482454(0x279)]=function(_0x222140){const _0x3eaa70=_0x482454;if(!_0x222140)return 0x0;let _0x20707d=0x0;const _0x5894b9=_0x222140[_0x3eaa70(0x305)];return _0x5894b9[_0x3eaa70(0x445)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x20707d+=Number(RegExp['$1'])),_0x5894b9[_0x3eaa70(0x445)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x20707d+=Number(RegExp['$1'])),_0x20707d;},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x4c3)]=function(_0x1a2fab){const _0x10647e=_0x482454;if(!_0x1a2fab)return 0x0;let _0x2848bc=0x0;const _0x19dcb1=_0x1a2fab[_0x10647e(0x305)];return _0x19dcb1[_0x10647e(0x445)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x2848bc+=Number(RegExp['$1'])),_0x19dcb1[_0x10647e(0x445)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x2848bc+=Number(RegExp['$2'])),_0x2848bc;},VisuMZ[_0x482454(0x16e)][_0x482454(0x77e)]=Game_BattlerBase['prototype'][_0x482454(0x345)],Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x345)]=function(_0x29a2d1){const _0x5eb15d=_0x482454;if(_0x29a2d1===this[_0x5eb15d(0x25a)]()&&this[_0x5eb15d(0x337)]())return!![];return VisuMZ[_0x5eb15d(0x16e)][_0x5eb15d(0x77e)][_0x5eb15d(0x2b9)](this,_0x29a2d1);},Game_BattlerBase['prototype']['isImmortal']=function(){const _0x5e47ff=_0x482454;return this[_0x5e47ff(0x28c)];},Game_BattlerBase[_0x482454(0x61b)]['setImmortal']=function(_0x3a7671){const _0x3b3427=_0x482454;_0x3a7671?this['addImmortal']():this[_0x3b3427(0x702)]();},Game_BattlerBase['prototype']['addImmortal']=function(){const _0x53fc9e=_0x482454;if(this['isDead']())return;this[_0x53fc9e(0x28c)]=!![],this[_0x53fc9e(0x316)]=![];},Game_BattlerBase[_0x482454(0x61b)]['removeImmortal']=function(){const _0x5626b8=_0x482454,_0x3e5ffd=this[_0x5626b8(0x825)]();this[_0x5626b8(0x28c)]=![],_0x3e5ffd&&this[_0x5626b8(0x316)]&&this['die'](),this[_0x5626b8(0x316)]=![],this[_0x5626b8(0x477)](),this[_0x5626b8(0x7a7)]()&&_0x3e5ffd&&(this['performCollapse'](),this[_0x5626b8(0x2a0)]());},VisuMZ[_0x482454(0x16e)][_0x482454(0x769)]=Game_Action['prototype']['numRepeats'],Game_Action[_0x482454(0x61b)]['numRepeats']=function(){const _0x2a32fd=_0x482454;return this['item']()?VisuMZ[_0x2a32fd(0x16e)]['Game_Action_numRepeats']['call'](this):0x0;},VisuMZ[_0x482454(0x16e)][_0x482454(0x170)]=Game_Action[_0x482454(0x61b)]['setAttack'],Game_Action['prototype']['setAttack']=function(){const _0x2170ad=_0x482454;this[_0x2170ad(0x853)]()&&this[_0x2170ad(0x853)]()[_0x2170ad(0x32a)]()?VisuMZ[_0x2170ad(0x16e)]['Game_Action_setAttack'][_0x2170ad(0x2b9)](this):this[_0x2170ad(0x4f7)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x363)]=Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x32a)],Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x32a)]=function(){const _0x636983=_0x482454;if(!this[_0x636983(0x1a8)]())return![];return VisuMZ[_0x636983(0x16e)][_0x636983(0x363)]['call'](this);},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x1a8)]=function(){const _0x271966=_0x482454;for(const _0x2161fb of this[_0x271966(0x6e1)]()){if(!_0x2161fb)continue;if(_0x2161fb[_0x271966(0x305)][_0x271966(0x445)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x482454(0x647)]=Game_Action['prototype'][_0x482454(0x60c)],Game_Action['prototype']['setGuard']=function(){const _0x238c4b=_0x482454;this[_0x238c4b(0x853)]()[_0x238c4b(0x1b1)]()&&VisuMZ[_0x238c4b(0x16e)]['Game_Action_setGuard']['call'](this);},VisuMZ['BattleCore']['Game_BattlerBase_canGuard']=Game_BattlerBase['prototype'][_0x482454(0x1b1)],Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x1b1)]=function(){const _0x3a3e74=_0x482454;if(!this[_0x3a3e74(0x57f)]())return![];return VisuMZ[_0x3a3e74(0x16e)][_0x3a3e74(0x341)][_0x3a3e74(0x2b9)](this);},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x57f)]=function(){const _0x17dd5d=_0x482454;for(const _0x53d6a1 of this[_0x17dd5d(0x6e1)]()){if(!_0x53d6a1)continue;if(_0x53d6a1['note'][_0x17dd5d(0x445)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x6af)]=function(){const _0x2b93a1=_0x482454;for(const _0x2e326e of this[_0x2b93a1(0x6e1)]()){if(!_0x2e326e)continue;if(_0x2e326e[_0x2b93a1(0x305)][_0x2b93a1(0x445)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler[_0x482454(0x61b)]['allowRandomSpeed']=function(){const _0x14a491=_0x482454;return VisuMZ[_0x14a491(0x16e)][_0x14a491(0x4ae)]['Mechanics']['AllowRandomSpeed'];},VisuMZ[_0x482454(0x16e)][_0x482454(0x41e)]=Game_Battler[_0x482454(0x61b)][_0x482454(0x274)],Game_Battler[_0x482454(0x61b)]['regenerateAll']=function(){const _0x13a0dd=_0x482454;if(SceneManager[_0x13a0dd(0x1f8)]()&&$gameTroop['turnCount']()<=0x0)return;if(SceneManager['isSceneBattle']()&&BattleManager[_0x13a0dd(0x95b)]()&&this['_lastRegenFrameCount']===Graphics['frameCount'])return;this[_0x13a0dd(0x711)]=Graphics[_0x13a0dd(0x1c6)],SceneManager[_0x13a0dd(0x1f8)]()&&this[_0x13a0dd(0x38d)](_0x13a0dd(0x709)),VisuMZ[_0x13a0dd(0x16e)][_0x13a0dd(0x41e)]['call'](this),SceneManager[_0x13a0dd(0x1f8)]()&&(this[_0x13a0dd(0x100)](),this[_0x13a0dd(0x38d)]('PostRegenerateJS'));},Game_Battler[_0x482454(0x61b)]['regenerateAllBattleCore']=function(){const _0x2c57ea=_0x482454;if(SceneManager['isSceneBattle']())for(const _0x448da9 of this[_0x2c57ea(0x6e1)]()){if(!_0x448da9)continue;this[_0x2c57ea(0x84b)](_0x448da9);}},Game_Battler[_0x482454(0x61b)][_0x482454(0x84b)]=function(_0x6dcd1d){const _0x2ff92a=_0x482454;if(!Imported[_0x2ff92a(0x49a)])return;if(!SceneManager['isSceneBattle']())return;if(this['isDead']())return;if(this[_0x2ff92a(0x2c8)]())return;if(_0x6dcd1d['note'][_0x2ff92a(0x445)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x272414=Number(RegExp['$1']);$gameTemp['requestFauxAnimation']([this],_0x272414,![],![]);}},VisuMZ[_0x482454(0x16e)][_0x482454(0x411)]=Game_Battler[_0x482454(0x61b)]['startTpbTurn'],Game_Battler['prototype'][_0x482454(0x290)]=function(){const _0x5d5219=_0x482454;this['processBattleCoreJS']('PreStartTurnJS'),VisuMZ[_0x5d5219(0x16e)][_0x5d5219(0x411)][_0x5d5219(0x2b9)](this),this[_0x5d5219(0x38d)](_0x5d5219(0x8f9));},VisuMZ[_0x482454(0x16e)]['Game_Battler_onTurnEnd']=Game_Battler[_0x482454(0x61b)][_0x482454(0x580)],Game_Battler[_0x482454(0x61b)][_0x482454(0x580)]=function(){const _0x5a8d94=_0x482454;this[_0x5a8d94(0x38d)]('PreEndTurnJS'),VisuMZ[_0x5a8d94(0x16e)]['Game_Battler_onTurnEnd'][_0x5a8d94(0x2b9)](this),this['processBattleCoreJS'](_0x5a8d94(0x79a));},Game_Battler['prototype']['processBattleCoreJS']=function(_0x44c654){const _0x1f1a9c=_0x482454;if(this[_0x1f1a9c(0x53d)]||this['_tempActor'])return;const _0x4cd1ad=VisuMZ[_0x1f1a9c(0x16e)]['Settings'][_0x1f1a9c(0x573)];if(_0x4cd1ad[_0x44c654])_0x4cd1ad[_0x44c654][_0x1f1a9c(0x2b9)](this);for(const _0x3fe6eb of this[_0x1f1a9c(0x6e1)]()){if(!_0x3fe6eb)continue;key=VisuMZ[_0x1f1a9c(0x16e)]['createKeyJS'](_0x3fe6eb,_0x44c654),VisuMZ[_0x1f1a9c(0x16e)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key]['call'](this,this,this,_0x3fe6eb,0x0);}},Game_Battler['prototype'][_0x482454(0x23f)]=function(){const _0x4019b2=_0x482454;return VisuMZ[_0x4019b2(0x16e)][_0x4019b2(0x4ae)][_0x4019b2(0x2ef)][_0x4019b2(0x384)]||![];},Game_Battler['prototype'][_0x482454(0x21c)]=function(){const _0x3f5dcc=_0x482454;if(this['isWaiting']()){if(this['chantStyle']()){if(this['_actions'][_0x3f5dcc(0x29d)](_0x20f016=>_0x20f016['item']()&&_0x20f016[_0x3f5dcc(0x54b)]()))return!![];}else{if(this['_actions'][_0x3f5dcc(0x29d)](_0x53f48a=>_0x53f48a[_0x3f5dcc(0x94e)]()&&_0x53f48a[_0x3f5dcc(0x6a0)]()))return!![];}}if(BattleManager[_0x3f5dcc(0x95b)]()&&this[_0x3f5dcc(0x3d6)]===_0x3f5dcc(0x213))return this[_0x3f5dcc(0x23f)]()?this[_0x3f5dcc(0x663)]()&&this['currentAction']()[_0x3f5dcc(0x94e)]()&&this[_0x3f5dcc(0x663)]()['isMagical']():this[_0x3f5dcc(0x663)]()&&this[_0x3f5dcc(0x663)]()[_0x3f5dcc(0x94e)]()&&this['currentAction']()[_0x3f5dcc(0x6a0)]();return![];},Game_Battler[_0x482454(0x61b)]['isCharging']=function(){const _0x1599c6=_0x482454;if(BattleManager[_0x1599c6(0x95b)]()&&this[_0x1599c6(0x3d6)]===_0x1599c6(0x213))return this[_0x1599c6(0x23f)]()?this[_0x1599c6(0x663)]()&&this[_0x1599c6(0x663)]()[_0x1599c6(0x94e)]()&&!this[_0x1599c6(0x663)]()[_0x1599c6(0x54b)]():this[_0x1599c6(0x663)]()&&this['currentAction']()[_0x1599c6(0x94e)]()&&!this[_0x1599c6(0x663)]()[_0x1599c6(0x6a0)]();return![];},VisuMZ[_0x482454(0x16e)][_0x482454(0xea)]=Game_Battler[_0x482454(0x61b)]['clearDamagePopup'],Game_Battler[_0x482454(0x61b)][_0x482454(0x802)]=function(){const _0x5a0d37=_0x482454;VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']['call'](this),this[_0x5a0d37(0x7cd)]=[];},Game_Battler[_0x482454(0x61b)]['isDamagePopupRequested']=function(){const _0x59ca33=_0x482454;if(!this['_damagePopupArray'])this[_0x59ca33(0x802)]();return this[_0x59ca33(0x7cd)][_0x59ca33(0x403)]>0x0;},Game_Battler[_0x482454(0x61b)][_0x482454(0x7ea)]=function(){const _0x38ecf0=_0x482454;if(!SceneManager['isSceneBattle']())return;if(!this[_0x38ecf0(0x7cd)])this[_0x38ecf0(0x802)]();this['createSeparateDamagePopups']();const _0x4ffe8e=this['battler']();if(_0x4ffe8e)_0x4ffe8e['setupDamagePopup']();},Game_Battler[_0x482454(0x61b)][_0x482454(0x33c)]=function(){const _0x2cae3a=_0x482454,_0x4e9f5c=this[_0x2cae3a(0x125)]();if(_0x4e9f5c['missed']||_0x4e9f5c[_0x2cae3a(0x92e)]){const _0x59a50f=JsonEx[_0x2cae3a(0x627)](_0x4e9f5c);_0x59a50f[_0x2cae3a(0x1dd)]=![],_0x59a50f[_0x2cae3a(0x14d)]=0x0,this[_0x2cae3a(0x7cd)][_0x2cae3a(0x32d)](_0x59a50f);}if(_0x4e9f5c[_0x2cae3a(0x1dd)]){const _0x16b58f=JsonEx[_0x2cae3a(0x627)](_0x4e9f5c);_0x16b58f[_0x2cae3a(0x821)]=![],_0x16b58f['evaded']=![],_0x16b58f[_0x2cae3a(0x14d)]=0x0,this[_0x2cae3a(0x7cd)][_0x2cae3a(0x32d)](_0x16b58f);}if(_0x4e9f5c[_0x2cae3a(0x14d)]!==0x0){const _0x5494f9=JsonEx[_0x2cae3a(0x627)](_0x4e9f5c);_0x5494f9['missed']=![],_0x5494f9[_0x2cae3a(0x92e)]=![],_0x5494f9['hpAffected']=![],this[_0x2cae3a(0x7cd)]['push'](_0x5494f9);}},Game_Battler[_0x482454(0x61b)]['getNextDamagePopup']=function(){const _0x50e9a1=_0x482454;if(!this[_0x50e9a1(0x7cd)])this[_0x50e9a1(0x802)]();return VisuMZ[_0x50e9a1(0x16e)]['Settings'][_0x50e9a1(0x448)]['NewPopupBottom']?this[_0x50e9a1(0x7cd)][_0x50e9a1(0x17b)]():this[_0x50e9a1(0x7cd)]['pop']();},Game_Battler['prototype'][_0x482454(0x713)]=function(_0x1f3222,_0x4bb8e3){const _0x4d8b00=_0x482454;if(!SceneManager[_0x4d8b00(0x1f8)]())return;if(!this[_0x4d8b00(0x1f6)]())return;if(_0x1f3222[_0x4d8b00(0x403)]<=0x0)return;_0x4bb8e3=_0x4bb8e3||{},_0x4bb8e3[_0x4d8b00(0x3f2)]=_0x4bb8e3['textColor']||_0x4d8b00(0x587),_0x4bb8e3[_0x4d8b00(0x5a1)]=_0x4bb8e3['flashColor']||[0x0,0x0,0x0,0x0],_0x4bb8e3[_0x4d8b00(0x8a9)]=_0x4bb8e3[_0x4d8b00(0x8a9)]||0x0,this[_0x4d8b00(0x1f6)]()[_0x4d8b00(0x713)](_0x1f3222,_0x4bb8e3);},Game_Battler[_0x482454(0x61b)]['setupIconTextPopup']=function(_0x5b8737,_0x3f6e4c,_0x1be272){const _0x33e7ce=_0x482454;if(!SceneManager[_0x33e7ce(0x1f8)]())return;if(!this['battler']())return;if(_0x3f6e4c[_0x33e7ce(0x403)]<=0x0)return;_0x1be272=_0x1be272||{},_0x1be272[_0x33e7ce(0x3f2)]=_0x1be272[_0x33e7ce(0x3f2)]||'#ffffff',_0x1be272['flashColor']=_0x1be272[_0x33e7ce(0x5a1)]||[0x0,0x0,0x0,0x0],_0x1be272[_0x33e7ce(0x8a9)]=_0x1be272['flashDuration']||0x0,this[_0x33e7ce(0x1f6)]()[_0x33e7ce(0x712)](_0x5b8737,_0x3f6e4c,_0x1be272);},Game_Battler[_0x482454(0x61b)][_0x482454(0x497)]=function(){const _0x548ea9=_0x482454;if(this[_0x548ea9(0x2c8)]())return![];if(this[_0x548ea9(0x825)]()&&this['isAppeared']())return!![];if(this['isEnemy']()&&this['hasSvBattler']()){if(this[_0x548ea9(0x7a7)]()&&this[_0x548ea9(0x276)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x482454(0x16e)][_0x482454(0x124)]=Game_Battler['prototype'][_0x482454(0x85e)],Game_Battler[_0x482454(0x61b)]['clearMotion']=function(){const _0xd698f9=_0x482454;VisuMZ[_0xd698f9(0x16e)][_0xd698f9(0x124)]['call'](this),this[_0xd698f9(0x583)]();},Game_Battler[_0x482454(0x61b)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x482454(0x61b)]['isBattlerGrounded']=function(){return![];},VisuMZ[_0x482454(0x16e)][_0x482454(0x644)]=Game_Battler[_0x482454(0x61b)][_0x482454(0x34e)],Game_Battler[_0x482454(0x61b)]['onBattleStart']=function(_0x491289){const _0x5b5bfd=_0x482454;VisuMZ['BattleCore']['Game_Battler_onBattleStart'][_0x5b5bfd(0x2b9)](this,_0x491289),this[_0x5b5bfd(0x7cf)](_0x491289);},Game_Battler[_0x482454(0x61b)][_0x482454(0x7cf)]=function(_0xcd263){const _0x5e84c8=_0x482454;this[_0x5e84c8(0x2d3)](![]),this['_forcedHomeX']=undefined,this[_0x5e84c8(0x1d9)]=undefined;},VisuMZ[_0x482454(0x16e)]['Game_Battler_onBattleEnd']=Game_Battler[_0x482454(0x61b)][_0x482454(0x8e1)],Game_Battler[_0x482454(0x61b)][_0x482454(0x8e1)]=function(){const _0x15808b=_0x482454;VisuMZ['BattleCore'][_0x15808b(0x7e9)][_0x15808b(0x2b9)](this),this[_0x15808b(0x964)]();},Game_Battler[_0x482454(0x61b)][_0x482454(0x964)]=function(){const _0x55ec3f=_0x482454;this[_0x55ec3f(0x5f7)]=undefined,this[_0x55ec3f(0x1d9)]=undefined;},VisuMZ[_0x482454(0x16e)]['Game_Battler_performActionStart']=Game_Battler[_0x482454(0x61b)]['performActionStart'],Game_Battler[_0x482454(0x61b)][_0x482454(0x792)]=function(_0x10213f){const _0x4efad3=_0x482454;VisuMZ[_0x4efad3(0x16e)][_0x4efad3(0x85d)][_0x4efad3(0x2b9)](this,_0x10213f);if(!_0x10213f['isGuard']()){const _0x104676=this[_0x4efad3(0x1f6)]();_0x104676&&_0x104676[_0x4efad3(0xde)]();}this['setBattlerFlip'](![]);},Game_Battler[_0x482454(0x61b)]['performActionEndMembers']=function(){const _0x52cfa9=_0x482454,_0x3c5b0a=this['_flinched'];this[_0x52cfa9(0x28a)]=![];if(BattleManager[_0x52cfa9(0x690)]()&&this['isInputting']()){const _0x3930b7=this['battler']();if(_0x3930b7&&_0x3c5b0a)_0x3930b7[_0x52cfa9(0xde)]();return;}const _0x1d6d91=this[_0x52cfa9(0x1f6)]();if(_0x1d6d91)_0x1d6d91[_0x52cfa9(0x747)]();this[_0x52cfa9(0x2d3)](![]),this[_0x52cfa9(0x2a0)]();},Game_Battler['prototype']['performActionMotions']=function(_0x2345e7){const _0xc3f5c0=_0x482454;if(_0x2345e7[_0xc3f5c0(0x299)]())this[_0xc3f5c0(0x4b7)]();else{if(_0x2345e7[_0xc3f5c0(0x740)]())this[_0xc3f5c0(0x6ca)]('guard');else{if(_0x2345e7[_0xc3f5c0(0x54b)]())this[_0xc3f5c0(0x6ca)](_0xc3f5c0(0x701));else{if(_0x2345e7['isSkill']())_0x2345e7['item']()['damage']['type']>0x0?this[_0xc3f5c0(0x4b7)]():this[_0xc3f5c0(0x6ca)](_0xc3f5c0(0x40c));else _0x2345e7[_0xc3f5c0(0x32b)]()&&this[_0xc3f5c0(0x6ca)](_0xc3f5c0(0x94e));}}}},Game_Battler[_0x482454(0x61b)][_0x482454(0x156)]=function(){const _0x1b675c=_0x482454;return $dataSystem[_0x1b675c(0x646)][0x0];},Game_Battler[_0x482454(0x61b)][_0x482454(0x176)]=function(){const _0x1c0697=_0x482454,_0x3ff3aa=this[_0x1c0697(0x156)]();return _0x3ff3aa?_0x3ff3aa['weaponImageId']:0x0;},Game_Battler[_0x482454(0x61b)][_0x482454(0x674)]=function(_0x2decd6){const _0x3c5da8=_0x482454;if(!$gameSystem['isSideView']())return;const _0xf87b0f=this[_0x3c5da8(0x1f6)](),_0x1b9647=_0x2decd6[_0x3c5da8(0x1f6)]();if(!_0xf87b0f||!_0x1b9647)return;const _0x48d634=_0x1b9647[_0x3c5da8(0x12b)],_0xfab763=_0x1b9647[_0x3c5da8(0x4c4)];this[_0x3c5da8(0x861)](_0x48d634,_0xfab763,0x0,![],'Linear',-0x1),_0xf87b0f[_0x3c5da8(0x6b3)]();const _0x3b65e3=VisuMZ['BattleCore'][_0x3c5da8(0x4ae)][_0x3c5da8(0x1ee)];let _0x28f483=(_0x1b9647['width']+_0xf87b0f[_0x3c5da8(0x913)])/0x2;_0x28f483*=this[_0x3c5da8(0x761)]()?0x1:-0x1;let _0x587c1e=_0x3b65e3[_0x3c5da8(0x798)]*(this[_0x3c5da8(0x761)]()?0x1:-0x1);_0x2decd6[_0x3c5da8(0x729)](_0x28f483,_0x587c1e,0x0,![],'Linear'),_0x1b9647['updatePosition']();},Game_Battler['prototype']['requestMotion']=function(_0x35f3e2){const _0x26ca54=_0x482454;if(SceneManager[_0x26ca54(0x1f8)]()){const _0xa8a671=this['battler']();_0xa8a671&&(_0xa8a671['forceMotion'](_0x35f3e2),[_0x26ca54(0x538),_0x26ca54(0x265),_0x26ca54(0x116)][_0x26ca54(0x4df)](_0x35f3e2)&&this[_0x26ca54(0x883)]());}this['clearFreezeMotion']();},Game_Battler[_0x482454(0x61b)]['performWeaponAnimation']=function(){},Game_Battler[_0x482454(0x61b)][_0x482454(0x49b)]=function(_0x1ff66b){const _0xd3c182=_0x482454;if(SceneManager[_0xd3c182(0x1f8)]()){const _0x342d65=this[_0xd3c182(0x1f6)]();if(_0x342d65)_0x342d65[_0xd3c182(0x10d)](_0x1ff66b);}},Game_Battler['prototype'][_0x482454(0x377)]=function(){const _0x4c2fb5=_0x482454;if(SceneManager[_0x4c2fb5(0x1f8)]()){const _0x223b78=this[_0x4c2fb5(0x176)]();this[_0x4c2fb5(0x49b)](_0x223b78);}},Game_Battler['prototype'][_0x482454(0x46a)]=function(_0x100d57,_0x1c8dc6){const _0x51d22c=_0x482454;if(!_0x100d57)return;if(!_0x100d57[_0x51d22c(0x94e)]())return;if(_0x100d57[_0x51d22c(0x299)]())return;if(_0x100d57[_0x51d22c(0x740)]())return;if(_0x100d57[_0x51d22c(0x32b)]())return;let _0x2bb36e=0x0;const _0x2f622c=VisuMZ['BattleCore'][_0x51d22c(0x4ae)][_0x51d22c(0x1ee)],_0x314d61=_0x100d57[_0x51d22c(0x94e)]()[_0x51d22c(0x305)];if(_0x314d61[_0x51d22c(0x445)](/<CAST ANIMATION: (\d+)>/i))_0x2bb36e=Number(RegExp['$1']);else{if(_0x314d61[_0x51d22c(0x445)](/<NO CAST ANIMATION>/i))return;else{if(_0x100d57[_0x51d22c(0x4a2)]())_0x2bb36e=_0x2f622c[_0x51d22c(0x6da)];else{if(_0x100d57[_0x51d22c(0x3f8)]())_0x2bb36e=_0x2f622c[_0x51d22c(0x51f)];else _0x100d57[_0x51d22c(0x54b)]()&&(_0x2bb36e=_0x2f622c[_0x51d22c(0x23d)]);}}}_0x2bb36e>0x0&&$gameTemp[_0x51d22c(0x3b4)]([this],_0x2bb36e,!!_0x1c8dc6);},Game_Battler[_0x482454(0x61b)][_0x482454(0x37c)]=function(){const _0x448f6d=_0x482454;SoundManager[_0x448f6d(0x5f1)]();let _0x20f7ee=VisuMZ[_0x448f6d(0x16e)]['Settings']['ActionSequence'][_0x448f6d(0x235)];_0x20f7ee>0x0&&(Imported[_0x448f6d(0x49a)]?$gameTemp['requestFauxAnimation']([this],_0x20f7ee):$gameTemp['requestAnimation']([this],_0x20f7ee));},VisuMZ['BattleCore'][_0x482454(0x2a4)]=Game_Battler['prototype'][_0x482454(0x3d8)],Game_Battler[_0x482454(0x61b)]['performDamage']=function(){const _0x6292c7=_0x482454;VisuMZ[_0x6292c7(0x16e)][_0x6292c7(0x2a4)][_0x6292c7(0x2b9)](this),this[_0x6292c7(0x41d)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x4ad)]=Game_Battler[_0x482454(0x61b)]['performMiss'],Game_Battler[_0x482454(0x61b)][_0x482454(0x553)]=function(){const _0x2fdb25=_0x482454;VisuMZ['BattleCore'][_0x2fdb25(0x4ad)][_0x2fdb25(0x2b9)](this),this[_0x2fdb25(0x41d)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x6e0)]=Game_Battler[_0x482454(0x61b)][_0x482454(0x59a)],Game_Battler[_0x482454(0x61b)][_0x482454(0x59a)]=function(){const _0x3eadbf=_0x482454;VisuMZ[_0x3eadbf(0x16e)][_0x3eadbf(0x6e0)][_0x3eadbf(0x2b9)](this),this[_0x3eadbf(0x41d)]();},Game_Battler[_0x482454(0x61b)]['performFlinch']=function(){const _0x1ccd4d=_0x482454;if(!$gameSystem[_0x1ccd4d(0x447)]())return;if(this[_0x1ccd4d(0x28a)])return;this[_0x1ccd4d(0x28a)]=!![];const _0x3aa01c=this[_0x1ccd4d(0x1f6)]();if(_0x3aa01c)_0x3aa01c[_0x1ccd4d(0x52c)]();},Game_Battler['prototype']['requestMotionRefresh']=function(){const _0x14e215=_0x482454;if(this['isDead']()&&this[_0x14e215(0x680)]!==_0x14e215(0x2eb)){this['requestMotion']('dead');return;}if(this['isDead']()&&this[_0x14e215(0x680)]===_0x14e215(0x2eb))return;if(!!this['_freezeMotionData'])return;if(this[_0x14e215(0x186)]()){if(!this['isDuringNonLoopingMotion']()&&this!==BattleManager[_0x14e215(0x57d)]){if(this[_0x14e215(0x1f6)]())this[_0x14e215(0x1f6)]()[_0x14e215(0x5c9)]();}this['clearFreezeMotion']();return;}if(this[_0x14e215(0x680)]==='victory')return;if(this[_0x14e215(0x680)]==='escape'&&!BattleManager[_0x14e215(0xe0)]())return;if(this[_0x14e215(0x680)]==='guard'&&!BattleManager[_0x14e215(0xe0)]())return;this['clearMotion']();if(this[_0x14e215(0x1f6)]()&&BattleManager[_0x14e215(0xe0)]()){this[_0x14e215(0x1f6)]()[_0x14e215(0x5c9)](),this[_0x14e215(0x583)]();return;}},Game_Enemy['prototype'][_0x482454(0x830)]=function(){const _0x7dd874=_0x482454;if(!this[_0x7dd874(0x718)]())return![];const _0x550921=this[_0x7dd874(0x1f6)]();if(!_0x550921)return![];const _0x3ddc2e=_0x550921['_svBattlerSprite'];if(!_0x3ddc2e)return![];const _0x3f1794=_0x3ddc2e[_0x7dd874(0x603)];return _0x3f1794&&!_0x3f1794[_0x7dd874(0x7e4)];},Game_Battler[_0x482454(0x61b)][_0x482454(0x4f2)]=function(){const _0x3153c0=_0x482454;return this[_0x3153c0(0x63f)];},Game_Battler[_0x482454(0x61b)][_0x482454(0x2d3)]=function(_0x202bbf){const _0x226a65=_0x482454;if(!$gameSystem[_0x226a65(0x447)]())return;this['_isBattlerFlipped']=_0x202bbf;const _0x5242ba=this['battler']();if(_0x5242ba)_0x5242ba['updateFlip']();},Game_Battler[_0x482454(0x61b)][_0x482454(0x888)]=function(_0x4598c8,_0x2d2ba8,_0x1e2b04){const _0x407608=_0x482454;if(!$gameSystem[_0x407608(0x447)]())return;const _0x4fd9be=this[_0x407608(0x1f6)]();if(!_0x4fd9be)return;if(_0x4598c8===_0x4fd9be['_baseX'])return;let _0x5728ee=![];if(this[_0x407608(0x761)]()){if(_0x4598c8>_0x4fd9be[_0x407608(0x12b)])_0x5728ee=!![];if(_0x4598c8<_0x4fd9be['_baseX'])_0x5728ee=![];}else{if(this[_0x407608(0x186)]()){if(_0x4598c8>_0x4fd9be[_0x407608(0x12b)])_0x5728ee=![];if(_0x4598c8<_0x4fd9be[_0x407608(0x12b)])_0x5728ee=!![];}};this[_0x407608(0x2d3)](_0x1e2b04?!_0x5728ee:_0x5728ee),_0x4fd9be[_0x407608(0x4da)]();},Game_Battler[_0x482454(0x61b)]['moveBattlerDistance']=function(_0x2a24c7,_0x251883,_0x5de24b,_0x4c8e23,_0x1c1bab){const _0x4383c7=_0x482454;if(!$gameSystem['isSideView']())return;const _0x5cac2d=this[_0x4383c7(0x1f6)]();if(!_0x5cac2d)return;if(_0x4c8e23)this[_0x4383c7(0x888)](_0x2a24c7+_0x5cac2d[_0x4383c7(0x12b)],_0x251883+_0x5cac2d[_0x4383c7(0x4c4)],![]);_0x2a24c7+=_0x5cac2d[_0x4383c7(0x12b)]-_0x5cac2d[_0x4383c7(0x8ae)],_0x251883+=_0x5cac2d[_0x4383c7(0x4c4)]-_0x5cac2d[_0x4383c7(0x721)],_0x5cac2d[_0x4383c7(0x43c)](_0x2a24c7,_0x251883,_0x5de24b);if(Imported[_0x4383c7(0x49a)])_0x5cac2d['setMoveEasingType'](_0x1c1bab||_0x4383c7(0x87c));},Game_Battler[_0x482454(0x61b)][_0x482454(0x861)]=function(_0x4e8527,_0x4a955c,_0x569848,_0x114098,_0x5d294f,_0x3a3f0e){const _0x1fd95a=_0x482454;if(!$gameSystem[_0x1fd95a(0x447)]())return;const _0x2e7a7e=this[_0x1fd95a(0x1f6)]();if(!_0x2e7a7e)return;_0x3a3f0e=_0x3a3f0e||0x0;if(_0x3a3f0e>0x0){if(_0x2e7a7e[_0x1fd95a(0x12b)]>_0x4e8527)_0x4e8527+=_0x2e7a7e[_0x1fd95a(0x913)]/0x2+_0x3a3f0e;if(_0x2e7a7e[_0x1fd95a(0x12b)]<_0x4e8527)_0x4e8527-=_0x2e7a7e['width']/0x2+_0x3a3f0e;}if(_0x114098)this[_0x1fd95a(0x888)](_0x4e8527,_0x4a955c,![]);_0x4e8527-=_0x2e7a7e[_0x1fd95a(0x8ae)],_0x4a955c-=_0x2e7a7e[_0x1fd95a(0x721)],_0x2e7a7e[_0x1fd95a(0x43c)](_0x4e8527,_0x4a955c,_0x569848);if(Imported['VisuMZ_0_CoreEngine'])_0x2e7a7e[_0x1fd95a(0x1b5)](_0x5d294f||_0x1fd95a(0x87c));},Game_Battler[_0x482454(0x61b)][_0x482454(0x373)]=function(_0x1dcc40,_0x53258d,_0x57bfd1,_0x5c1eaa,_0x5c94ef){const _0x561b8b=_0x482454;if(!$gameSystem[_0x561b8b(0x447)]())return;const _0x14f5c7=this[_0x561b8b(0x1f6)]();if(!_0x14f5c7)return;if(_0x5c1eaa)this[_0x561b8b(0x888)](_0x1dcc40+_0x14f5c7[_0x561b8b(0x12b)],_0x53258d+_0x14f5c7[_0x561b8b(0x4c4)],![]);_0x1dcc40+=_0x14f5c7[_0x561b8b(0x8ae)],_0x53258d+=_0x14f5c7[_0x561b8b(0x721)],_0x14f5c7[_0x561b8b(0x641)](_0x1dcc40,_0x53258d,_0x57bfd1,_0x5c94ef),this['_forcedHomeX']=_0x1dcc40,this['_forcedHomeY']=_0x53258d;},Game_Battler['prototype'][_0x482454(0x8a5)]=function(_0x467d9a,_0x5b74dd,_0x3354a0,_0x48ecf9,_0x3fc0b8,_0x351358){const _0x4862e9=_0x482454;if(!$gameSystem['isSideView']())return;const _0x90b435=this[_0x4862e9(0x1f6)]();if(!_0x90b435)return;_0x351358=_0x351358||0x0;if(_0x351358>0x0){if(_0x90b435[_0x4862e9(0x12b)]>_0x467d9a)_0x467d9a+=_0x90b435[_0x4862e9(0x913)]/0x2+_0x351358;if(_0x90b435[_0x4862e9(0x12b)]<_0x467d9a)_0x467d9a-=_0x90b435[_0x4862e9(0x913)]/0x2+_0x351358;}if(_0x48ecf9)this[_0x4862e9(0x888)](_0x467d9a,_0x5b74dd,![]);_0x90b435[_0x4862e9(0x641)](_0x467d9a,_0x5b74dd,_0x3354a0,_0x3fc0b8),this[_0x4862e9(0x5f7)]=_0x467d9a,this[_0x4862e9(0x1d9)]=_0x5b74dd;},Game_Battler['prototype']['floatBattler']=function(_0x2fdcf5,_0x328a30,_0x38cca7){const _0x2df956=_0x482454;if(!$gameSystem['isSideView']())return;const _0x5b5ea0=this['battler']();if(!_0x5b5ea0)return;_0x5b5ea0[_0x2df956(0x2f7)](_0x2fdcf5,_0x328a30,_0x38cca7);},Game_Battler[_0x482454(0x61b)][_0x482454(0x70d)]=function(_0x1bad90,_0xa8269){const _0xdb951d=_0x482454;if(!$gameSystem[_0xdb951d(0x447)]())return;const _0x4fd821=this[_0xdb951d(0x1f6)]();if(!_0x4fd821)return;_0x4fd821[_0xdb951d(0x783)](_0x1bad90,_0xa8269);},Game_Battler['prototype'][_0x482454(0x8da)]=function(_0x2bf09a,_0x5c65b7,_0x191fc8,_0x5db6dd){const _0x5c6566=_0x482454;if(!$gameSystem['isSideView']())return;const _0x4433d7=this[_0x5c6566(0x1f6)]();if(!_0x4433d7)return;_0x4433d7['startSpin'](_0x2bf09a,_0x5c65b7,_0x191fc8,_0x5db6dd);},Game_Battler[_0x482454(0x61b)][_0x482454(0x8d1)]=function(_0x3b3eb3,_0x29446f,_0x58e5a1,_0x3743d3){const _0x254559=_0x482454;if(!$gameSystem[_0x254559(0x447)]())return;const _0x289dd0=this[_0x254559(0x1f6)]();if(!_0x289dd0)return;this[_0x254559(0x761)]()&&(_0x3b3eb3*=-0x1,_0x29446f*=-0x1),_0x289dd0[_0x254559(0x63e)](_0x3b3eb3,_0x29446f,_0x58e5a1,_0x3743d3);},Game_Battler[_0x482454(0x61b)]['growBattler']=function(_0x202e4d,_0x10ad1f,_0x343091,_0x138fcc){const _0x55a4a1=_0x482454;if(!$gameSystem['isSideView']())return;const _0x10b969=this[_0x55a4a1(0x1f6)]();if(!_0x10b969)return;_0x10b969['startGrow'](_0x202e4d,_0x10ad1f,_0x343091,_0x138fcc);},Game_Battler['prototype'][_0x482454(0x67b)]=function(_0x4dd5be,_0x3aad8b,_0x5a9d5f){const _0x35b52c=_0x482454;if(!$gameSystem[_0x35b52c(0x447)]())return;const _0x348d0d=this[_0x35b52c(0x1f6)]();if(!_0x348d0d)return;_0x348d0d[_0x35b52c(0x304)](_0x4dd5be,_0x3aad8b,_0x5a9d5f);},Game_Battler[_0x482454(0x61b)][_0x482454(0x583)]=function(){const _0x31e542=_0x482454,_0x4827a9=!!this[_0x31e542(0x892)];this[_0x31e542(0x892)]=undefined,_0x4827a9&&(this[_0x31e542(0x2a0)](),this[_0x31e542(0x244)]());},Game_Battler[_0x482454(0x61b)][_0x482454(0x244)]=function(){const _0x806140=_0x482454;if(!SceneManager[_0x806140(0x1f8)]())return;const _0x353143=this[_0x806140(0x1f6)]();if(!_0x353143)return;let _0x2b5b5e=this[_0x806140(0x761)]()?_0x353143[_0x806140(0x214)]:_0x353143['_svBattlerSprite'][_0x806140(0x214)];_0x2b5b5e&&_0x2b5b5e['setup'](0x0);},Game_Battler[_0x482454(0x61b)][_0x482454(0x75d)]=function(_0x23ab14,_0x327010,_0xf3f626){const _0x35a966=_0x482454;if(this['isEnemy']()&&!this['hasSvBattler']())return;let _0x320634=0x0,_0xdb8918=0x0;_0x23ab14[_0x35a966(0x445)](/ATTACK[ ](\d+)/i)&&(_0xdb8918=Number(RegExp['$1']),_0xdb8918--);if(this[_0x35a966(0x761)]()){const _0x530b0d=this[_0x35a966(0x684)]();_0x320634=_0x530b0d[_0xdb8918]?_0x530b0d[_0xdb8918]['wtypeId']:0x0;}else this[_0x35a966(0x186)]()&&(_0x320634=this[_0x35a966(0x6e3)]()[_0x35a966(0x1ad)]||0x0);const _0x5bd812=$dataSystem[_0x35a966(0x646)][_0x320634];_0x23ab14[_0x35a966(0x445)](/attack/i)&&(_0x23ab14=[_0x35a966(0x265),_0x35a966(0x538),_0x35a966(0x116)][_0x5bd812[_0x35a966(0x415)]]||_0x35a966(0x538)),this[_0x35a966(0x892)]={'motionType':_0x23ab14,'weaponImageId':_0x327010?_0x5bd812[_0x35a966(0x5b2)]:0x0,'pattern':_0xf3f626};},Game_Battler[_0x482454(0x61b)][_0x482454(0x362)]=function(_0x24b5db){const _0x204ec8=_0x482454;if(!_0x24b5db)return![];return _0x24b5db[_0x204ec8(0x732)]()===this[_0x204ec8(0x732)]();},Game_Battler[_0x482454(0x61b)][_0x482454(0x261)]=function(_0x5d6451){const _0x19bc13=_0x482454;if(!_0x5d6451)return![];return _0x5d6451[_0x19bc13(0xfd)]()===this[_0x19bc13(0x732)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x2bd)]=Game_Actor[_0x482454(0x61b)][_0x482454(0x2b6)],Game_Actor['prototype'][_0x482454(0x2b6)]=function(_0x449c39){const _0x99336e=_0x482454;VisuMZ['BattleCore'][_0x99336e(0x2bd)][_0x99336e(0x2b9)](this,_0x449c39),this[_0x99336e(0x4b6)]();},Game_Actor[_0x482454(0x61b)][_0x482454(0x4b6)]=function(){const _0x3ef7bc=_0x482454;this[_0x3ef7bc(0x45f)]='',this[_0x3ef7bc(0x57b)]()&&this[_0x3ef7bc(0x57b)]()[_0x3ef7bc(0x305)][_0x3ef7bc(0x445)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this['_battlePortrait']=String(RegExp['$1']));},Game_Actor[_0x482454(0x61b)][_0x482454(0x28d)]=function(){const _0x458f60=_0x482454;if(this[_0x458f60(0x62c)]()!=='')return this[_0x458f60(0x62c)]();else{if(Imported[_0x458f60(0xf6)]&&this[_0x458f60(0x3fa)]()!=='')return this[_0x458f60(0x3fa)]();}return'';},Game_Actor[_0x482454(0x61b)][_0x482454(0x62c)]=function(){const _0x306fc3=_0x482454;if(this['_battlePortrait']===undefined)this[_0x306fc3(0x4b6)]();return this[_0x306fc3(0x45f)];},Game_Actor['prototype']['setBattlePortrait']=function(_0x197b81){const _0x1888b4=_0x482454;if(this[_0x1888b4(0x45f)]===undefined)this[_0x1888b4(0x4b6)]();this[_0x1888b4(0x45f)]=_0x197b81;if(SceneManager[_0x1888b4(0x1f8)]()&&$gameParty[_0x1888b4(0x49d)]()[_0x1888b4(0x4df)](this)){const _0x68b8e7=SceneManager[_0x1888b4(0x938)][_0x1888b4(0x63d)];if(_0x68b8e7)_0x68b8e7[_0x1888b4(0x3ef)](this);}},Game_Actor['prototype'][_0x482454(0x638)]=function(){return!![];},Game_Actor[_0x482454(0x61b)][_0x482454(0x822)]=function(){const _0x2ec859=_0x482454;if(!this[_0x2ec859(0x301)]()&&BattleManager[_0x2ec859(0x163)])return!![];return Game_Battler[_0x2ec859(0x61b)]['isAutoBattle'][_0x2ec859(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x499)]=Game_Actor[_0x482454(0x61b)][_0x482454(0x851)],Game_Actor[_0x482454(0x61b)]['makeActionList']=function(){const _0xff9000=_0x482454;if(BattleManager[_0xff9000(0x163)]&&!ConfigManager[_0xff9000(0x872)])return this['makeActionListAutoAttack']();else{return VisuMZ[_0xff9000(0x16e)]['Game_Actor_makeActionList'][_0xff9000(0x2b9)](this);;}},Game_Actor[_0x482454(0x61b)][_0x482454(0x435)]=function(){const _0x5d8dcc=_0x482454,_0x32b007=[],_0x4d0e2a=new Game_Action(this);return _0x4d0e2a[_0x5d8dcc(0x1c9)](),_0x32b007[_0x5d8dcc(0x32d)](_0x4d0e2a),_0x32b007;},Game_Actor[_0x482454(0x61b)]['battleCommands']=function(){const _0x1c8994=_0x482454;return this[_0x1c8994(0x4fb)]()[_0x1c8994(0x305)][_0x1c8994(0x445)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x1c8994(0x16e)][_0x1c8994(0x4ae)][_0x1c8994(0x89f)][_0x1c8994(0x343)];},Game_Actor['prototype'][_0x482454(0x416)]=function(){const _0x3e9f13=_0x482454;if(this[_0x3e9f13(0x36d)][_0x3e9f13(0x18b)]!==undefined)return this[_0x3e9f13(0x36d)]['svAnchorX'];return this['actor']()[_0x3e9f13(0x305)][_0x3e9f13(0x445)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x3e9f13(0x36d)][_0x3e9f13(0x18b)]=eval(RegExp['$1']),this['_cache'][_0x3e9f13(0x1c7)]=eval(RegExp['$2'])):this[_0x3e9f13(0x36d)][_0x3e9f13(0x18b)]=Game_Battler[_0x3e9f13(0x61b)]['svBattlerAnchorX'][_0x3e9f13(0x2b9)](this),this[_0x3e9f13(0x36d)][_0x3e9f13(0x18b)];},Game_Actor[_0x482454(0x61b)][_0x482454(0x3a6)]=function(){const _0x4c733c=_0x482454;if(this['_cache'][_0x4c733c(0x1c7)]!==undefined)return this[_0x4c733c(0x36d)][_0x4c733c(0x1c7)];return this[_0x4c733c(0x57b)]()['note']['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x4c733c(0x18b)]=eval(RegExp['$1']),this[_0x4c733c(0x36d)][_0x4c733c(0x1c7)]=eval(RegExp['$2'])):this[_0x4c733c(0x36d)]['svAnchorY']=Game_Battler[_0x4c733c(0x61b)][_0x4c733c(0x3a6)][_0x4c733c(0x2b9)](this),this[_0x4c733c(0x36d)][_0x4c733c(0x1c7)];},Game_Actor[_0x482454(0x61b)][_0x482454(0x652)]=function(){const _0x1edf7d=_0x482454;if(this[_0x1edf7d(0x36d)][_0x1edf7d(0x291)]!==undefined)return this[_0x1edf7d(0x36d)][_0x1edf7d(0x291)];if(this[_0x1edf7d(0x57b)]()['note']['match'](/<SIDEVIEW SHOW SHADOW>/i))this['_cache'][_0x1edf7d(0x291)]=!![];else this[_0x1edf7d(0x57b)]()[_0x1edf7d(0x305)][_0x1edf7d(0x445)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x1edf7d(0x36d)][_0x1edf7d(0x291)]=![]:this[_0x1edf7d(0x36d)][_0x1edf7d(0x291)]=Game_Battler['prototype'][_0x1edf7d(0x652)]['call'](this);return this[_0x1edf7d(0x36d)][_0x1edf7d(0x291)];},Game_Actor[_0x482454(0x61b)][_0x482454(0x294)]=function(){const _0x16a54e=_0x482454;return VisuMZ[_0x16a54e(0x16e)][_0x16a54e(0x4ae)][_0x16a54e(0x2ef)][_0x16a54e(0x6c2)];},Game_Actor[_0x482454(0x61b)][_0x482454(0x883)]=function(){const _0x2638b5=_0x482454,_0xa9b6d9=this[_0x2638b5(0x684)](),_0x5475ab=_0xa9b6d9[0x0]?_0xa9b6d9[0x0][_0x2638b5(0x1ad)]:0x0,_0x508334=$dataSystem[_0x2638b5(0x646)][_0x5475ab];_0x508334&&this[_0x2638b5(0x49b)](_0x508334['weaponImageId']);},Game_Actor[_0x482454(0x61b)][_0x482454(0x688)]=function(_0x59a612){const _0x26a205=_0x482454;Game_Battler[_0x26a205(0x61b)]['performAction'][_0x26a205(0x2b9)](this,_0x59a612),this[_0x26a205(0x4cd)](_0x59a612);},Game_Actor[_0x482454(0x61b)][_0x482454(0x156)]=function(){const _0x6022b9=_0x482454,_0x7acb93=this[_0x6022b9(0x684)](),_0x2b01bd=_0x7acb93[0x0]?_0x7acb93[0x0][_0x6022b9(0x1ad)]:0x0;return $dataSystem[_0x6022b9(0x646)][_0x2b01bd];},Game_Actor[_0x482454(0x61b)]['attackAnimationIdSlot']=function(_0x27715b){const _0x237fe4=_0x482454;_0x27715b=_0x27715b||0x1,_0x27715b--;const _0x220233=this[_0x237fe4(0x684)]();return _0x220233[_0x27715b]?_0x220233[_0x27715b]['animationId']:0x0;},Game_Actor[_0x482454(0x61b)][_0x482454(0x5b1)]=function(_0xd817da){const _0xa96cb0=_0x482454;_0xd817da=_0xd817da||0x1,_0xd817da--;const _0xe38665=this[_0xa96cb0(0x684)](),_0x3e90f7=_0xe38665[_0xd817da]?_0xe38665[_0xd817da]['wtypeId']:0x0;return $dataSystem[_0xa96cb0(0x646)][_0x3e90f7];},Game_Actor['prototype'][_0x482454(0x922)]=function(_0x51ef26){const _0x7c3a18=_0x482454;_0x51ef26=_0x51ef26||0x1,_0x51ef26--;const _0x4098e1=this[_0x7c3a18(0x684)](),_0x4e98ed=_0x4098e1[_0x51ef26]?_0x4098e1[_0x51ef26][_0x7c3a18(0x1ad)]:0x0,_0x225b92=$dataSystem[_0x7c3a18(0x646)][_0x4e98ed];if(_0x225b92){if(_0x225b92[_0x7c3a18(0x415)]===0x0)this['requestMotion'](_0x7c3a18(0x265));else{if(_0x225b92[_0x7c3a18(0x415)]===0x1)this[_0x7c3a18(0x6ca)](_0x7c3a18(0x538));else _0x225b92['type']===0x2&&this[_0x7c3a18(0x6ca)](_0x7c3a18(0x116));}this['startWeaponAnimation'](_0x225b92[_0x7c3a18(0x5b2)]);}},Game_Battler['prototype']['setActiveWeaponSlot']=function(_0x26ae30){const _0x34caa3=_0x482454;this[_0x34caa3(0x911)]=_0x26ae30||0x0,this[_0x34caa3(0x36d)]={};},Game_Battler[_0x482454(0x61b)][_0x482454(0x1f4)]=function(){const _0x466f46=_0x482454;this['_activeWeaponSlot']=this[_0x466f46(0x911)]||0x0,this[_0x466f46(0x911)]++,this[_0x466f46(0x36d)]={};},Game_Battler[_0x482454(0x61b)][_0x482454(0x633)]=function(){this['_activeWeaponSlot']=undefined,this['_cache']={};},VisuMZ[_0x482454(0x16e)][_0x482454(0x759)]=Game_Actor[_0x482454(0x61b)][_0x482454(0x3e2)],Game_Actor[_0x482454(0x61b)][_0x482454(0x3e2)]=function(){const _0x1aaf07=_0x482454;let _0x7dca3b=VisuMZ[_0x1aaf07(0x16e)][_0x1aaf07(0x759)][_0x1aaf07(0x2b9)](this);if(this[_0x1aaf07(0x14f)])return _0x7dca3b;if(this[_0x1aaf07(0x911)]!==undefined){this[_0x1aaf07(0x14f)]=!![];const _0x3806cc=this['equipSlots']();for(let _0x129d38=0x0;_0x129d38<_0x3806cc[_0x1aaf07(0x403)];_0x129d38++){_0x3806cc[_0x129d38]===0x1&&this[_0x1aaf07(0x911)]!==_0x129d38&&(_0x7dca3b[_0x129d38]=null);}this[_0x1aaf07(0x14f)]=undefined;}return _0x7dca3b;},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x141)]=function(_0x1a43c7){const _0x2bf84f=_0x482454;return _0x1a43c7['isActor']()?_0x1a43c7['weapons']()[_0x2bf84f(0x403)]||0x1:0x1;},Window_BattleLog[_0x482454(0x61b)]['setActiveWeaponSet']=function(_0x3e3115,_0x5cdf38){const _0x2b54ba=_0x482454;_0x3e3115&&_0x3e3115[_0x2b54ba(0x761)]()&&_0x3e3115[_0x2b54ba(0x6d7)](_0x5cdf38),this[_0x2b54ba(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x83a)]=function(_0x48a203){const _0x36b72c=_0x482454;_0x48a203&&_0x48a203[_0x36b72c(0x761)]()&&_0x48a203[_0x36b72c(0x633)](),this[_0x36b72c(0x7f4)]();},Game_Actor[_0x482454(0x61b)][_0x482454(0x695)]=function(){const _0x17f487=_0x482454;let _0x369c8c=_0x17f487(0x695);if(this[_0x17f487(0x200)](_0x369c8c))return this[_0x17f487(0x36d)][_0x369c8c];return this[_0x17f487(0x36d)][_0x369c8c]=this[_0x17f487(0x279)](this['actor']()),this[_0x17f487(0x36d)][_0x369c8c];},Game_Actor[_0x482454(0x61b)]['battleUIOffsetY']=function(){const _0x25897d=_0x482454;let _0x234eb4=_0x25897d(0x221);if(this[_0x25897d(0x200)](_0x234eb4))return this[_0x25897d(0x36d)][_0x234eb4];return this['_cache'][_0x234eb4]=this[_0x25897d(0x4c3)](this[_0x25897d(0x57b)]()),this[_0x25897d(0x36d)][_0x234eb4];},VisuMZ['BattleCore'][_0x482454(0x4ff)]=Game_Enemy[_0x482454(0x61b)][_0x482454(0x2b6)],Game_Enemy[_0x482454(0x61b)][_0x482454(0x2b6)]=function(_0x3e1c42,_0x5ab81a,_0x44d33e){const _0x5ee7df=_0x482454;_0x3e1c42=DataManager[_0x5ee7df(0x871)](_0x3e1c42),VisuMZ[_0x5ee7df(0x16e)][_0x5ee7df(0x4ff)][_0x5ee7df(0x2b9)](this,_0x3e1c42,_0x5ab81a,_0x44d33e),Imported['VisuMZ_1_ElementStatusCore']&&this[_0x5ee7df(0x593)](),this[_0x5ee7df(0x1f0)](),this[_0x5ee7df(0x12f)](),Imported[_0x5ee7df(0x2f1)]&&this[_0x5ee7df(0x81d)]();},Game_Enemy[_0x482454(0x61b)]['clearBattleCoreData']=function(){const _0xd145ad=_0x482454,_0x3c4216=VisuMZ['BattleCore'][_0xd145ad(0x4ae)][_0xd145ad(0x8c8)];this[_0xd145ad(0x1aa)]=_0x3c4216['AttackAnimation'],this['_svBattlerData']={};},Game_Enemy[_0x482454(0x61b)]['setupBattleCoreData']=function(){const _0x8629fd=_0x482454,_0x2b2fb2=VisuMZ[_0x8629fd(0x16e)][_0x8629fd(0x4ae)][_0x8629fd(0x8c8)],_0x2887d4=this[_0x8629fd(0x614)]()[_0x8629fd(0x305)];this['_svBattlerData']={'name':'','wtypeId':_0x2b2fb2[_0x8629fd(0x319)],'collapse':_0x2b2fb2[_0x8629fd(0x893)],'motionIdle':_0x2b2fb2[_0x8629fd(0x936)],'width':_0x2b2fb2[_0x8629fd(0x7d4)]||0x40,'height':_0x2b2fb2['Height']||0x40,'anchorX':_0x2b2fb2['AnchorX']||0x0,'anchorY':_0x2b2fb2[_0x8629fd(0x954)]||0x0,'shadow':_0x2b2fb2[_0x8629fd(0x379)]};_0x2887d4[_0x8629fd(0x445)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x374dbe=this[_0x8629fd(0x2b2)];if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW BATTLER: (.*)>/i))_0x374dbe[_0x8629fd(0x7cb)]=String(RegExp['$1']);else{if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x3ffeb4=String(RegExp['$1'])[_0x8629fd(0x8b5)](/[\r\n]+/)[_0x8629fd(0x350)]('');_0x374dbe[_0x8629fd(0x7cb)]=DataManager[_0x8629fd(0x960)](_0x3ffeb4);}}_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x374dbe['anchorX']=eval(RegExp['$1']),_0x374dbe[_0x8629fd(0x1e0)]=eval(RegExp['$2']));if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW COLLAPSE>/i))_0x374dbe['collapse']=!![];else _0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x374dbe['collapse']=![]);if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW SHOW SHADOW>/i))_0x374dbe[_0x8629fd(0x3b1)]=!![];else _0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x374dbe[_0x8629fd(0x3b1)]=![]);if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x374dbe[_0x8629fd(0x3ce)]=String(RegExp['$1'])[_0x8629fd(0x61c)]()[_0x8629fd(0x910)]();else{if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x6a2d47=String(RegExp['$1'])[_0x8629fd(0x8b5)](/[\r\n]+/)[_0x8629fd(0x350)]('');_0x374dbe['motionIdle']=DataManager[_0x8629fd(0x960)](_0x6a2d47);}}_0x2887d4['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x374dbe['width']=Number(RegExp['$1']),_0x374dbe[_0x8629fd(0x4c6)]=Number(RegExp['$2']));if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW WEAPON: (.*)>/i))_0x374dbe[_0x8629fd(0x1ad)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x2887d4[_0x8629fd(0x445)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x38f6e0=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x229a50=DataManager[_0x8629fd(0x960)](_0x38f6e0);_0x374dbe[_0x8629fd(0x1ad)]=DataManager[_0x8629fd(0x4bf)](_0x229a50);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x5bfe9f=this[_0x8629fd(0x137)]();for(const _0x502d02 of _0x5bfe9f){const _0x5c9415=this[_0x8629fd(0x93e)](_0x502d02)[_0x8629fd(0x599)][_0x8629fd(0x24b)]()[_0x8629fd(0x910)](),_0x4a4a87=_0x502d02['toUpperCase']()[_0x8629fd(0x910)]();if(_0x2887d4[_0x8629fd(0x445)](VisuMZ[_0x8629fd(0x469)][_0x8629fd(0x7db)]['SvBattlerSolo-%1-%2'[_0x8629fd(0x355)](_0x4a4a87,_0x5c9415)]))_0x374dbe[_0x8629fd(0x7cb)]=String(RegExp['$1']);else{if(_0x2887d4[_0x8629fd(0x445)](VisuMZ['ElementStatusCore']['RegExp'][_0x8629fd(0x11e)[_0x8629fd(0x355)](_0x4a4a87,_0x5c9415)])){const _0x580f89=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x374dbe[_0x8629fd(0x7cb)]=DataManager[_0x8629fd(0x960)](_0x580f89);}}if(_0x2887d4[_0x8629fd(0x445)](VisuMZ['ElementStatusCore'][_0x8629fd(0x7db)][_0x8629fd(0xf7)['format'](_0x4a4a87,_0x5c9415)]))_0x374dbe[_0x8629fd(0x1ad)]=DataManager[_0x8629fd(0x4bf)](RegExp['$1']);else{if(_0x2887d4['match'](VisuMZ[_0x8629fd(0x469)][_0x8629fd(0x7db)][_0x8629fd(0x110)[_0x8629fd(0x355)](_0x4a4a87,_0x5c9415)])){const _0x1c9c98=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x8629fd(0x350)](''),_0x1749c6=DataManager[_0x8629fd(0x960)](_0x1c9c98);_0x374dbe[_0x8629fd(0x1ad)]=DataManager[_0x8629fd(0x4bf)](_0x1749c6);}}if(_0x2887d4[_0x8629fd(0x445)](VisuMZ[_0x8629fd(0x469)][_0x8629fd(0x7db)][_0x8629fd(0xec)['format'](_0x4a4a87,_0x5c9415)]))_0x374dbe[_0x8629fd(0x3ce)]=String(RegExp['$1'])['toLowerCase']()[_0x8629fd(0x910)]();else{if(_0x2887d4[_0x8629fd(0x445)](VisuMZ[_0x8629fd(0x469)][_0x8629fd(0x7db)]['SvMotionIdleMass-%1-%2'['format'](_0x4a4a87,_0x5c9415)])){const _0x39c4c9=String(RegExp['$1'])[_0x8629fd(0x8b5)](/[\r\n]+/)[_0x8629fd(0x350)]('');_0x374dbe['motionIdle']=DataManager[_0x8629fd(0x960)](_0x39c4c9);}}}}},Game_Enemy['prototype'][_0x482454(0x29c)]=function(){const _0x1abbdd=_0x482454;return this[_0x1abbdd(0x1aa)]||0x0;},Game_Enemy[_0x482454(0x61b)][_0x482454(0x846)]=function(){const _0x3e60d5=_0x482454;return this[_0x3e60d5(0x29c)]();},Game_Enemy[_0x482454(0x61b)][_0x482454(0x295)]=function(_0x1cea59){return this['attackAnimationId1']();},Game_Enemy[_0x482454(0x61b)][_0x482454(0x863)]=function(){const _0x2e2842=_0x482454;if(this['enemy']()[_0x2e2842(0x305)][_0x2e2842(0x445)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x2e2842(0x61b)][_0x2e2842(0x863)]['call'](this);},Game_Enemy['prototype'][_0x482454(0x57a)]=function(){const _0x795e80=_0x482454;if(this[_0x795e80(0x614)]()[_0x795e80(0x305)][_0x795e80(0x445)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x482454(0x61b)][_0x482454(0x35a)]=function(){const _0xd25fd7=_0x482454,_0x410347=[];for(const _0x415f79 of this['enemy']()[_0xd25fd7(0x66c)]){const _0x10dc5a=$dataSkills[_0x415f79[_0xd25fd7(0x5f2)]];if(_0x10dc5a&&!_0x410347[_0xd25fd7(0x4df)](_0x10dc5a))_0x410347['push'](_0x10dc5a);}return _0x410347;},Game_Enemy[_0x482454(0x61b)][_0x482454(0x695)]=function(){const _0x4ad1d6=_0x482454;let _0x1e428f='battleUIOffsetX';if(this[_0x4ad1d6(0x200)](_0x1e428f))return this[_0x4ad1d6(0x36d)][_0x1e428f];return this[_0x4ad1d6(0x36d)][_0x1e428f]=this[_0x4ad1d6(0x279)](this[_0x4ad1d6(0x614)]()),this['_cache'][_0x1e428f];},Game_Enemy['prototype']['battleUIOffsetY']=function(){const _0x1786e3=_0x482454;let _0x557480=_0x1786e3(0x221);if(this['checkCacheKey'](_0x557480))return this['_cache'][_0x557480];return this[_0x1786e3(0x36d)][_0x557480]=this[_0x1786e3(0x4c3)](this[_0x1786e3(0x614)]()),this['_cache'][_0x557480];},Game_Enemy[_0x482454(0x61b)][_0x482454(0x6e3)]=function(){const _0x21dad4=_0x482454;if(this[_0x21dad4(0x2b2)]!==undefined)return this[_0x21dad4(0x2b2)];return this[_0x21dad4(0x12f)](),this[_0x21dad4(0x2b2)];},Game_Enemy[_0x482454(0x61b)][_0x482454(0x718)]=function(){const _0x24646a=_0x482454;return this[_0x24646a(0x6e3)]()['name']!=='';},Game_Enemy[_0x482454(0x61b)][_0x482454(0x849)]=function(){const _0x2d2be2=_0x482454;return this[_0x2d2be2(0x6e3)]()[_0x2d2be2(0x7cb)];},Game_Enemy[_0x482454(0x61b)]['battlerSmoothImage']=function(){const _0x447c76=_0x482454;return this[_0x447c76(0x718)]()?VisuMZ['BattleCore'][_0x447c76(0x4ae)]['Actor'][_0x447c76(0x6c2)]:VisuMZ['BattleCore'][_0x447c76(0x4ae)][_0x447c76(0x8c8)][_0x447c76(0x6c2)];},Game_Enemy['prototype'][_0x482454(0x688)]=function(_0x8edc05){const _0x33f3ac=_0x482454;Game_Battler['prototype'][_0x33f3ac(0x688)][_0x33f3ac(0x2b9)](this,_0x8edc05);if(this['hasSvBattler']())this[_0x33f3ac(0x4cd)](_0x8edc05);},Game_Enemy[_0x482454(0x61b)]['performAttack']=function(){const _0x34d0a8=_0x482454,_0xa0d10e=this[_0x34d0a8(0x6e3)]()[_0x34d0a8(0x1ad)]||0x0,_0x3f9013=$dataSystem[_0x34d0a8(0x646)][_0xa0d10e];if(_0x3f9013){if(_0x3f9013[_0x34d0a8(0x415)]===0x0)this['requestMotion'](_0x34d0a8(0x265));else{if(_0x3f9013['type']===0x1)this[_0x34d0a8(0x6ca)]('swing');else _0x3f9013[_0x34d0a8(0x415)]===0x2&&this['requestMotion'](_0x34d0a8(0x116));}}},Game_Enemy['prototype'][_0x482454(0x883)]=function(){const _0x508f65=_0x482454,_0x2a79ea=this['svBattlerData']()[_0x508f65(0x1ad)]||0x0,_0x1e86ce=$dataSystem[_0x508f65(0x646)][_0x2a79ea];_0x1e86ce&&this[_0x508f65(0x49b)](_0x1e86ce['weaponImageId']);},Game_Enemy[_0x482454(0x61b)][_0x482454(0x156)]=function(){const _0x5c1e27=_0x482454,_0x5174c1=this[_0x5c1e27(0x6e3)]()[_0x5c1e27(0x1ad)]||0x0;return $dataSystem['attackMotions'][_0x5174c1];},Game_Enemy[_0x482454(0x61b)]['getAttackMotionSlot']=function(_0x1d511e){const _0x2d08c8=_0x482454;return this[_0x2d08c8(0x156)]();},Game_Enemy[_0x482454(0x61b)][_0x482454(0x3d8)]=function(){const _0x127580=_0x482454;Game_Battler['prototype'][_0x127580(0x3d8)][_0x127580(0x2b9)](this),this[_0x127580(0x638)]()&&this[_0x127580(0x718)]()&&this[_0x127580(0x6ca)](_0x127580(0x166)),SoundManager['playEnemyDamage']();},Game_Enemy[_0x482454(0x61b)][_0x482454(0x59a)]=function(){const _0x15ee6a=_0x482454;Game_Battler['prototype'][_0x15ee6a(0x59a)][_0x15ee6a(0x2b9)](this),this[_0x15ee6a(0x6ca)](_0x15ee6a(0x52a));},Game_Enemy['prototype'][_0x482454(0x1c3)]=function(){const _0x5bd57b=_0x482454;Game_Battler[_0x5bd57b(0x61b)][_0x5bd57b(0x1c3)]['call'](this),this['requestMotion'](_0x5bd57b(0x52a));},Game_Enemy[_0x482454(0x61b)][_0x482454(0x113)]=function(){const _0x5055bc=_0x482454;Game_Battler['prototype'][_0x5055bc(0x113)]['call'](this),this['performAttack']();},Game_Enemy['prototype'][_0x482454(0x276)]=function(){const _0x25a5cc=_0x482454;if(this[_0x25a5cc(0x718)]()){if(this[_0x25a5cc(0x5e7)]()>=0x1)return!![];return this[_0x25a5cc(0x6e3)]()[_0x25a5cc(0x3c2)];}else return!![];},Game_Enemy[_0x482454(0x61b)]['svBattlerAnchorX']=function(){const _0x13b16a=_0x482454;return this['svBattlerData']()[_0x13b16a(0x13c)];},Game_Enemy[_0x482454(0x61b)][_0x482454(0x3a6)]=function(){const _0xbb593e=_0x482454;return this['svBattlerData']()[_0xbb593e(0x1e0)];},Game_Enemy['prototype'][_0x482454(0x652)]=function(){const _0x1bc79d=_0x482454;return this[_0x1bc79d(0x6e3)]()[_0x1bc79d(0x3b1)];},VisuMZ['BattleCore'][_0x482454(0x85f)]=Game_Enemy[_0x482454(0x61b)][_0x482454(0x7ba)],Game_Enemy[_0x482454(0x61b)][_0x482454(0x7ba)]=function(_0xd43c70){const _0x401766=_0x482454;VisuMZ[_0x401766(0x16e)][_0x401766(0x85f)][_0x401766(0x2b9)](this,_0xd43c70),this[_0x401766(0x1f0)](),this[_0x401766(0x12f)]();const _0x59d961=this[_0x401766(0x1f6)]();if(_0x59d961)_0x59d961[_0x401766(0x17c)](this);},Game_Unit['prototype']['processBattleCoreJS']=function(_0x1efcc1){const _0x214130=_0x482454;for(const _0x179579 of this[_0x214130(0x6d8)]()){if(_0x179579)_0x179579[_0x214130(0x38d)](_0x1efcc1);}},Game_Unit[_0x482454(0x61b)][_0x482454(0x949)]=function(){const _0x19eb76=_0x482454,_0xf66c8a=this[_0x19eb76(0x7e3)]();return _0xf66c8a[Math['randomInt'](_0xf66c8a[_0x19eb76(0x403)])];},VisuMZ[_0x482454(0x16e)][_0x482454(0x194)]=Game_Party[_0x482454(0x61b)][_0x482454(0x6b7)],Game_Party[_0x482454(0x61b)]['addActor']=function(_0x471e00){const _0x59c8f9=_0x482454;VisuMZ['BattleCore'][_0x59c8f9(0x194)][_0x59c8f9(0x2b9)](this,_0x471e00),BattleManager['refreshStatusWindow']();},VisuMZ[_0x482454(0x16e)]['Game_Party_removeActor']=Game_Party['prototype'][_0x482454(0x662)],Game_Party[_0x482454(0x61b)]['removeActor']=function(_0x1dfe54){const _0x4cf30d=_0x482454;VisuMZ[_0x4cf30d(0x16e)][_0x4cf30d(0x67f)][_0x4cf30d(0x2b9)](this,_0x1dfe54),BattleManager[_0x4cf30d(0x2be)]();},VisuMZ[_0x482454(0x16e)]['Game_Troop_setup']=Game_Troop['prototype'][_0x482454(0x2b6)],Game_Troop[_0x482454(0x61b)][_0x482454(0x2b6)]=function(_0x5b36b2){const _0x4aa6de=_0x482454;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x4aa6de(0x774)](_0x5b36b2),VisuMZ[_0x4aa6de(0x16e)][_0x4aa6de(0x20b)][_0x4aa6de(0x2b9)](this,_0x5b36b2);},VisuMZ['BattleCore'][_0x482454(0x38f)]=Game_Troop['prototype'][_0x482454(0x7a8)],Game_Troop[_0x482454(0x61b)][_0x482454(0x7a8)]=function(){const _0x4b61e8=_0x482454;let _0x154bf4=VisuMZ[_0x4b61e8(0x16e)][_0x4b61e8(0x38f)]['call'](this);return this[_0x4b61e8(0x1ab)]&&(_0x154bf4*=this[_0x4b61e8(0x1ab)]()),Math[_0x4b61e8(0x80a)](_0x154bf4);},Game_Troop[_0x482454(0x61b)][_0x482454(0x1ab)]=function(){return 0x1;},VisuMZ[_0x482454(0x16e)][_0x482454(0x691)]=Game_Map[_0x482454(0x61b)][_0x482454(0x7ec)],Game_Map[_0x482454(0x61b)][_0x482454(0x7ec)]=function(){const _0x2d19ee=_0x482454;VisuMZ[_0x2d19ee(0x16e)][_0x2d19ee(0x691)]['call'](this),this[_0x2d19ee(0x734)]();},Game_Map[_0x482454(0x61b)][_0x482454(0x734)]=function(){const _0x1ced78=_0x482454;this[_0x1ced78(0x5f3)]={},this[_0x1ced78(0x3b0)]={};if(!$dataMap)return;const _0x34126a=$dataMap[_0x1ced78(0x305)];if(!_0x34126a)return;const _0x12b38c=_0x34126a[_0x1ced78(0x445)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x12b38c)for(const _0x1fa4b9 of _0x12b38c){_0x1fa4b9[_0x1ced78(0x445)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3a4034=Number(RegExp['$1']),_0x26efd3=Number(RegExp['$2']),_0x1f538d=_0x26efd3===0x1?this[_0x1ced78(0x5f3)]:this[_0x1ced78(0x3b0)],_0x3da515=String(RegExp['$3']);_0x1f538d[_0x3a4034]=_0x3da515;}},VisuMZ[_0x482454(0x16e)][_0x482454(0x3b8)]=Game_Map[_0x482454(0x61b)][_0x482454(0x6f6)],Game_Map[_0x482454(0x61b)][_0x482454(0x6f6)]=function(){const _0x3eea0a=_0x482454;if(!BattleManager[_0x3eea0a(0x754)]()){const _0x56d5eb=$gamePlayer[_0x3eea0a(0x46e)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3eea0a(0x5f3)]&&this[_0x3eea0a(0x5f3)][_0x56d5eb])return this[_0x3eea0a(0x5f3)][_0x56d5eb];}return VisuMZ[_0x3eea0a(0x16e)]['Game_Map_battleback1Name']['call'](this);},VisuMZ[_0x482454(0x16e)]['Game_Map_battleback2Name']=Game_Map[_0x482454(0x61b)][_0x482454(0x70b)],Game_Map[_0x482454(0x61b)][_0x482454(0x70b)]=function(){const _0xff6fea=_0x482454;if(!BattleManager[_0xff6fea(0x754)]()){const _0x3ef3e7=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0xff6fea(0x5f3)]&&this['_regionBattleback2'][_0x3ef3e7])return this[_0xff6fea(0x3b0)][_0x3ef3e7];}return VisuMZ[_0xff6fea(0x16e)][_0xff6fea(0x356)][_0xff6fea(0x2b9)](this);},VisuMZ[_0x482454(0x16e)]['Game_Map_encounterList']=Game_Map[_0x482454(0x61b)][_0x482454(0x58d)],Game_Map[_0x482454(0x61b)][_0x482454(0x58d)]=function(){const _0x255218=_0x482454;let _0x2917d6=JsonEx[_0x255218(0x627)](VisuMZ['BattleCore'][_0x255218(0x177)][_0x255218(0x2b9)](this));return VisuMZ[_0x255218(0x16e)][_0x255218(0x541)](_0x2917d6);},VisuMZ[_0x482454(0x16e)]['ShuffleArray']=function(_0x3a6eb6){const _0x3c60bc=_0x482454;var _0x46fbc2,_0x4071df,_0x3a38c1;for(_0x3a38c1=_0x3a6eb6[_0x3c60bc(0x403)]-0x1;_0x3a38c1>0x0;_0x3a38c1--){_0x46fbc2=Math['floor'](Math['random']()*(_0x3a38c1+0x1)),_0x4071df=_0x3a6eb6[_0x3a38c1],_0x3a6eb6[_0x3a38c1]=_0x3a6eb6[_0x46fbc2],_0x3a6eb6[_0x46fbc2]=_0x4071df;}return _0x3a6eb6;},VisuMZ['BattleCore'][_0x482454(0x869)]=Game_Interpreter[_0x482454(0x61b)]['command357'],Game_Interpreter[_0x482454(0x61b)][_0x482454(0x75a)]=function(_0x61f4b5){const _0x4a785f=_0x482454;return $gameTemp[_0x4a785f(0x181)](this),VisuMZ[_0x4a785f(0x16e)][_0x4a785f(0x869)][_0x4a785f(0x2b9)](this,_0x61f4b5);},VisuMZ['BattleCore'][_0x482454(0x781)]=Game_Interpreter['prototype'][_0x482454(0x6ef)],Game_Interpreter[_0x482454(0x61b)][_0x482454(0x6ef)]=function(){const _0xc8f141=_0x482454;if(SceneManager['isSceneBattle']())switch(this[_0xc8f141(0x6b2)]){case _0xc8f141(0x6db):if(Imported[_0xc8f141(0x80d)]){if($gameScreen[_0xc8f141(0x191)]()[_0xc8f141(0x7f5)]>0x0)return!![];this[_0xc8f141(0x6b2)]='';}break;case _0xc8f141(0x366):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x4b1)]())return!![];this[_0xc8f141(0x6b2)]='';break;case _0xc8f141(0x75c):if(Imported[_0xc8f141(0x80d)]){if($gameScreen['battleCameraData']()[_0xc8f141(0x27b)]>0x0)return!![];if($gameScreen[_0xc8f141(0x191)]()[_0xc8f141(0x1e5)]>0x0)return!![];this['_waitMode']='';}break;case _0xc8f141(0x2a3):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x22e)]())return!![];this[_0xc8f141(0x6b2)]='';break;case _0xc8f141(0x552):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x96b)]())return!![];this[_0xc8f141(0x6b2)]='';break;case _0xc8f141(0x505):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x4e6)]())return!![];this[_0xc8f141(0x6b2)]='';break;case'battlelog':if(BattleManager['_logWindow']['isBusy']())return!![];this[_0xc8f141(0x6b2)]='';break;case'battleMove':if(BattleManager['_spriteset'][_0xc8f141(0x7d5)]())return!![];this[_0xc8f141(0x6b2)]='';break;case _0xc8f141(0x4c1):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x730)]())return!![];this['_waitMode']='';break;case _0xc8f141(0x90e):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x68d)]())return!![];this['_waitMode']='';break;case _0xc8f141(0x3b9):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x8df)]())return!![];this[_0xc8f141(0x6b2)]='';break;case _0xc8f141(0x832):if(Imported[_0xc8f141(0x420)]){if(BattleManager['_spriteset'][_0xc8f141(0x31f)]())return!![];this[_0xc8f141(0x6b2)]='';}break;case _0xc8f141(0x480):if(Imported[_0xc8f141(0x80d)]){if($gameScreen[_0xc8f141(0x191)]()[_0xc8f141(0x917)]>0x0)return!![];this[_0xc8f141(0x6b2)]='';}break;case _0xc8f141(0x2d4):if(BattleManager[_0xc8f141(0x82e)][_0xc8f141(0x2ff)]())return!![];this[_0xc8f141(0x6b2)]='';break;case _0xc8f141(0x1a4):if(Imported[_0xc8f141(0x80d)]){if($gameScreen[_0xc8f141(0x191)]()[_0xc8f141(0x1f7)]>0x0)return!![];this[_0xc8f141(0x6b2)]='';}break;}return VisuMZ[_0xc8f141(0x16e)][_0xc8f141(0x781)]['call'](this);},VisuMZ['BattleCore'][_0x482454(0x748)]=Game_Interpreter['prototype'][_0x482454(0x847)],Game_Interpreter[_0x482454(0x61b)][_0x482454(0x847)]=function(_0x65973){const _0x1a3522=_0x482454;return!$gameParty['inBattle']()?this[_0x1a3522(0x873)](_0x65973):VisuMZ[_0x1a3522(0x16e)][_0x1a3522(0x748)][_0x1a3522(0x2b9)](this,_0x65973);},Game_Interpreter[_0x482454(0x61b)][_0x482454(0x485)]=function(_0x507b40){const _0x2cbb0d=_0x482454;return VisuMZ[_0x2cbb0d(0x16e)]['Game_Interpreter_command301']['call'](this,_0x507b40),BattleManager[_0x2cbb0d(0x678)](_0x25f562=>{const _0x2af554=_0x2cbb0d;this[_0x2af554(0x6a7)][this[_0x2af554(0x312)]]=_0x25f562;}),!![];},VisuMZ['BattleCore'][_0x482454(0x5a3)]=function(_0x1594c1){const _0x1a0912=_0x482454,_0xe85e9b=$dataCommonEvents[_0x1594c1];if(!_0xe85e9b)return![];if(_0xe85e9b[_0x1a0912(0x1fa)][_0x1a0912(0x403)]<=0x1)return![];return!![];},Game_Interpreter[_0x482454(0x61b)][_0x482454(0x873)]=function(_0x44fd20){const _0x478754=_0x482454,_0x81b13a=VisuMZ[_0x478754(0x16e)][_0x478754(0x4ae)][_0x478754(0x573)],_0x5528d5=_0x81b13a['BattleStartEvent'],_0x2b2596=$dataCommonEvents[_0x5528d5];if(_0x2b2596&&VisuMZ[_0x478754(0x16e)][_0x478754(0x5a3)](_0x5528d5)){const _0x1ee3f4=this[_0x478754(0x4cb)]()?this['_eventId']:0x0,_0x720f6b=_0x2b2596[_0x478754(0x1fa)];this[_0x478754(0x564)](_0x720f6b,_0x1ee3f4),this['_list']=JsonEx[_0x478754(0x627)](this['_list']);const _0xccebf5={'code':0xbc3,'indent':this[_0x478754(0x312)],'parameters':JsonEx[_0x478754(0x627)](_0x44fd20)};return this[_0x478754(0x81f)][_0x478754(0x788)](this[_0x478754(0x470)]+0x1,0x0,_0xccebf5),!![];}else return VisuMZ[_0x478754(0x16e)][_0x478754(0x748)]['call'](this,_0x44fd20);},VisuMZ[_0x482454(0x16e)][_0x482454(0x332)]=BattleManager['onEncounter'],BattleManager[_0x482454(0x621)]=function(){const _0x2e1cdc=_0x482454;VisuMZ[_0x2e1cdc(0x16e)]['BattleManager_onEncounter']['call'](this),this['onEncounterBattleCore']();},BattleManager[_0x482454(0x83e)]=function(){const _0x3fd8e9=_0x482454,_0xe3e5bb=VisuMZ[_0x3fd8e9(0x16e)]['Settings'][_0x3fd8e9(0x573)],_0x1370d1=_0xe3e5bb[_0x3fd8e9(0x2af)];_0x1370d1&&VisuMZ[_0x3fd8e9(0x16e)]['CheckMapBattleEventValid'](_0x1370d1)&&(this[_0x3fd8e9(0x4f3)]=!![],$gameTemp[_0x3fd8e9(0x4e5)](_0xe3e5bb[_0x3fd8e9(0x2af)]),$gameMap[_0x3fd8e9(0x42d)](),$gameMap[_0x3fd8e9(0x670)][_0x3fd8e9(0x190)]=!![]),_0xe3e5bb[_0x3fd8e9(0x2c0)]>0x0&&(this['_canLose']=!![]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x951)]=Scene_Map[_0x482454(0x61b)][_0x482454(0x933)],Scene_Map[_0x482454(0x61b)][_0x482454(0x933)]=function(){const _0x401e35=_0x482454;if(BattleManager[_0x401e35(0x4f3)])return;VisuMZ['BattleCore'][_0x401e35(0x951)][_0x401e35(0x2b9)](this);},VisuMZ['BattleCore'][_0x482454(0x68c)]=Scene_Map['prototype'][_0x482454(0x4af)],Scene_Map[_0x482454(0x61b)]['launchBattle']=function(){const _0x40c931=_0x482454;BattleManager[_0x40c931(0x4f3)]?this[_0x40c931(0x48c)]():VisuMZ[_0x40c931(0x16e)][_0x40c931(0x68c)][_0x40c931(0x2b9)](this);},Scene_Map[_0x482454(0x61b)]['battleCorePreBattleCommonEvent']=function(){const _0x5682e1=_0x482454;this[_0x5682e1(0x342)]=!![];},VisuMZ[_0x482454(0x16e)][_0x482454(0x56f)]=SceneManager[_0x482454(0xee)],SceneManager[_0x482454(0xee)]=function(){const _0x5ced69=_0x482454;if(BattleManager['_battleCoreBattleStartEvent'])return![];return VisuMZ[_0x5ced69(0x16e)][_0x5ced69(0x56f)][_0x5ced69(0x2b9)](this);},VisuMZ['BattleCore']['Game_Interpreter_terminate']=Game_Interpreter[_0x482454(0x61b)][_0x482454(0x7f2)],Game_Interpreter[_0x482454(0x61b)][_0x482454(0x7f2)]=function(){const _0x45c50e=_0x482454;VisuMZ[_0x45c50e(0x16e)][_0x45c50e(0x591)]['call'](this),this[_0x45c50e(0x190)]&&(this['_preBattleCommonEvent']=undefined,SceneManager[_0x45c50e(0x938)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x482454(0x61b)][_0x482454(0x7f9)]=function(){const _0x360bcd=_0x482454;BattleManager[_0x360bcd(0x4f3)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x360bcd(0x440)]();},VisuMZ['BattleCore']['Scene_Map_initializeAfter']=Scene_Map['prototype']['initialize'],Scene_Map['prototype'][_0x482454(0x63a)]=function(){const _0x319340=_0x482454;VisuMZ[_0x319340(0x16e)][_0x319340(0x354)][_0x319340(0x2b9)](this),BattleManager[_0x319340(0x93d)]&&(this[_0x319340(0x342)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x482454(0x16e)][_0x482454(0x60a)]=Scene_Map['prototype'][_0x482454(0x63a)],Scene_Map[_0x482454(0x61b)][_0x482454(0x63a)]=function(){const _0x411df2=_0x482454;VisuMZ[_0x411df2(0x16e)][_0x411df2(0x60a)]['call'](this),$gameTemp[_0x411df2(0x126)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x31c)]=Scene_ItemBase['prototype']['applyItem'],Scene_ItemBase[_0x482454(0x61b)]['applyItem']=function(){const _0x2ec650=_0x482454;VisuMZ[_0x2ec650(0x16e)][_0x2ec650(0x31c)]['call'](this);if(this['item']()[_0x2ec650(0x305)][_0x2ec650(0x445)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this['item']()[_0x2ec650(0x305)][_0x2ec650(0x445)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x2ec650(0x6a2)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x2ec650(0x94e)]())&&($gameTemp[_0x2ec650(0x6a2)]=[]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x7fd)]=Scene_Options[_0x482454(0x61b)][_0x482454(0x7b7)],Scene_Options[_0x482454(0x61b)][_0x482454(0x7b7)]=function(){const _0x3aec4e=_0x482454;let _0x13f7c7=VisuMZ[_0x3aec4e(0x16e)][_0x3aec4e(0x7fd)][_0x3aec4e(0x2b9)](this);const _0xeb1993=VisuMZ[_0x3aec4e(0x16e)][_0x3aec4e(0x4ae)];if(_0xeb1993[_0x3aec4e(0x6c4)][_0x3aec4e(0x6f2)]&&_0xeb1993[_0x3aec4e(0x6c4)]['AdjustRect'])_0x13f7c7+=0x2;if(_0xeb1993[_0x3aec4e(0x208)][_0x3aec4e(0x6f2)]&&_0xeb1993['HpGauge'][_0x3aec4e(0x95e)])_0x13f7c7+=0x1;return _0x13f7c7;},VisuMZ[_0x482454(0x16e)][_0x482454(0xeb)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x63a)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x63a)]=function(){const _0x4bfa2f=_0x482454;VisuMZ[_0x4bfa2f(0x16e)][_0x4bfa2f(0xeb)][_0x4bfa2f(0x2b9)](this),this[_0x4bfa2f(0x334)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x8ec)]=Scene_Battle[_0x482454(0x61b)]['start'],Scene_Battle['prototype']['start']=function(){const _0x21c1fa=_0x482454;SceneManager[_0x21c1fa(0x617)]()?(Scene_Message[_0x21c1fa(0x61b)][_0x21c1fa(0x4a7)][_0x21c1fa(0x2b9)](this),this[_0x21c1fa(0x82e)]&&this[_0x21c1fa(0x82e)][_0x21c1fa(0x2fa)](),BattleManager[_0x21c1fa(0x6a5)]&&BattleManager[_0x21c1fa(0x7c3)]()):VisuMZ['BattleCore'][_0x21c1fa(0x8ec)][_0x21c1fa(0x2b9)](this);},VisuMZ['BattleCore'][_0x482454(0x41b)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x440)],Scene_Battle['prototype'][_0x482454(0x440)]=function(){const _0x4ed202=_0x482454;SceneManager[_0x4ed202(0x925)]()?Scene_Message[_0x4ed202(0x61b)][_0x4ed202(0x440)][_0x4ed202(0x2b9)](this):VisuMZ[_0x4ed202(0x16e)][_0x4ed202(0x41b)][_0x4ed202(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x458)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x7f2)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x7f2)]=function(){const _0x2df629=_0x482454;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x2df629(0x61b)]['terminate'][_0x2df629(0x2b9)](this):VisuMZ[_0x2df629(0x16e)][_0x2df629(0x458)]['call'](this),this[_0x2df629(0x334)]();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x4bb)]=function(){const _0x1cf1fc=_0x482454;if(ConfigManager[_0x1cf1fc(0x512)]&&ConfigManager[_0x1cf1fc(0x3e0)]!==undefined)return ConfigManager['uiInputPosition'];else{if(this[_0x1cf1fc(0x2cb)]()===_0x1cf1fc(0x3a8))return![];else{return Scene_Message[_0x1cf1fc(0x61b)]['isRightInputMode'][_0x1cf1fc(0x2b9)](this);;}}},VisuMZ[_0x482454(0x16e)][_0x482454(0x791)]=Scene_Battle['prototype'][_0x482454(0x78f)],Scene_Battle['prototype']['createAllWindows']=function(){const _0x5c3adc=_0x482454;this[_0x5c3adc(0x764)](),VisuMZ[_0x5c3adc(0x16e)][_0x5c3adc(0x791)][_0x5c3adc(0x2b9)](this),this[_0x5c3adc(0x612)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x262)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x39f)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x39f)]=function(){const _0x2b51d5=_0x482454;VisuMZ[_0x2b51d5(0x16e)][_0x2b51d5(0x262)]['call'](this),this[_0x2b51d5(0x2cb)]()===_0x2b51d5(0x3a8)&&this['repositionCancelButtonBorderStyle']();},Scene_Battle[_0x482454(0x61b)]['setVisibleUI']=function(_0x17fe13){const _0x163585=_0x482454;_0x17fe13?(this[_0x163585(0x42f)]['x']=(Graphics[_0x163585(0x913)]-Graphics[_0x163585(0x36e)])/0x2,this[_0x163585(0x42f)]['y']=(Graphics[_0x163585(0x4c6)]-Graphics['boxHeight'])/0x2):(this[_0x163585(0x42f)]['x']=Graphics[_0x163585(0x913)]*0xa,this[_0x163585(0x42f)]['y']=Graphics[_0x163585(0x4c6)]*0xa);},VisuMZ[_0x482454(0x16e)]['Scene_Battle_selectNextCommand']=Scene_Battle[_0x482454(0x61b)]['selectNextCommand'],Scene_Battle[_0x482454(0x61b)][_0x482454(0x219)]=function(){const _0x22fef0=_0x482454,_0x32b047=BattleManager[_0x22fef0(0x57b)]();VisuMZ['BattleCore'][_0x22fef0(0x51c)]['call'](this);if(_0x32b047){if(_0x32b047===BattleManager[_0x22fef0(0x57b)]())return;if(_0x32b047===BattleManager['_subject'])return;if(_0x32b047[_0x22fef0(0x1f6)]())_0x32b047[_0x22fef0(0x1f6)]()[_0x22fef0(0x747)]();}},VisuMZ[_0x482454(0x16e)][_0x482454(0x605)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x4b2)],Scene_Battle['prototype'][_0x482454(0x4b2)]=function(){const _0x1e6b00=_0x482454,_0x356776=BattleManager[_0x1e6b00(0x57b)]();if(_0x356776&&_0x356776[_0x1e6b00(0x1f6)])_0x356776[_0x1e6b00(0x1f6)]()[_0x1e6b00(0x747)]();VisuMZ['BattleCore'][_0x1e6b00(0x605)][_0x1e6b00(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0xe5)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x278)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x278)]=function(){const _0x34cc53=_0x482454;if(VisuMZ['BattleCore'][_0x34cc53(0x4ae)]['BattleLog'][_0x34cc53(0x5a7)])return VisuMZ[_0x34cc53(0x16e)][_0x34cc53(0x4ae)][_0x34cc53(0x533)]['BattleLogRectJS'][_0x34cc53(0x2b9)](this);return VisuMZ[_0x34cc53(0x16e)][_0x34cc53(0xe5)][_0x34cc53(0x2b9)](this);},VisuMZ[_0x482454(0x16e)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x482454(0x61b)][_0x482454(0x168)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x168)]=function(){const _0x4b5d90=_0x482454;VisuMZ[_0x4b5d90(0x16e)][_0x4b5d90(0x582)]['call'](this),this[_0x4b5d90(0x615)]();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x615)]=function(){const _0x307c8e=_0x482454,_0x5f36a7=this['_partyCommandWindow'];_0x5f36a7[_0x307c8e(0x75b)](_0x307c8e(0x4be),this[_0x307c8e(0x855)][_0x307c8e(0x7be)](this)),_0x5f36a7['setHandler'](_0x307c8e(0x11c),this['commandOptions']['bind'](this));const _0x4d2194=this[_0x307c8e(0x2cb)]();switch(_0x4d2194){case'xp':case _0x307c8e(0x17a):return this[_0x307c8e(0x26d)][_0x307c8e(0x4f1)](0x1);break;}},Scene_Battle['prototype'][_0x482454(0x855)]=function(){const _0x17f315=_0x482454;BattleManager[_0x17f315(0x163)]=!![],$gameParty[_0x17f315(0x251)](),this['selectNextCommand'](),BattleManager[_0x17f315(0x95b)]()&&(BattleManager['_inputting']=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x399c15=_0x482454;this[_0x399c15(0x442)]()?(this[_0x399c15(0x3c6)]=!![],this[_0x399c15(0x3bc)][_0x399c15(0x32d)](_0x399c15(0x908),VisuMZ[_0x399c15(0x16e)][_0x399c15(0x4ae)]['PartyCmd']['ActiveTpbOptionsMessage'])):this['callOptions']();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x442)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x2df)]=function(){const _0x89a392=_0x482454;this['_callSceneOptions']=![],this['_spriteset'][_0x89a392(0x2fa)](),this[_0x89a392(0x42f)][_0x89a392(0x47d)]=![];if(BattleManager[_0x89a392(0x754)]())($dataSystem[_0x89a392(0x6f6)]||$dataSystem['battleback2Name'])&&SceneManager['snapForBackground']();else($gameMap[_0x89a392(0x6f6)]()||$gameMap[_0x89a392(0x70b)]())&&SceneManager[_0x89a392(0x302)]();SceneManager[_0x89a392(0x32d)](Scene_Options),BattleManager['isTpb']()&&(BattleManager['_tpbSceneChangeCacheActor']=BattleManager[_0x89a392(0x57b)]());},VisuMZ[_0x482454(0x16e)]['Scene_Battle_updateBattleProcess']=Scene_Battle[_0x482454(0x61b)][_0x482454(0x122)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x122)]=function(){const _0x31d1db=_0x482454;VisuMZ[_0x31d1db(0x16e)]['Scene_Battle_updateBattleProcess'][_0x31d1db(0x2b9)](this);if(this['_callSceneOptions']&&!BattleManager[_0x31d1db(0x57d)])this[_0x31d1db(0x2df)]();this[_0x31d1db(0x3df)]();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x612)]=function(){const _0x129d05=_0x482454,_0x46b181=this[_0x129d05(0x5d1)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x46b181),this['_autoBattleWindow']['hide'](),this[_0x129d05(0x83b)](this[_0x129d05(0x1da)]);},Scene_Battle[_0x482454(0x61b)]['autoBattleWindowRect']=function(){const _0x143bec=_0x482454;return VisuMZ[_0x143bec(0x16e)][_0x143bec(0x4ae)][_0x143bec(0x6c4)]['AutoBattleRect'][_0x143bec(0x2b9)](this);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x334)]=function(){this['_onceParallelInterpreters']=[];},Scene_Battle['prototype'][_0x482454(0x3df)]=function(){const _0x4026db=_0x482454;if(!this[_0x4026db(0x328)])return;for(const _0x104ad3 of this[_0x4026db(0x328)]){_0x104ad3&&_0x104ad3['update']();}},Scene_Battle[_0x482454(0x61b)][_0x482454(0x957)]=function(_0x4bb801){const _0xb07e54=_0x482454,_0xb37659=$dataCommonEvents[_0x4bb801];if(!_0xb37659)return;const _0x5795de=new Game_BattleOnceParallelInterpreter();this[_0xb07e54(0x694)](_0x5795de),_0x5795de[_0xb07e54(0x47f)](_0x4bb801);},Scene_Battle['prototype'][_0x482454(0x694)]=function(_0x1cacf3){const _0x1f9fd7=_0x482454;this[_0x1f9fd7(0x328)]=this[_0x1f9fd7(0x328)]||[],this[_0x1f9fd7(0x328)][_0x1f9fd7(0x32d)](_0x1cacf3);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x4dd)]=function(_0x2b5f2c){const _0x4dbb98=_0x482454;this[_0x4dbb98(0x328)]=this['_onceParallelInterpreters']||[],this[_0x4dbb98(0x328)][_0x4dbb98(0x350)](_0x2b5f2c);};function Game_BattleOnceParallelInterpreter(){const _0x2c1ef5=_0x482454;this[_0x2c1ef5(0x63a)](...arguments);}Game_BattleOnceParallelInterpreter[_0x482454(0x61b)]=Object[_0x482454(0x665)](Game_Interpreter[_0x482454(0x61b)]),Game_BattleOnceParallelInterpreter[_0x482454(0x61b)][_0x482454(0x7cc)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x482454(0x61b)]['setCommonEvent']=function(_0xa4f93){const _0x124324=_0x482454,_0x2aa0fb=$dataCommonEvents[_0xa4f93];_0x2aa0fb?this[_0x124324(0x2b6)](_0x2aa0fb['list'],0x0):this[_0x124324(0x7f2)]();},Game_BattleOnceParallelInterpreter[_0x482454(0x61b)][_0x482454(0x7f2)]=function(){const _0x526c63=_0x482454;if(!SceneManager[_0x526c63(0x1f8)]())return;SceneManager['_scene'][_0x526c63(0x4dd)](this),Game_Interpreter[_0x526c63(0x61b)]['terminate'][_0x526c63(0x2b9)](this);},Scene_Battle[_0x482454(0x61b)]['isPartyCommandWindowDisabled']=function(){const _0x1a46bb=_0x482454;return VisuMZ[_0x1a46bb(0x16e)]['Settings'][_0x1a46bb(0x8ee)][_0x1a46bb(0x760)];},VisuMZ[_0x482454(0x16e)][_0x482454(0x2d6)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x32c)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x32c)]=function(){const _0x2d3952=_0x482454;this[_0x2d3952(0x8c1)]()?this[_0x2d3952(0x26c)]():VisuMZ[_0x2d3952(0x16e)][_0x2d3952(0x2d6)][_0x2d3952(0x2b9)](this);},Scene_Battle[_0x482454(0x61b)]['onDisabledPartyCommandSelection']=function(){const _0x4dd83f=_0x482454;if(BattleManager[_0x4dd83f(0x217)]())this[_0x4dd83f(0x219)]();else BattleManager[_0x4dd83f(0x95b)]()&&VisuMZ[_0x4dd83f(0x16e)][_0x4dd83f(0x2d6)][_0x4dd83f(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x6ff)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x16c)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x16c)]=function(){const _0x676ee1=_0x482454;BattleManager[_0x676ee1(0x95b)]()?(this[_0x676ee1(0x8e5)](),this[_0x676ee1(0x498)]()):VisuMZ[_0x676ee1(0x16e)][_0x676ee1(0x6ff)][_0x676ee1(0x2b9)](this);},Scene_Battle['prototype'][_0x482454(0x8e5)]=function(){const _0x273b4e=_0x482454;if(!VisuMZ[_0x273b4e(0x16e)][_0x273b4e(0x4db)])return;if(Imported[_0x273b4e(0x6eb)]&&BattleManager[_0x273b4e(0x942)]())return;const _0x156830=$gameParty[_0x273b4e(0x7e3)]()[_0x273b4e(0x19d)](_0x5d4c1d=>_0x5d4c1d['isTpbCharged']()&&_0x5d4c1d[_0x273b4e(0x289)]());BattleManager[_0x273b4e(0x7b5)]=_0x156830[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x273b4e(0x7b5)]['setActionState']('inputting');},VisuMZ[_0x482454(0x16e)][_0x482454(0x324)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x197)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x197)]=function(){const _0x47b5ae=_0x482454;VisuMZ[_0x47b5ae(0x16e)][_0x47b5ae(0x324)][_0x47b5ae(0x2b9)](this),this[_0x47b5ae(0x900)]();},Scene_Battle[_0x482454(0x61b)]['createActorCommandWindowBattleCore']=function(){const _0x236660=_0x482454,_0x151cf9=this[_0x236660(0x8a6)];_0x151cf9[_0x236660(0x75b)](_0x236660(0x69c),this[_0x236660(0x6fb)][_0x236660(0x7be)](this)),_0x151cf9['setHandler'](_0x236660(0x4be),this[_0x236660(0x105)]['bind'](this)),_0x151cf9[_0x236660(0x75b)](_0x236660(0x18c),this[_0x236660(0x5e3)][_0x236660(0x7be)](this)),BattleManager[_0x236660(0x95b)]()&&(this[_0x236660(0x8c1)]()?delete _0x151cf9[_0x236660(0x128)][_0x236660(0x212)]:_0x151cf9['setHandler'](_0x236660(0x212),this[_0x236660(0x4a5)][_0x236660(0x7be)](this)));},Scene_Battle[_0x482454(0x61b)][_0x482454(0x6fb)]=function(){const _0x443eec=_0x482454;this[_0x443eec(0x207)]();},Scene_Battle[_0x482454(0x61b)]['actorCommandAutoBattle']=function(){const _0x293b3f=_0x482454;BattleManager[_0x293b3f(0x57b)]()['makeAutoBattleActions'](),BattleManager[_0x293b3f(0x86a)](),BattleManager['selectNextActor'](),this[_0x293b3f(0x5c3)]();},Scene_Battle['prototype'][_0x482454(0x5e3)]=function(){const _0x58a086=_0x482454,_0x6ff4e6=BattleManager[_0x58a086(0x548)]();_0x6ff4e6[_0x58a086(0x494)](this[_0x58a086(0x8a6)][_0x58a086(0x637)]()),this[_0x58a086(0x1ca)]();},Scene_Battle['prototype'][_0x482454(0x4a5)]=function(){const _0x1f7083=_0x482454;this[_0x1f7083(0x545)]()?this[_0x1f7083(0x51e)]():this[_0x1f7083(0x22d)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x4db)]=![],Scene_Battle['prototype'][_0x482454(0x545)]=function(){const _0x422640=_0x482454;if(Imported[_0x422640(0x6eb)]&&BattleManager['isCTB']())return![];else{if(!VisuMZ['BattleCore'][_0x422640(0x4db)])return![];const _0x5662a2=$gameParty[_0x422640(0x7e3)]()[_0x422640(0x19d)](_0x5200b0=>_0x5200b0['isTpbCharged']()&&_0x5200b0[_0x422640(0x289)]());return _0x5662a2[_0x422640(0x403)]>0x0&&BattleManager['actor']()!==_0x5662a2[_0x5662a2[_0x422640(0x403)]-0x1];}},Scene_Battle[_0x482454(0x61b)]['performTpbActiveCheckSwitch']=function(){const _0x4f5df7=_0x482454,_0x75ff2d=BattleManager[_0x4f5df7(0x57b)](),_0x356adf=_0x75ff2d['battler']();if(_0x356adf)_0x356adf[_0x4f5df7(0x747)]();const _0xcf8b7b=$gameParty['aliveMembers']()[_0x4f5df7(0x19d)](_0x4edd4d=>_0x4edd4d[_0x4f5df7(0x127)]()&&_0x4edd4d[_0x4f5df7(0x289)]()),_0x2ab0da=_0xcf8b7b['indexOf'](_0x75ff2d),_0x37096c=_0xcf8b7b[_0x2ab0da+0x1];BattleManager[_0x4f5df7(0x7b5)]=_0x37096c||null;if(_0x37096c)_0x37096c[_0x4f5df7(0x50b)]('inputting');_0x75ff2d[_0x4f5df7(0x50b)](_0x4f5df7(0x386)),this[_0x4f5df7(0x5c3)]();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x22d)]=function(){const _0x51b859=_0x482454;this[_0x51b859(0x26d)][_0x51b859(0x2b6)](),this['_actorCommandWindow'][_0x51b859(0x5ba)]();if(!VisuMZ['BattleCore'][_0x51b859(0x4db)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x51b859(0x942)]())return;if(BattleManager[_0x51b859(0x7b5)]){BattleManager[_0x51b859(0x7b5)][_0x51b859(0x50b)](_0x51b859(0x386));const _0x33f201=BattleManager['_currentActor']['battler']();if(_0x33f201)_0x33f201[_0x51b859(0x747)]();}BattleManager[_0x51b859(0x7b5)]=null;},VisuMZ['BattleCore'][_0x482454(0x692)]=Scene_Battle['prototype']['createHelpWindow'],Scene_Battle[_0x482454(0x61b)][_0x482454(0x59c)]=function(){const _0x52e0e3=_0x482454;VisuMZ[_0x52e0e3(0x16e)][_0x52e0e3(0x692)]['call'](this),this[_0x52e0e3(0x91b)]();},Scene_Battle[_0x482454(0x61b)]['createHelpWindowBattleCore']=function(){const _0x5cac9e=_0x482454;this['_actorCommandWindow'][_0x5cac9e(0x175)](this[_0x5cac9e(0x466)]),this['_partyCommandWindow'][_0x5cac9e(0x175)](this['_helpWindow']);},Scene_Battle[_0x482454(0x61b)]['battleLayoutStyle']=function(){const _0x290c0a=_0x482454;if($gameTemp[_0x290c0a(0x915)]!==undefined)return $gameTemp[_0x290c0a(0x915)];if(this['_battleLayoutStyle'])return this[_0x290c0a(0x803)];return this[_0x290c0a(0x803)]=VisuMZ[_0x290c0a(0x16e)][_0x290c0a(0x4ae)][_0x290c0a(0x738)]['Style'][_0x290c0a(0x61c)]()['trim'](),this[_0x290c0a(0x803)]===_0x290c0a(0x67e)&&!Imported[_0x290c0a(0x13a)]&&(this[_0x290c0a(0x803)]=_0x290c0a(0x609)),this[_0x290c0a(0x803)];},VisuMZ['BattleCore'][_0x482454(0x751)]=Scene_Battle[_0x482454(0x61b)]['windowAreaHeight'],Scene_Battle['prototype'][_0x482454(0x20d)]=function(){const _0x1ecf63=_0x482454,_0x55552a=this[_0x1ecf63(0x2cb)]();switch(_0x55552a){case _0x1ecf63(0x1fa):return this['calcWindowHeight'](Math[_0x1ecf63(0x1e3)](0x1,$gameParty[_0x1ecf63(0x3ec)]()),!![]);break;default:return VisuMZ[_0x1ecf63(0x16e)]['Scene_Battle_windowAreaHeight']['call'](this);break;}},VisuMZ['BattleCore'][_0x482454(0x46d)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0xe2)],Scene_Battle[_0x482454(0x61b)]['helpWindowRect']=function(){const _0x181590=_0x482454,_0x48ad7e=this['battleLayoutStyle']();switch(_0x48ad7e){case _0x181590(0x3a8):return this[_0x181590(0x27f)]();break;case _0x181590(0x609):case'list':case'xp':case _0x181590(0x17a):default:return VisuMZ[_0x181590(0x16e)]['Scene_Battle_helpWindowRect'][_0x181590(0x2b9)](this);break;}},Scene_Battle['prototype'][_0x482454(0x673)]=function(){const _0x23615f=_0x482454,_0xd6a1dc=this['battleLayoutStyle']();switch(_0xd6a1dc){case'xp':case _0x23615f(0x17a):return this[_0x23615f(0x365)]();break;case _0x23615f(0x3a8):return this[_0x23615f(0x372)]();break;case'default':case _0x23615f(0x1fa):default:return this[_0x23615f(0x8b3)]();break;}},VisuMZ['BattleCore'][_0x482454(0x92c)]=Scene_Battle['prototype'][_0x482454(0x3da)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x3da)]=function(){const _0x52a1ea=_0x482454,_0x3113dc=this['battleLayoutStyle']();switch(_0x3113dc){case'xp':case _0x52a1ea(0x17a):return this['partyCommandWindowRectXPStyle']();break;case _0x52a1ea(0x3a8):return this[_0x52a1ea(0x4d7)]();case _0x52a1ea(0x609):case _0x52a1ea(0x1fa):default:return this[_0x52a1ea(0x412)]();break;}},Scene_Battle[_0x482454(0x61b)]['partyCommandWindowRectDefaultStyle']=function(){const _0x5487f6=_0x482454,_0x5e1797=VisuMZ[_0x5487f6(0x16e)][_0x5487f6(0x4ae)]['BattleLayout'],_0x349bce=_0x5e1797[_0x5487f6(0x517)]||0xc0,_0x4c9a4b=this[_0x5487f6(0x20d)](),_0x1e90d2=this[_0x5487f6(0x4bb)]()?Graphics[_0x5487f6(0x36e)]-_0x349bce:0x0,_0x1b017c=Graphics[_0x5487f6(0x69e)]-_0x4c9a4b;return new Rectangle(_0x1e90d2,_0x1b017c,_0x349bce,_0x4c9a4b);},Scene_Battle['prototype'][_0x482454(0x2b8)]=function(){return this['partyCommandWindowRect']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x5b7)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x7b3)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x7b3)]=function(){const _0x305e94=_0x482454,_0x15ce0f=this['battleLayoutStyle']();switch(_0x15ce0f){case'xp':case _0x305e94(0x17a):case'border':break;case _0x305e94(0x609):case _0x305e94(0x1fa):default:VisuMZ[_0x305e94(0x16e)][_0x305e94(0x5b7)]['call'](this);break;}},VisuMZ['BattleCore'][_0x482454(0x868)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x636)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x636)]=function(){const _0x5bfda8=_0x482454;VisuMZ[_0x5bfda8(0x16e)][_0x5bfda8(0x868)][_0x5bfda8(0x2b9)](this),this[_0x5bfda8(0x5a9)]();},VisuMZ['BattleCore'][_0x482454(0x56b)]=Scene_Battle['prototype']['startEnemySelection'],Scene_Battle[_0x482454(0x61b)][_0x482454(0x4ca)]=function(){const _0x21ed06=_0x482454;VisuMZ[_0x21ed06(0x16e)]['Scene_Battle_startEnemySelection']['call'](this),this[_0x21ed06(0x1c2)][_0x21ed06(0x4b4)](),this[_0x21ed06(0x5a9)]();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x5a9)]=function(){const _0xba880b=_0x482454,_0x366a32=this[_0xba880b(0x2cb)]();['xp',_0xba880b(0x17a),'border'][_0xba880b(0x4df)](_0x366a32)&&this[_0xba880b(0x8a6)][_0xba880b(0x5ba)](),(_0x366a32===_0xba880b(0x3a8)||this[_0xba880b(0x4ef)]())&&(this['_skillWindow']['close'](),this[_0xba880b(0x39d)][_0xba880b(0x5ba)]());},VisuMZ['BattleCore']['Scene_Battle_onActorOk']=Scene_Battle['prototype'][_0x482454(0x8bf)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x8bf)]=function(){const _0x4a248a=_0x482454;VisuMZ[_0x4a248a(0x16e)][_0x4a248a(0x80b)]['call'](this),this[_0x4a248a(0x844)]();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x2cc)]=function(){const _0x4e59ed=_0x482454;return[_0x4e59ed(0x31e),_0x4e59ed(0x486),_0x4e59ed(0x18c)]['includes'](this['_actorCommandWindow']['currentSymbol']());},VisuMZ[_0x482454(0x16e)][_0x482454(0x71b)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x7df)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x7df)]=function(){const _0x1a461a=_0x482454;this[_0x1a461a(0x2cc)]()?(this[_0x1a461a(0x63d)][_0x1a461a(0x1f3)](),this[_0x1a461a(0x95d)]['hide'](),this['_actorCommandWindow'][_0x1a461a(0x864)]()):VisuMZ[_0x1a461a(0x16e)][_0x1a461a(0x71b)][_0x1a461a(0x2b9)](this),this['cancelTargetSelectionVisibility']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x2e5)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x5c5)],Scene_Battle['prototype'][_0x482454(0x5c5)]=function(){const _0x69d2a5=_0x482454;VisuMZ[_0x69d2a5(0x16e)]['Scene_Battle_onEnemyOk'][_0x69d2a5(0x2b9)](this),this[_0x69d2a5(0x844)]();},VisuMZ[_0x482454(0x16e)]['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x482454(0x61b)][_0x482454(0x3c8)],Scene_Battle[_0x482454(0x61b)]['onEnemyCancel']=function(){const _0x946871=_0x482454;this['isNonSubmenuCancel']()?(this['_statusWindow'][_0x946871(0x1f3)](),this[_0x946871(0x1c2)][_0x946871(0x91e)](),this[_0x946871(0x8a6)][_0x946871(0x864)]()):VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel'][_0x946871(0x2b9)](this),this['cancelTargetSelectionVisibility']();},Scene_Battle['prototype'][_0x482454(0x844)]=function(){const _0xfc9ea2=_0x482454,_0x9ccac1=this[_0xfc9ea2(0x2cb)]();(_0x9ccac1===_0xfc9ea2(0x3a8)||this[_0xfc9ea2(0x4ef)]())&&(this[_0xfc9ea2(0x867)]['open'](),this[_0xfc9ea2(0x867)][_0xfc9ea2(0x2e7)]&&this[_0xfc9ea2(0x867)][_0xfc9ea2(0x1f3)](),this[_0xfc9ea2(0x39d)][_0xfc9ea2(0x520)](),this['_itemWindow'][_0xfc9ea2(0x2e7)]&&this[_0xfc9ea2(0x39d)][_0xfc9ea2(0x1f3)]());},Scene_Battle[_0x482454(0x61b)]['cancelTargetSelectionVisibility']=function(){const _0x5e6613=_0x482454,_0x3e24c1=this[_0x5e6613(0x2cb)]();['xp',_0x5e6613(0x17a),_0x5e6613(0x3a8)]['includes'](_0x3e24c1)&&this[_0x5e6613(0x8a6)][_0x5e6613(0x520)](),this['okTargetSelectionVisibility']();},Scene_Battle[_0x482454(0x61b)][_0x482454(0x8b3)]=function(){const _0x3d7893=_0x482454,_0x3aa6fa=VisuMZ['BattleCore'][_0x3d7893(0x4ae)][_0x3d7893(0x738)],_0x5e122f=Window_BattleStatus[_0x3d7893(0x61b)][_0x3d7893(0x369)](),_0x541e02=Graphics[_0x3d7893(0x36e)]-(_0x3aa6fa[_0x3d7893(0x517)]||0xc0),_0x24f588=this[_0x3d7893(0x20d)]()+_0x5e122f,_0x34d60b=this[_0x3d7893(0x4bb)]()?0x0:Graphics['boxWidth']-_0x541e02,_0x1c3f48=Graphics['boxHeight']-_0x24f588+_0x5e122f;return new Rectangle(_0x34d60b,_0x1c3f48,_0x541e02,_0x24f588);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x365)]=function(){const _0x201534=_0x482454,_0x4ff3d=Window_BattleStatus[_0x201534(0x61b)][_0x201534(0x369)](),_0x2ca258=Graphics[_0x201534(0x36e)],_0x1da32d=this[_0x201534(0x20d)]()+_0x4ff3d,_0x4c123b=0x0,_0x431200=Graphics['boxHeight']-_0x1da32d+_0x4ff3d;return new Rectangle(_0x4c123b,_0x431200,_0x2ca258,_0x1da32d);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x659)]=function(){const _0x249904=_0x482454,_0x4bb0e9=Graphics[_0x249904(0x36e)]/0x2,_0x30a97e=this[_0x249904(0x441)](VisuMZ[_0x249904(0x16e)][_0x249904(0x4ae)][_0x249904(0x738)]['XPActorCommandLines'],!![]),_0x146705=Math[_0x249904(0x5d9)]((Graphics['boxWidth']-_0x4bb0e9)/0x2),_0x555478=Graphics[_0x249904(0x69e)]-_0x30a97e-this[_0x249904(0x365)]()[_0x249904(0x4c6)];return new Rectangle(_0x146705,_0x555478,_0x4bb0e9,_0x30a97e);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x27f)]=function(){const _0x30e262=_0x482454,_0x4f5538=Graphics['width'],_0x7e8024=Math['round']((Graphics[_0x30e262(0x36e)]-_0x4f5538)/0x2),_0xb5431f=this[_0x30e262(0x258)](),_0x51ba6a=(Graphics['height']-Graphics[_0x30e262(0x69e)])/-0x2;return new Rectangle(_0x7e8024,_0x51ba6a,_0x4f5538,_0xb5431f);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x372)]=function(){const _0x3cffcf=_0x482454,_0x20e6a9=Graphics[_0x3cffcf(0x913)],_0x1a4a75=Math[_0x3cffcf(0x5d9)]((Graphics['boxWidth']-_0x20e6a9)/0x2),_0x1ba2bf=this[_0x3cffcf(0x441)](0x4,!![]),_0x5e3f01=Graphics['boxHeight']-_0x1ba2bf+(Graphics[_0x3cffcf(0x4c6)]-Graphics['boxHeight'])/0x2;return new Rectangle(_0x1a4a75,_0x5e3f01,_0x20e6a9,_0x1ba2bf);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x4d7)]=function(){const _0xd3d201=_0x482454,_0x59e2e1=Math[_0xd3d201(0x139)](Graphics[_0xd3d201(0x913)]/0x3),_0x1e83ca=this['isRightInputMode']()?(Graphics[_0xd3d201(0x913)]+Graphics[_0xd3d201(0x36e)])/0x2-_0x59e2e1:(Graphics[_0xd3d201(0x913)]-Graphics['boxWidth'])/-0x2,_0x5e9829=this[_0xd3d201(0x27f)](),_0xad2f12=_0x5e9829['y']+_0x5e9829['height'],_0x527b93=this[_0xd3d201(0x372)](),_0x2ea56b=_0x527b93['y']-_0xad2f12;return new Rectangle(_0x1e83ca,_0xad2f12,_0x59e2e1,_0x2ea56b);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x36a)]=function(){const _0x33c0ca=_0x482454,_0x3d6bab=Math[_0x33c0ca(0x80a)](Graphics[_0x33c0ca(0x913)]/0x3),_0x4573a9=Math[_0x33c0ca(0x5d9)]((Graphics[_0x33c0ca(0x36e)]-_0x3d6bab)/0x2),_0x27c5ba=this[_0x33c0ca(0x4d7)](),_0x28c2fe=_0x27c5ba['y'],_0x505e49=_0x27c5ba['height'];return new Rectangle(_0x4573a9,_0x28c2fe,_0x3d6bab,_0x505e49);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x283)]=function(){const _0x1cfdd3=_0x482454;this[_0x1cfdd3(0x7bb)]['y']=this[_0x1cfdd3(0x466)]['y']+this[_0x1cfdd3(0x466)][_0x1cfdd3(0x4c6)],this[_0x1cfdd3(0x4bb)]()?this[_0x1cfdd3(0x2cb)]()===_0x1cfdd3(0x3a8)?this['_cancelButton']['x']=0x8:this[_0x1cfdd3(0x7bb)]['x']=-this['_cancelButton'][_0x1cfdd3(0x913)]-0x4:this[_0x1cfdd3(0x7bb)]['x']=Graphics[_0x1cfdd3(0x913)]-(Graphics[_0x1cfdd3(0x913)]-Graphics['boxWidth'])/0x2-this[_0x1cfdd3(0x7bb)][_0x1cfdd3(0x913)]-0x4;},VisuMZ['BattleCore'][_0x482454(0x423)]=Scene_Battle['prototype']['skillWindowRect'],Scene_Battle[_0x482454(0x61b)][_0x482454(0x2dc)]=function(){const _0x460eaa=_0x482454;if(this[_0x460eaa(0x2cb)]()===_0x460eaa(0x3a8))return this[_0x460eaa(0x36a)]();else return this['isSkillItemWindowsMiddle']()?this['skillItemWindowRectMiddle']():VisuMZ[_0x460eaa(0x16e)][_0x460eaa(0x423)]['call'](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x8e2)]=Scene_Battle[_0x482454(0x61b)][_0x482454(0x88a)],Scene_Battle[_0x482454(0x61b)][_0x482454(0x88a)]=function(){const _0x1b23a2=_0x482454;if(this[_0x1b23a2(0x2cb)]()===_0x1b23a2(0x3a8))return this['skillItemWindowRectBorderStyle']();else return this[_0x1b23a2(0x4ef)]()?this[_0x1b23a2(0x902)]():VisuMZ[_0x1b23a2(0x16e)][_0x1b23a2(0x8e2)][_0x1b23a2(0x2b9)](this);},Scene_Battle[_0x482454(0x61b)][_0x482454(0x4ef)]=function(){const _0x17043c=_0x482454;return VisuMZ[_0x17043c(0x16e)][_0x17043c(0x4ae)]['BattleLayout'][_0x17043c(0x794)];},Scene_Battle['prototype'][_0x482454(0x902)]=function(){const _0x38fcdf=_0x482454,_0x6cb50d=Sprite_Button[_0x38fcdf(0x61b)][_0x38fcdf(0x22b)]()*0x2+0x4;let _0x32cf34=Graphics[_0x38fcdf(0x36e)]-_0x6cb50d;Imported['VisuMZ_0_CoreEngine']&&SceneManager['isSideButtonLayout']()&&(_0x32cf34+=_0x6cb50d);const _0x208269=this[_0x38fcdf(0x814)](),_0x1848e7=Graphics['boxHeight']-_0x208269-this[_0x38fcdf(0x673)]()['height']+Window_BattleStatus[_0x38fcdf(0x61b)]['extraHeight'](),_0x1b82f9=0x0;return new Rectangle(_0x1b82f9,_0x208269,_0x32cf34,_0x1848e7);},Scene_Battle['prototype'][_0x482454(0x764)]=function(){const _0x417c97=_0x482454;if(!VisuMZ[_0x417c97(0x16e)]['Settings'][_0x417c97(0x8c8)]['NameLegacy'])return;this[_0x417c97(0x8c7)]=new Sprite(),this[_0x417c97(0x8c7)]['x']=this['_windowLayer']['x'],this[_0x417c97(0x8c7)]['y']=this[_0x417c97(0x42f)]['y'];const _0x1acc5f=this[_0x417c97(0x793)]['indexOf'](this[_0x417c97(0x42f)]);this[_0x417c97(0x4ea)](this[_0x417c97(0x8c7)],_0x1acc5f);for(let _0x4b2c9f=0x0;_0x4b2c9f<0x8;_0x4b2c9f++){const _0x563133=new Window_EnemyName(_0x4b2c9f);this['_enemyNameContainer']['addChild'](_0x563133);}},Sprite_Battler[_0x482454(0x46f)]=VisuMZ[_0x482454(0x16e)][_0x482454(0x4ae)][_0x482454(0x2ef)][_0x482454(0x55d)],VisuMZ[_0x482454(0x16e)][_0x482454(0x8a3)]=Sprite_Battler[_0x482454(0x61b)][_0x482454(0x4fa)],Sprite_Battler[_0x482454(0x61b)][_0x482454(0x4fa)]=function(){const _0x472083=_0x482454;VisuMZ['BattleCore']['Sprite_Battler_initMembers'][_0x472083(0x2b9)](this),this[_0x472083(0x259)]();if(this[_0x472083(0x7cc)]===Sprite_Enemy)this['createShadowSprite']();this[_0x472083(0x778)]();},Sprite_Battler[_0x482454(0x61b)]['initMembersBattleCore']=function(){const _0x113fe4=_0x482454;this[_0x113fe4(0x12b)]=0x0,this[_0x113fe4(0x4c4)]=0x0,this['_floatHeight']=0x0,this['_targetFloatHeight']=0x0,this[_0x113fe4(0x26f)]=0x0,this[_0x113fe4(0x158)]=0x0,this[_0x113fe4(0x921)]='Linear',this[_0x113fe4(0x29a)]=0x0,this[_0x113fe4(0x4fe)]=0x0,this[_0x113fe4(0x1a0)]=0x0,this[_0x113fe4(0x8b4)]=0x0,this[_0x113fe4(0x82a)]=0xff,this['_opacityDuration']=0x0,this[_0x113fe4(0xed)]=0x0,this[_0x113fe4(0x710)]='Linear',this[_0x113fe4(0x49e)]=0x0,this[_0x113fe4(0x7b1)]=0x0,this[_0x113fe4(0x6f7)]=0x0,this['_angleWholeDuration']=0x0,this[_0x113fe4(0x20e)]=_0x113fe4(0x87c),this[_0x113fe4(0x800)]=!![],this[_0x113fe4(0x322)]=0x0,this[_0x113fe4(0x24e)]=0x0,this[_0x113fe4(0x19b)]=0x0,this[_0x113fe4(0x767)]=0x0,this[_0x113fe4(0x907)]=0x0,this['_skewWholeDuration']=0x0,this[_0x113fe4(0x6c5)]=_0x113fe4(0x87c),this[_0x113fe4(0x461)]=0x1,this['_growY']=0x1,this[_0x113fe4(0x27c)]=0x1,this['_targetGrowY']=0x1,this[_0x113fe4(0x387)]=0x0,this[_0x113fe4(0x476)]=0x0,this['_growEasing']=_0x113fe4(0x87c),this[_0x113fe4(0x958)]=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this['_homeDuration']=0x0,this[_0x113fe4(0x6dd)]=0x0,this[_0x113fe4(0x56c)]=_0x113fe4(0x87c);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x71e)]=function(){const _0x486aa9=_0x482454;this[_0x486aa9(0x5b5)]=new Sprite(),this['_shadowSprite'][_0x486aa9(0x2f4)]=ImageManager[_0x486aa9(0x818)](_0x486aa9(0x397)),this[_0x486aa9(0x5b5)][_0x486aa9(0x2f4)]['smooth']=VisuMZ['BattleCore'][_0x486aa9(0x4ae)][_0x486aa9(0x2ef)][_0x486aa9(0x6c2)],this['_shadowSprite']['anchor']['x']=0.5,this['_shadowSprite']['anchor']['y']=0.5,this['_shadowSprite']['y']=-0x2,this[_0x486aa9(0x5b5)][_0x486aa9(0x47d)]=![],this['addChild'](this[_0x486aa9(0x5b5)]);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x778)]=function(){const _0x44188d=_0x482454;this['_distortionSprite']=new Sprite(),this[_0x44188d(0x8db)][_0x44188d(0x935)]['x']=0.5,this[_0x44188d(0x8db)][_0x44188d(0x935)]['y']=0.5,this[_0x44188d(0x83b)](this[_0x44188d(0x8db)]);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x7f1)]=function(){const _0x26b095=_0x482454;if(!this[_0x26b095(0x8db)])return;if(this[_0x26b095(0x5b5)]){const _0x4c0817=this[_0x26b095(0x648)](this[_0x26b095(0x8db)]);this[_0x26b095(0x4ea)](this['_shadowSprite'],_0x4c0817),this[_0x26b095(0x6e5)]();}this['_svBattlerSprite']&&this['_distortionSprite'][_0x26b095(0x83b)](this['_svBattlerSprite']),this[_0x26b095(0x214)]&&this[_0x26b095(0x8db)][_0x26b095(0x83b)](this[_0x26b095(0x214)]),this[_0x26b095(0x8aa)]&&this['_distortionSprite'][_0x26b095(0x83b)](this[_0x26b095(0x8aa)]),this['_dragonbonesSpriteContainer']&&this[_0x26b095(0x8db)]['addChild'](this[_0x26b095(0x758)]);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x6e5)]=function(){const _0x5af93a=_0x482454;if(!this['_shadowSprite'])return;if(this[_0x5af93a(0x84e)]&&this[_0x5af93a(0x84e)][_0x5af93a(0x652)]()){const _0x202dc8=this['_shadowSprite'][_0x5af93a(0x2f4)];this['_shadowSprite'][_0x5af93a(0x5be)](0x0,0x0,_0x202dc8[_0x5af93a(0x913)],_0x202dc8[_0x5af93a(0x4c6)]);}else this[_0x5af93a(0x5b5)][_0x5af93a(0x5be)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x482454(0x129)]=function(){const _0x31f789=_0x482454;return SceneManager[_0x31f789(0x1f8)]()?SceneManager[_0x31f789(0x938)][_0x31f789(0x82e)][_0x31f789(0x7fc)]:this[_0x31f789(0x5e4)];},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x713)]=function(_0x15f7f1,_0x182046){const _0x24c5f1=_0x482454;if(!this['_battler'][_0x24c5f1(0x638)]())return;const _0x348cc1=VisuMZ[_0x24c5f1(0x16e)][_0x24c5f1(0x4ae)][_0x24c5f1(0x448)],_0x15ea3e=new Sprite_Damage();_0x15ea3e[_0x24c5f1(0x923)]=_0x348cc1[_0x24c5f1(0x444)],this[_0x24c5f1(0xe8)](_0x15ea3e),_0x15ea3e[_0x24c5f1(0x713)](_0x15f7f1,_0x182046),this[_0x24c5f1(0x451)](_0x15ea3e);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x712)]=function(_0x36f8a3,_0x12beb2,_0x3199c6){const _0x1a4109=_0x482454;if(!this['_battler'][_0x1a4109(0x638)]())return;const _0x4de93b=VisuMZ[_0x1a4109(0x16e)][_0x1a4109(0x4ae)][_0x1a4109(0x448)],_0x3593c4=new Sprite_Damage();_0x3593c4[_0x1a4109(0x923)]=_0x4de93b['PopupDuration'],this[_0x1a4109(0xe8)](_0x3593c4),_0x3593c4[_0x1a4109(0x712)](_0x36f8a3,_0x12beb2,_0x3199c6),this[_0x1a4109(0x451)](_0x3593c4);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x585)]=function(){const _0x3c79c1=_0x482454;if(!this['_battler']['isDamagePopupRequested']())return;while(this['_battler'][_0x3c79c1(0x566)]()){this[_0x3c79c1(0x84e)][_0x3c79c1(0x638)]()&&this[_0x3c79c1(0x7d3)]();}this[_0x3c79c1(0x84e)][_0x3c79c1(0x802)](),this[_0x3c79c1(0x84e)][_0x3c79c1(0x4b3)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x7d3)]=function(){const _0x3c2436=_0x482454,_0x50c53f=VisuMZ[_0x3c2436(0x16e)][_0x3c2436(0x4ae)][_0x3c2436(0x448)],_0x422e23=new Sprite_Damage();_0x422e23[_0x3c2436(0x923)]=_0x50c53f[_0x3c2436(0x444)],this[_0x3c2436(0xe8)](_0x422e23),_0x422e23['setup'](this[_0x3c2436(0x84e)]),_0x422e23[_0x3c2436(0xf2)](this[_0x3c2436(0x84e)]),this[_0x3c2436(0x451)](_0x422e23);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x451)]=function(_0x4c4d11){const _0xda5316=_0x482454;this[_0xda5316(0x2cd)][_0xda5316(0x32d)](_0x4c4d11);if(this['isShownOnBattlePortrait']())SceneManager[_0xda5316(0x938)]['_statusWindow'][_0xda5316(0x451)](_0x4c4d11,this[_0xda5316(0x84e)]);else{this[_0xda5316(0x129)]()[_0xda5316(0x83b)](_0x4c4d11);if(SceneManager[_0xda5316(0x2fe)]())_0x4c4d11[_0xda5316(0x3a5)]['x']=-0x1;}},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x157)]=function(){const _0x2eed96=_0x482454;return!$gameSystem['isSideView']()&&this[_0x2eed96(0x84e)]&&this[_0x2eed96(0x84e)][_0x2eed96(0x761)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0xe8)]=function(_0x4b395f){const _0x1a4391=_0x482454;this[_0x1a4391(0x117)](_0x4b395f,!![]);const _0x3e610a=VisuMZ['BattleCore'][_0x1a4391(0x4ae)][_0x1a4391(0x448)],_0xd19971=SceneManager[_0x1a4391(0x2fe)]()?-0x1:0x1;if(_0x3e610a['NewPopupBottom'])for(const _0x4fec04 of this['_damages']){_0x4fec04['x']+=_0x3e610a[_0x1a4391(0x5e1)]*_0xd19971,_0x4fec04['y']+=_0x3e610a['PopupShiftY'];}else{const _0x1db138=this['_damages'][this['_damages']['length']-0x1];_0x1db138&&(_0x4b395f['x']=_0x1db138['x']+_0x3e610a[_0x1a4391(0x5e1)]*_0xd19971,_0x4b395f['y']=_0x1db138['y']+_0x3e610a[_0x1a4391(0x4fc)]);}},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x117)]=function(_0xc9b9d7,_0x5ef37c){const _0x5311fe=_0x482454,_0x518b1f=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x248b23=this[_0x5311fe(0x12b)];_0x248b23+=this['extraPositionX']();let _0x35e9ea=this['_baseY'];const _0x54beda=this[_0x5311fe(0x8db)]['scale']['y'];_0x35e9ea+=this[_0x5311fe(0x240)]();const _0x5e74de=SceneManager[_0x5311fe(0x938)][_0x5311fe(0x63d)];if(_0x5e74de&&this[_0x5311fe(0x5e4)]===_0x5e74de){_0x248b23+=_0x5e74de['x']-this[_0x5311fe(0x5b4)]();const _0x51d7c9=_0x5e74de[_0x5311fe(0x7eb)]()*0x3/0x4;_0x35e9ea=_0x5e74de['y']+_0x51d7c9,_0x35e9ea=Math[_0x5311fe(0x450)](_0x35e9ea,_0x5e74de['y']+this['y']-this[_0x5311fe(0x4c6)]+_0x51d7c9);}_0xc9b9d7['x']=Math[_0x5311fe(0x5d9)](_0x248b23+this['damageOffsetX']()*_0x518b1f),_0xc9b9d7['y']=Math['round'](_0x35e9ea+this[_0x5311fe(0x3d9)]());},VisuMZ[_0x482454(0x16e)]['Sprite_Battler_damageOffsetX']=Sprite_Battler[_0x482454(0x61b)][_0x482454(0x5b4)],Sprite_Battler[_0x482454(0x61b)][_0x482454(0x5b4)]=function(){const _0x3fcc21=_0x482454;let _0x2b06a0=VisuMZ[_0x3fcc21(0x16e)][_0x3fcc21(0x6b1)]['call'](this),_0x31ed7e=VisuMZ[_0x3fcc21(0x16e)]['Settings'][_0x3fcc21(0x448)][_0x3fcc21(0x857)]||0x0;return Math[_0x3fcc21(0x5d9)](_0x2b06a0+_0x31ed7e);},VisuMZ[_0x482454(0x16e)][_0x482454(0x50e)]=Sprite_Battler['prototype']['damageOffsetY'],Sprite_Battler[_0x482454(0x61b)]['damageOffsetY']=function(){const _0x56dd52=_0x482454;let _0x51c302=VisuMZ[_0x56dd52(0x16e)][_0x56dd52(0x50e)]['call'](this);switch(VisuMZ[_0x56dd52(0x16e)][_0x56dd52(0x4ae)][_0x56dd52(0x448)][_0x56dd52(0x77f)]){case'head':_0x51c302-=this[_0x56dd52(0x4c6)]*this[_0x56dd52(0x3a5)]['y'];break;case _0x56dd52(0x59d):_0x51c302-=this[_0x56dd52(0x4c6)]*this[_0x56dd52(0x3a5)]['y']*0.5;break;}let _0x759937=VisuMZ[_0x56dd52(0x16e)][_0x56dd52(0x4ae)][_0x56dd52(0x448)]['PopupOffsetY']||0x0;return Math[_0x56dd52(0x5d9)](_0x51c302+_0x759937);},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x5b4)]=function(){const _0x52d6ac=_0x482454;return Sprite_Battler[_0x52d6ac(0x61b)][_0x52d6ac(0x5b4)][_0x52d6ac(0x2b9)](this);},Sprite_Actor[_0x482454(0x61b)]['damageOffsetY']=function(){const _0x15c0ff=_0x482454;return Sprite_Battler[_0x15c0ff(0x61b)][_0x15c0ff(0x3d9)][_0x15c0ff(0x2b9)](this);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x620)]=function(_0x2c4769){const _0x8c785d=_0x482454;this['isShownOnBattlePortrait']()?SceneManager[_0x8c785d(0x938)]['_statusWindow'][_0x8c785d(0x717)](_0x2c4769):(this[_0x8c785d(0x129)]()[_0x8c785d(0x5d4)](_0x2c4769),this[_0x8c785d(0x2cd)][_0x8c785d(0x350)](_0x2c4769),_0x2c4769[_0x8c785d(0x16b)]());},VisuMZ[_0x482454(0x16e)][_0x482454(0x845)]=Sprite_Battler['prototype']['setHome'],Sprite_Battler[_0x482454(0x61b)]['setHome']=function(_0x7b7898,_0x3559a4){const _0x5de6f4=_0x482454,_0x1279cc=VisuMZ[_0x5de6f4(0x16e)][_0x5de6f4(0x4ae)];if(this[_0x5de6f4(0x7cc)]===Sprite_Actor)_0x7b7898+=_0x1279cc[_0x5de6f4(0x2ef)][_0x5de6f4(0x3ba)]||0x0,_0x3559a4+=_0x1279cc[_0x5de6f4(0x2ef)]['OffsetY']||0x0;else this[_0x5de6f4(0x7cc)]===Sprite_Enemy&&(_0x7b7898+=_0x1279cc['Enemy'][_0x5de6f4(0x3ba)]||0x0,_0x3559a4+=_0x1279cc['Enemy'][_0x5de6f4(0x325)]||0x0);this[_0x5de6f4(0x84e)]&&(_0x7b7898=this[_0x5de6f4(0x84e)][_0x5de6f4(0x5f7)]??_0x7b7898,_0x3559a4=this[_0x5de6f4(0x84e)][_0x5de6f4(0x1d9)]??_0x3559a4),VisuMZ[_0x5de6f4(0x16e)][_0x5de6f4(0x845)][_0x5de6f4(0x2b9)](this,_0x7b7898,_0x3559a4),this[_0x5de6f4(0x3b7)]=this[_0x5de6f4(0x8ae)],this[_0x5de6f4(0x4e3)]=this[_0x5de6f4(0x721)],this['_homeDuration']=0x0,this[_0x5de6f4(0x6dd)]=0x0,this[_0x5de6f4(0x56c)]=_0x5de6f4(0x87c);},VisuMZ[_0x482454(0x16e)][_0x482454(0x4eb)]=Sprite_Battler[_0x482454(0x61b)]['update'],Sprite_Battler[_0x482454(0x61b)][_0x482454(0x2fa)]=function(){const _0x2105c9=_0x482454;VisuMZ[_0x2105c9(0x16e)][_0x2105c9(0x4eb)][_0x2105c9(0x2b9)](this),!this[_0x2105c9(0x84e)]&&this[_0x2105c9(0x6e7)]&&(this[_0x2105c9(0x6e7)][_0x2105c9(0x47d)]=![]);},VisuMZ[_0x482454(0x16e)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x482454(0x61b)][_0x482454(0x91f)],Sprite_Battler[_0x482454(0x61b)][_0x482454(0x91f)]=function(){const _0x2d5593=_0x482454;this[_0x2d5593(0x5ea)](),this[_0x2d5593(0x4a4)](),this[_0x2d5593(0x82c)](),this['updateFlip'](),this[_0x2d5593(0x172)](),VisuMZ[_0x2d5593(0x16e)][_0x2d5593(0x6b4)][_0x2d5593(0x2b9)](this);if(this[_0x2d5593(0x7cc)]===Sprite_Enemy)this[_0x2d5593(0x307)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x130)]=Sprite_Battler[_0x482454(0x61b)][_0x482454(0x6b3)],Sprite_Battler[_0x482454(0x61b)]['updatePosition']=function(){const _0x5efb48=_0x482454;this[_0x5efb48(0x3f3)](),VisuMZ[_0x5efb48(0x16e)][_0x5efb48(0x130)][_0x5efb48(0x2b9)](this),this[_0x5efb48(0x220)](),this['updateOpacity']();},Sprite_Battler[_0x482454(0x61b)]['startHomeMove']=function(_0x27cb10,_0x25dc5f,_0x37f686,_0xdf4dc1){const _0x327943=_0x482454;(this[_0x327943(0x3b7)]!==_0x27cb10||this[_0x327943(0x4e3)]!==_0x25dc5f)&&(this[_0x327943(0x3b7)]=_0x27cb10,this[_0x327943(0x4e3)]=_0x25dc5f,this['_homeDuration']=_0x37f686,this[_0x327943(0x6dd)]=_0x37f686,this[_0x327943(0x56c)]=_0xdf4dc1,_0x37f686<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x3f3)]=function(){const _0x3f243d=_0x482454;if(this['_homeDuration']<=0x0)return;const _0x15ab10=this[_0x3f243d(0x326)],_0x411e0b=this['_homeWholeDuration'],_0x390f0b=this['_homeEasing'];Imported[_0x3f243d(0x49a)]?(this[_0x3f243d(0x8ae)]=this[_0x3f243d(0x27e)](this[_0x3f243d(0x8ae)],this[_0x3f243d(0x3b7)],_0x15ab10,_0x411e0b,_0x390f0b),this[_0x3f243d(0x721)]=this['applyEasing'](this[_0x3f243d(0x721)],this['_targetHomeY'],_0x15ab10,_0x411e0b,_0x390f0b)):(this['_homeX']=(this[_0x3f243d(0x8ae)]*(_0x15ab10-0x1)+this[_0x3f243d(0x3b7)])/_0x15ab10,this[_0x3f243d(0x721)]=(this[_0x3f243d(0x721)]*(_0x15ab10-0x1)+this[_0x3f243d(0x4e3)])/_0x15ab10);this[_0x3f243d(0x326)]--;if(this[_0x3f243d(0x326)]<=0x0)this[_0x3f243d(0x1be)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x1be)]=function(){const _0x18c21f=_0x482454;this['_homeX']=this[_0x18c21f(0x3b7)],this[_0x18c21f(0x721)]=this[_0x18c21f(0x4e3)];},Sprite_Battler['prototype']['updatePositionBattleCore']=function(){const _0x428e21=_0x482454;this[_0x428e21(0x12b)]=this['x'],this[_0x428e21(0x4c4)]=this['y'],this[_0x428e21(0xe6)](),this[_0x428e21(0x1e8)](),this['x']+=this[_0x428e21(0x6a3)](),this['y']+=this[_0x428e21(0x240)](),this['y']+=this[_0x428e21(0x35c)](),this['x']=Math['floor'](this['x']),this['y']=Math[_0x428e21(0x139)](this['y']);},Sprite_Battler[_0x482454(0x61b)]['extraPositionX']=function(){let _0x155a0e=0x0;return _0x155a0e;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x240)]=function(){const _0x2a811a=_0x482454;let _0x475467=0x0;return this['_battler']&&!this[_0x2a811a(0x84e)][_0x2a811a(0x57a)]()&&(_0x475467-=this[_0x2a811a(0x5ad)],_0x475467-=this[_0x2a811a(0x29a)]),_0x475467;},Sprite_Battler[_0x482454(0x61b)]['extraPositionScaledY']=function(){const _0x4a5623=_0x482454;let _0x4f75d9=0x0;if(this[_0x4a5623(0x8db)]&&this['constructor']!==Sprite_SvEnemy){const _0x154bbc=this[_0x4a5623(0x8db)][_0x4a5623(0x3a5)]['y'];_0x4f75d9-=(_0x154bbc-0x1)*this[_0x4a5623(0x4c6)];}return _0x4f75d9;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x4da)]=function(){const _0x226955=_0x482454,_0x15eb5f=this['_battler']&&this[_0x226955(0x84e)]['isBattlerFlipped']();this[_0x226955(0x958)]=(_0x15eb5f?-0x1:0x1)*Math[_0x226955(0x36b)](this[_0x226955(0x3a5)]['x']);},Sprite_Battler[_0x482454(0x61b)]['startFloat']=function(_0x1c7357,_0xdbaca5,_0xb520da){const _0x44fbd2=_0x482454;if(!this['canMove']())return;if(this['_targetFloatHeight']===_0x1c7357)return;this['_targetFloatHeight']=_0x1c7357,this[_0x44fbd2(0x26f)]=_0xdbaca5,this['_floatWholeDuration']=_0xdbaca5,this[_0x44fbd2(0x921)]=_0xb520da||_0x44fbd2(0x87c);if(_0xdbaca5<=0x0)this[_0x44fbd2(0x5ad)]=_0x1c7357;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0xe6)]=function(){const _0x5ca420=_0x482454;if(this['_floatDuration']<=0x0)return;const _0xb3541e=this[_0x5ca420(0x26f)],_0x2be6b7=this[_0x5ca420(0x158)],_0x303666=this[_0x5ca420(0x921)];Imported['VisuMZ_0_CoreEngine']?this[_0x5ca420(0x5ad)]=this[_0x5ca420(0x27e)](this[_0x5ca420(0x5ad)],this[_0x5ca420(0x16a)],_0xb3541e,_0x2be6b7,_0x303666):this[_0x5ca420(0x5ad)]=(this[_0x5ca420(0x5ad)]*(_0xb3541e-0x1)+this['_targetFloatHeight'])/_0xb3541e;this[_0x5ca420(0x26f)]--;if(this[_0x5ca420(0x26f)]<=0x0)this[_0x5ca420(0x746)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x746)]=function(){const _0x6b23b1=_0x482454;this[_0x6b23b1(0x5ad)]=this[_0x6b23b1(0x16a)];},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x2ba)]=function(){const _0x46c4a6=_0x482454;return this[_0x46c4a6(0x26f)]>0x0;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x783)]=function(_0x24ea9a,_0x3348f7){const _0x1f5b4b=_0x482454;if(!this[_0x1f5b4b(0x478)]())return;if(_0x3348f7<=0x0)return;this['_jumpMaxHeight']=_0x24ea9a,this[_0x1f5b4b(0x1a0)]=_0x3348f7,this[_0x1f5b4b(0x8b4)]=_0x3348f7;},Sprite_Battler[_0x482454(0x61b)]['updateJump']=function(){const _0x2ac430=_0x482454;if(this[_0x2ac430(0x1a0)]<=0x0)return;const _0x42912a=this[_0x2ac430(0x8b4)]-this[_0x2ac430(0x1a0)],_0x56115d=this[_0x2ac430(0x8b4)]/0x2,_0x33690f=this[_0x2ac430(0x4fe)],_0x159550=-_0x33690f/Math[_0x2ac430(0x2da)](_0x56115d,0x2);this['_jumpHeight']=_0x159550*Math['pow'](_0x42912a-_0x56115d,0x2)+_0x33690f,this[_0x2ac430(0x1a0)]--;if(this['_jumpDuration']<=0x0)return this[_0x2ac430(0x804)]();},Sprite_Battler[_0x482454(0x61b)]['onJumpEnd']=function(){const _0xb77ec2=_0x482454;this[_0xb77ec2(0x29a)]=0x0;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x789)]=function(){const _0x58eb26=_0x482454;return this[_0x58eb26(0x1a0)]>0x0;},Sprite_Battler['prototype'][_0x482454(0x304)]=function(_0x1df2e6,_0x5e19f6,_0x541289){const _0x2be92a=_0x482454;if(this[_0x2be92a(0x82a)]===_0x1df2e6)return;this[_0x2be92a(0x82a)]=_0x1df2e6,this[_0x2be92a(0x6ed)]=_0x5e19f6,this[_0x2be92a(0xed)]=_0x5e19f6,this[_0x2be92a(0x710)]=_0x541289||_0x2be92a(0x87c);if(_0x5e19f6<=0x0)this[_0x2be92a(0x1f2)]=_0x1df2e6;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x588)]=function(){const _0x2114de=_0x482454;if(this[_0x2114de(0x7cc)][_0x2114de(0x7cb)]===_0x2114de(0x409))return;if(this[_0x2114de(0x6ed)]<=0x0)return;const _0x2e8020=this[_0x2114de(0x6ed)],_0x233ba4=this[_0x2114de(0xed)],_0x490722=this[_0x2114de(0x710)];Imported[_0x2114de(0x49a)]?this[_0x2114de(0x1f2)]=this['applyEasing'](this[_0x2114de(0x1f2)],this[_0x2114de(0x82a)],_0x2e8020,_0x233ba4,_0x490722):this[_0x2114de(0x1f2)]=(this[_0x2114de(0x1f2)]*(_0x2e8020-0x1)+this[_0x2114de(0x82a)])/_0x2e8020;this['_opacityDuration']--;if(this[_0x2114de(0x6ed)]<=0x0)this[_0x2114de(0x785)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x785)]=function(){const _0xcb846c=_0x482454;this['opacity']=this[_0xcb846c(0x82a)];},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x529)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x307)]=function(){const _0x32d2a1=_0x482454;this['_shadowSprite'][_0x32d2a1(0x47d)]=this[_0x32d2a1(0x84e)][_0x32d2a1(0x718)](),this[_0x32d2a1(0x6b5)]();},Sprite_Battler[_0x482454(0x61b)]['updateShadowPosition']=function(){const _0x25a372=_0x482454;if(!this[_0x25a372(0x5b5)])return;this[_0x25a372(0x5b5)]['y']=this[_0x25a372(0x4c4)]-this['y']-0x2;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x59b)]=function(){const _0x1ea67f=_0x482454;if(!this[_0x1ea67f(0x84e)])return;this[_0x1ea67f(0x6b6)]=this[_0x1ea67f(0x84e)][_0x1ea67f(0x511)](),this[_0x1ea67f(0x90f)]=this[_0x1ea67f(0x84e)]['battlerShadowScaleY']();},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x511)]=function(){const _0x4c3019=_0x482454,_0x2502b4=this[_0x4c3019(0x761)]()?this[_0x4c3019(0x57b)]():this['enemy']();if(_0x2502b4){const _0x91aa5d=_0x2502b4['note'];if(_0x91aa5d['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x91aa5d[_0x4c3019(0x445)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x482454(0x61b)][_0x482454(0x7c7)]=function(){const _0x56cdb9=_0x482454,_0x548570=this[_0x56cdb9(0x761)]()?this['actor']():this[_0x56cdb9(0x614)]();if(_0x548570){const _0x307d34=_0x548570[_0x56cdb9(0x305)];if(_0x307d34[_0x56cdb9(0x445)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x307d34[_0x56cdb9(0x445)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler['prototype'][_0x482454(0x5ea)]=function(){const _0x1dd7c8=_0x482454;if(this[_0x1dd7c8(0x7cc)]===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x1dd7c8(0x378)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x378)]=function(){const _0x29bb04=_0x482454,_0x599058=this['_distortionSprite'];_0x599058&&(_0x599058[_0x29bb04(0x3a5)]['x']=this[_0x29bb04(0x878)](),_0x599058['scale']['y']=this[_0x29bb04(0x3a7)]());},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x878)]=function(){const _0x443317=_0x482454;let _0x4cc177=0x1;return _0x4cc177*=this[_0x443317(0x958)],_0x4cc177*=this[_0x443317(0x461)],_0x4cc177;},Sprite_Battler['prototype'][_0x482454(0x3a7)]=function(){const _0xbee42b=_0x482454;return 0x1*this[_0xbee42b(0x404)];},Sprite_Battler['prototype'][_0x482454(0x3e7)]=function(){const _0x163cad=_0x482454;return this[_0x163cad(0x913)]*this[_0x163cad(0x878)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x5eb)]=function(){const _0x2a8372=_0x482454;return this[_0x2a8372(0x4c6)]*this['mainSpriteScaleY']();},Sprite_Battler['prototype'][_0x482454(0x40a)]=function(_0x2cd8bb,_0x3583d6,_0x4134d3,_0x4bb457){const _0x975719=_0x482454;if(!this[_0x975719(0x478)]())return;if(!this[_0x975719(0x8db)])return;if(this[_0x975719(0x27c)]===_0x2cd8bb&&this[_0x975719(0x69d)]===_0x3583d6)return;this[_0x975719(0x27c)]=_0x2cd8bb,this[_0x975719(0x69d)]=_0x3583d6,this['_growDuration']=_0x4134d3,this[_0x975719(0x476)]=_0x4134d3,this['_growEasing']=_0x4bb457||_0x975719(0x87c),_0x4134d3<=0x0&&(this[_0x975719(0x461)]=this[_0x975719(0x27c)],this[_0x975719(0x404)]=this[_0x975719(0x69d)]);},Sprite_Battler['prototype'][_0x482454(0x471)]=function(){const _0x471d5a=_0x482454;if(this['_growDuration']<=0x0)return;if(!this['_distortionSprite'])return;const _0x3bbcdf=this[_0x471d5a(0x387)],_0x1c755a=this[_0x471d5a(0x476)],_0x5100da=this[_0x471d5a(0x358)];Imported[_0x471d5a(0x49a)]?(this[_0x471d5a(0x461)]=this[_0x471d5a(0x27e)](this['_growX'],this[_0x471d5a(0x27c)],_0x3bbcdf,_0x1c755a,_0x5100da),this['_growY']=this[_0x471d5a(0x27e)](this['_growY'],this[_0x471d5a(0x69d)],_0x3bbcdf,_0x1c755a,_0x5100da)):(this[_0x471d5a(0x461)]=(this[_0x471d5a(0x461)]*(_0x3bbcdf-0x1)+this[_0x471d5a(0x27c)])/_0x3bbcdf,this[_0x471d5a(0x404)]=(this[_0x471d5a(0x404)]*(_0x3bbcdf-0x1)+this[_0x471d5a(0x69d)])/_0x3bbcdf);this[_0x471d5a(0x387)]--;if(this[_0x471d5a(0x387)]<=0x0)this[_0x471d5a(0x532)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x532)]=function(){const _0x42ec7c=_0x482454;this[_0x42ec7c(0x461)]=this[_0x42ec7c(0x27c)],this[_0x42ec7c(0x404)]=this['_targetGrowY'];},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x8d0)]=function(){const _0x111f45=_0x482454;return this[_0x111f45(0x387)]>0x0;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x63e)]=function(_0x5d5359,_0x3afa43,_0x4d2e49,_0x40e503){const _0x2f8b94=_0x482454;if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x2f8b94(0x19b)]===_0x5d5359&&this[_0x2f8b94(0x767)]===_0x3afa43)return;this[_0x2f8b94(0x19b)]=_0x5d5359,this[_0x2f8b94(0x767)]=_0x3afa43,this[_0x2f8b94(0x907)]=_0x4d2e49,this['_skewWholeDuration']=_0x4d2e49,this[_0x2f8b94(0x6c5)]=_0x40e503||_0x2f8b94(0x87c),_0x4d2e49<=0x0&&(this[_0x2f8b94(0x8db)]['skew']['x']=this['_targetSkewX'],this[_0x2f8b94(0x8db)][_0x2f8b94(0x8dc)]['y']=this[_0x2f8b94(0x767)]);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x4a4)]=function(){const _0x5032e2=_0x482454;if(this[_0x5032e2(0x907)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x229c8c=this[_0x5032e2(0x907)],_0xdcfa0e=this[_0x5032e2(0x649)],_0xe2f127=this[_0x5032e2(0x6c5)],_0x30b796=this[_0x5032e2(0x8db)];Imported[_0x5032e2(0x49a)]?(_0x30b796[_0x5032e2(0x8dc)]['x']=this[_0x5032e2(0x27e)](_0x30b796[_0x5032e2(0x8dc)]['x'],this[_0x5032e2(0x19b)],_0x229c8c,_0xdcfa0e,_0xe2f127),_0x30b796[_0x5032e2(0x8dc)]['y']=this[_0x5032e2(0x27e)](_0x30b796[_0x5032e2(0x8dc)]['y'],this[_0x5032e2(0x767)],_0x229c8c,_0xdcfa0e,_0xe2f127)):(_0x30b796[_0x5032e2(0x8dc)]['x']=(_0x30b796[_0x5032e2(0x8dc)]['x']*(_0x229c8c-0x1)+this[_0x5032e2(0x19b)])/_0x229c8c,_0x30b796['skew']['y']=(_0x30b796[_0x5032e2(0x8dc)]['y']*(_0x229c8c-0x1)+this['_targetSkewY'])/_0x229c8c);this[_0x5032e2(0x907)]--;if(this[_0x5032e2(0x907)]<=0x0)this[_0x5032e2(0x72f)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x72f)]=function(){const _0x5cc55f=_0x482454;this['_distortionSprite'][_0x5cc55f(0x8dc)]['x']=this[_0x5cc55f(0x19b)],this[_0x5cc55f(0x8db)][_0x5cc55f(0x8dc)]['y']=this[_0x5cc55f(0x767)];},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x19e)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x91a)]=function(_0x41ec67,_0x2d0056,_0x5e57b7,_0x50bd5d){const _0x2bfa42=_0x482454;if(!this[_0x2bfa42(0x478)]())return;if(!this[_0x2bfa42(0x8db)])return;if(this['_targetAngle']===_0x41ec67)return;this[_0x2bfa42(0x7b1)]=_0x41ec67,this[_0x2bfa42(0x6f7)]=_0x2d0056,this[_0x2bfa42(0x42c)]=_0x2d0056,this[_0x2bfa42(0x20e)]=_0x5e57b7||_0x2bfa42(0x87c),this[_0x2bfa42(0x800)]=_0x50bd5d,this[_0x2bfa42(0x800)]===undefined&&(this[_0x2bfa42(0x800)]=!![]),_0x2d0056<=0x0&&(this[_0x2bfa42(0x49e)]=_0x41ec67,this[_0x2bfa42(0x800)]&&(this[_0x2bfa42(0x7b1)]=0x0,this[_0x2bfa42(0x49e)]=0x0));},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x82c)]=function(){const _0x276694=_0x482454;this[_0x276694(0x3ea)](),this[_0x276694(0x85a)]();},Sprite_Battler['prototype'][_0x482454(0x3ea)]=function(){const _0x18a96c=_0x482454;if(this[_0x18a96c(0x6f7)]<=0x0)return;const _0x599f14=this[_0x18a96c(0x6f7)],_0x244eda=this[_0x18a96c(0x42c)],_0x455c7f=this[_0x18a96c(0x20e)];Imported[_0x18a96c(0x49a)]?this[_0x18a96c(0x49e)]=this[_0x18a96c(0x27e)](this[_0x18a96c(0x49e)],this[_0x18a96c(0x7b1)],_0x599f14,_0x244eda,_0x455c7f):this[_0x18a96c(0x49e)]=(this['_currentAngle']*(_0x599f14-0x1)+this[_0x18a96c(0x7b1)])/_0x599f14;this[_0x18a96c(0x6f7)]--;if(this[_0x18a96c(0x6f7)]<=0x0)this[_0x18a96c(0x2f6)]();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x2f6)]=function(){const _0x1e64d7=_0x482454;this[_0x1e64d7(0x49e)]=this[_0x1e64d7(0x7b1)],this[_0x1e64d7(0x800)]&&(this[_0x1e64d7(0x7b1)]=0x0,this['_currentAngle']=0x0);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x1df)]=function(){const _0x18d2d3=_0x482454;return this[_0x18d2d3(0x6f7)]>0x0;},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x85a)]=function(){const _0x5ec90e=_0x482454;if(!this[_0x5ec90e(0x8db)])return;const _0x3ce78e=this['_currentAngle'],_0x4048e2=this[_0x5ec90e(0x3a5)]['x'],_0x5ef9b9=this[_0x5ec90e(0x84e)][_0x5ec90e(0x761)]()?-0x1:0x1;this[_0x5ec90e(0x8db)][_0x5ec90e(0x428)]=_0x3ce78e*_0x4048e2*_0x5ef9b9;const _0x381f13=this[_0x5ec90e(0x8db)][_0x5ec90e(0x3a5)]['y'];this[_0x5ec90e(0x8db)]['y']=this[_0x5ec90e(0x4c6)]*-0.5*(0x2-_0x381f13),this['_distortionSprite']['y']=Math[_0x5ec90e(0x80a)](this[_0x5ec90e(0x8db)]['y']);const _0x389b5b=[this[_0x5ec90e(0x8aa)],this['_svBattlerSprite'],this['_dragonbonesSpriteContainer']];for(const _0x220d2d of _0x389b5b){if(!_0x220d2d)continue;_0x220d2d['y']=this[_0x5ec90e(0x4c6)]*0.5;}this['_shadowSprite']&&(this[_0x5ec90e(0x6b6)]=this[_0x5ec90e(0x6b6)]??0x1,this[_0x5ec90e(0x90f)]=this['_shadowScaleY']??0x1,this[_0x5ec90e(0x5b5)]['scale']['x']=this[_0x5ec90e(0x8db)]['scale']['x']*this[_0x5ec90e(0x6b6)],this['_shadowSprite']['scale']['y']=this[_0x5ec90e(0x8db)][_0x5ec90e(0x3a5)]['y']*this[_0x5ec90e(0x90f)]);},VisuMZ[_0x482454(0x16e)][_0x482454(0x300)]=Sprite_Actor[_0x482454(0x61b)]['createStateSprite'],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x202)]=function(){const _0x5c9811=_0x482454;VisuMZ[_0x5c9811(0x16e)]['Sprite_Actor_createStateSprite'][_0x5c9811(0x2b9)](this),VisuMZ[_0x5c9811(0x16e)][_0x5c9811(0x4ae)][_0x5c9811(0x208)][_0x5c9811(0x570)]&&this['createHpGaugeSprite']();},VisuMZ[_0x482454(0x16e)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x482454(0x61b)]['createStateIconSprite'],Sprite_Enemy['prototype'][_0x482454(0x267)]=function(){const _0x111dd4=_0x482454;VisuMZ[_0x111dd4(0x16e)][_0x111dd4(0x4ae)]['HpGauge'][_0x111dd4(0x201)]&&this['createHpGaugeSprite'](),VisuMZ[_0x111dd4(0x16e)][_0x111dd4(0x88e)]['call'](this);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x812)]=function(){const _0x300f98=_0x482454;if(!ConfigManager[_0x300f98(0x48a)])return;if(this[_0x300f98(0x7cc)]===Sprite_SvEnemy)return;const _0x3ba439=VisuMZ['BattleCore']['Settings'][_0x300f98(0x208)],_0x31595c=new Sprite_HpGauge();_0x31595c[_0x300f98(0x935)]['x']=_0x3ba439[_0x300f98(0x539)],_0x31595c[_0x300f98(0x935)]['y']=_0x3ba439[_0x300f98(0x954)],_0x31595c[_0x300f98(0x3a5)]['x']=_0x31595c[_0x300f98(0x3a5)]['y']=_0x3ba439[_0x300f98(0x2e6)],this[_0x300f98(0x6e7)]=_0x31595c,this[_0x300f98(0x83b)](this[_0x300f98(0x6e7)]),Spriteset_Battle[_0x300f98(0x7e0)]&&BattleManager[_0x300f98(0x25f)](this['_hpGaugeSprite']);},VisuMZ['BattleCore'][_0x482454(0x15b)]=Sprite_Battler['prototype'][_0x482454(0x17c)],Sprite_Battler[_0x482454(0x61b)][_0x482454(0x17c)]=function(_0x1422bc){const _0x5bcf19=_0x482454,_0x2e7f31=this[_0x5bcf19(0x84e)];VisuMZ['BattleCore'][_0x5bcf19(0x15b)]['call'](this,_0x1422bc),this[_0x5bcf19(0x6bd)](_0x1422bc);if(_0x2e7f31!==_0x1422bc)this['updateShadowScale']();},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x6bd)]=function(_0x7a310c){const _0x573237=_0x482454;if(!_0x7a310c)return;if(!this['_hpGaugeSprite'])return;if(_0x7a310c['isActor']()){}else{if(_0x7a310c[_0x573237(0x186)]()){if(this[_0x573237(0x7cc)]===Sprite_SvEnemy&&!_0x7a310c[_0x573237(0x718)]())return;}}this[_0x573237(0x6e7)][_0x573237(0x2b6)](_0x7a310c,'hp');},Sprite_Battler['prototype'][_0x482454(0x172)]=function(){const _0x463a05=_0x482454;if(!this[_0x463a05(0x84e)])return;if(!this[_0x463a05(0x6e7)])return;const _0x23a1dc=VisuMZ['BattleCore'][_0x463a05(0x4ae)]['HpGauge'],_0x4d62e9=this['_hpGaugeSprite'];_0x4d62e9[_0x463a05(0x47d)]=this[_0x463a05(0x4a9)]();const _0x1b9da8=_0x23a1dc[_0x463a05(0x3ba)],_0x17d5f3=_0x23a1dc[_0x463a05(0x325)];_0x4d62e9['x']=_0x1b9da8,_0x4d62e9['x']+=this[_0x463a05(0x84e)][_0x463a05(0x695)](),_0x4d62e9['y']=-this['height']+_0x17d5f3,_0x4d62e9['y']+=this[_0x463a05(0x84e)][_0x463a05(0x221)](),Spriteset_Battle[_0x463a05(0x7e0)]&&SceneManager[_0x463a05(0x938)][_0x463a05(0x82e)]&&(_0x4d62e9['x']+=this['x'],_0x4d62e9['y']+=this['y']);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x4a9)]=function(){const _0x5818c0=_0x482454;if(!this[_0x5818c0(0x84e)])return![];if(this[_0x5818c0(0x84e)][_0x5818c0(0x761)]())return!![];if(this[_0x5818c0(0x84e)][_0x5818c0(0x2c8)]())return![];if(this[_0x5818c0(0x1f2)]<=0x0)return![];const _0x4140f1=this[_0x5818c0(0x84e)][_0x5818c0(0x614)]()[_0x5818c0(0x305)];if(_0x4140f1[_0x5818c0(0x445)](/<SHOW HP GAUGE>/i))return!![];if(_0x4140f1['match'](/<HIDE HP GAUGE>/i))return![];const _0xb2629d=VisuMZ['BattleCore'][_0x5818c0(0x4ae)][_0x5818c0(0x208)];if(_0xb2629d[_0x5818c0(0x218)]){if(_0xb2629d[_0x5818c0(0x950)]&&BattleManager[_0x5818c0(0x754)]())return!![];if(this[_0x5818c0(0x84e)][_0x5818c0(0x90c)])return![];return this[_0x5818c0(0x84e)][_0x5818c0(0x2c5)]();}return!![];},VisuMZ['BattleCore'][_0x482454(0x185)]=Sprite_Battler[_0x482454(0x61b)][_0x482454(0x2a6)],Sprite_Battler['prototype'][_0x482454(0x2a6)]=function(){const _0x1af567=_0x482454;if(!this[_0x1af567(0x84e)])return![];if(this[_0x1af567(0x326)]>0x0)return!![];return VisuMZ[_0x1af567(0x16e)][_0x1af567(0x185)][_0x1af567(0x2b9)](this);},VisuMZ[_0x482454(0x16e)]['Sprite_Battler_startMove']=Sprite_Battler[_0x482454(0x61b)][_0x482454(0x43c)],Sprite_Battler[_0x482454(0x61b)][_0x482454(0x43c)]=function(_0x3f52f6,_0x4c48f8,_0x2b06a6){const _0x514fb1=_0x482454;this[_0x514fb1(0x478)]()&&VisuMZ[_0x514fb1(0x16e)][_0x514fb1(0x8a4)][_0x514fb1(0x2b9)](this,_0x3f52f6,_0x4c48f8,_0x2b06a6);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x478)]=function(){const _0x5f1d44=_0x482454;if(this['_battler']&&this[_0x5f1d44(0x84e)][_0x5f1d44(0x7a7)]())return![];if(this['_battler']&&!this['_battler'][_0x5f1d44(0x863)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x482454(0x61b)]['stepForward']=function(){},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x747)]=function(){this['startMove'](0x0,0x0,0xc);},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x549)]=function(){},Sprite_Battler[_0x482454(0x61b)][_0x482454(0x52c)]=function(){const _0x2bb588=_0x482454,_0x48a16c=VisuMZ['BattleCore'][_0x2bb588(0x4ae)]['Actor'],_0x1b05e1=this[_0x2bb588(0x84e)]&&this[_0x2bb588(0x84e)][_0x2bb588(0x761)]()?0x1:-0x1,_0x566d37=this[_0x2bb588(0x12b)]-this['_homeX']+_0x1b05e1*_0x48a16c['FlinchDistanceX'],_0x107529=this[_0x2bb588(0x4c4)]-this[_0x2bb588(0x721)]+_0x1b05e1*_0x48a16c[_0x2bb588(0x3ed)],_0x3a4b3d=_0x48a16c[_0x2bb588(0x231)];this['startMove'](_0x566d37,_0x107529,_0x3a4b3d);},VisuMZ[_0x482454(0x16e)][_0x482454(0x5c4)]=Sprite_Actor[_0x482454(0x61b)]['initMembers'],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x4fa)]=function(){const _0x56b84c=_0x482454;VisuMZ[_0x56b84c(0x16e)]['Sprite_Actor_initMembers'][_0x56b84c(0x2b9)](this),this[_0x56b84c(0x7f1)]();},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x320)]=function(){return this['_distortionSprite']||this['_mainSprite']||this;},VisuMZ[_0x482454(0x16e)]['Sprite_Actor_moveToStartPosition']=Sprite_Actor[_0x482454(0x61b)][_0x482454(0x7d1)],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x7d1)]=function(){},Sprite_Actor[_0x482454(0x61b)][_0x482454(0xe4)]=function(_0x4b14b2){const _0x174665=_0x482454;if(SceneManager[_0x174665(0x617)]())return;if(!_0x4b14b2)return;if(!_0x4b14b2[_0x174665(0x478)]())return;VisuMZ[_0x174665(0x16e)][_0x174665(0x95f)]['call'](this);},VisuMZ[_0x482454(0x16e)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x482454(0x61b)][_0x482454(0x629)],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x629)]=function(_0x30b784){const _0x14711a=_0x482454;VisuMZ[_0x14711a(0x16e)]['Settings']['Actor']['HomePosJS']?VisuMZ[_0x14711a(0x16e)][_0x14711a(0x4ae)]['Actor'][_0x14711a(0x6bf)][_0x14711a(0x2b9)](this,_0x30b784):VisuMZ['BattleCore'][_0x14711a(0x489)][_0x14711a(0x2b9)](this,_0x30b784);},VisuMZ[_0x482454(0x16e)][_0x482454(0x7ca)]=Sprite_Actor[_0x482454(0x61b)][_0x482454(0x17c)],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x17c)]=function(_0x54a148){const _0x5edb81=_0x482454;VisuMZ[_0x5edb81(0x16e)]['Sprite_Actor_setBattler']['call'](this,_0x54a148),this[_0x5edb81(0x756)](_0x54a148);},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x756)]=function(_0x1edab7){const _0x21af14=_0x482454;if(!_0x1edab7)return;if(!this[_0x21af14(0x8aa)])return;this[_0x21af14(0x8aa)][_0x21af14(0x935)]['x']=this['_actor'][_0x21af14(0x416)](),this[_0x21af14(0x8aa)][_0x21af14(0x935)]['y']=this[_0x21af14(0x142)]['svBattlerAnchorY'](),this[_0x21af14(0x6e5)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x7fe)]=Sprite_Actor[_0x482454(0x61b)][_0x482454(0x2fa)],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x2fa)]=function(){const _0x5726f2=_0x482454;VisuMZ[_0x5726f2(0x16e)]['Sprite_Actor_update'][_0x5726f2(0x2b9)](this),this['_actor']&&(this[_0x5726f2(0x4c8)](),this[_0x5726f2(0x4e0)]());},VisuMZ[_0x482454(0x16e)]['Sprite_Actor_updateBitmap']=Sprite_Actor[_0x482454(0x61b)][_0x482454(0x3f6)],Sprite_Actor[_0x482454(0x61b)][_0x482454(0x3f6)]=function(){const _0x393faf=_0x482454;VisuMZ[_0x393faf(0x16e)]['Sprite_Actor_updateBitmap']['call'](this),this['_mainSprite']&&this[_0x393faf(0x8aa)]['bitmap']&&this[_0x393faf(0x84e)]&&(this[_0x393faf(0x8aa)][_0x393faf(0x2f4)]['smooth']!==this[_0x393faf(0x84e)]['battlerSmoothImage']()&&(this['_mainSprite'][_0x393faf(0x2f4)]['smooth']=this['_battler'][_0x393faf(0x294)]()));},VisuMZ[_0x482454(0x16e)][_0x482454(0x1ff)]=Sprite_Actor['prototype'][_0x482454(0x307)],Sprite_Actor['prototype']['updateShadow']=function(){const _0x4adb4d=_0x482454;VisuMZ[_0x4adb4d(0x16e)][_0x4adb4d(0x1ff)]['call'](this),this[_0x4adb4d(0x8d8)]();},Sprite_Actor['prototype'][_0x482454(0x8d8)]=function(){const _0x52b306=_0x482454;if(!this[_0x52b306(0x8aa)])return;if(!this[_0x52b306(0x5b5)])return;this[_0x52b306(0x6e5)](),this[_0x52b306(0x6b5)]();},Sprite_Actor[_0x482454(0x61b)]['updateStateSprite']=function(){const _0x42a26f=_0x482454;this[_0x42a26f(0x29e)][_0x42a26f(0x3a5)]['x']=0x1/(this[_0x42a26f(0x3a5)]['x']||0.001),this[_0x42a26f(0x29e)][_0x42a26f(0x3a5)]['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x4e0)]=function(){const _0x495d13=_0x482454;if(!$gameSystem[_0x495d13(0x447)]()&&this[_0x495d13(0x7cc)]===Sprite_Actor){const _0x2d7d44=Scene_Battle[_0x495d13(0x61b)][_0x495d13(0x2cb)]();[_0x495d13(0x609),_0x495d13(0x1fa),'portrait','border'][_0x495d13(0x4df)](_0x2d7d44)&&(this[_0x495d13(0x1f2)]=0x0);}},Sprite_Actor[_0x482454(0x61b)]['refreshMotion']=function(){const _0x161d22=_0x482454,_0x3bd90e=this[_0x161d22(0x142)];if(_0x3bd90e){const _0x287964=_0x3bd90e['stateMotionIndex']();if(_0x3bd90e['isInputting']()||_0x3bd90e[_0x161d22(0x52d)]())this['startMotion'](_0x161d22(0x681));else{if(_0x287964===0x3)this[_0x161d22(0x12a)]('dead');else{if(_0x287964===0x2)this[_0x161d22(0x12a)](_0x161d22(0x78a));else{if(this['forceEscapeSprite'])this[_0x161d22(0x12a)](_0x161d22(0x69c));else{if(_0x3bd90e[_0x161d22(0x400)]())this['startMotion'](_0x161d22(0x223));else{if(_0x3bd90e[_0x161d22(0x21c)]())this[_0x161d22(0x12a)]('chant');else{if(_0x3bd90e[_0x161d22(0x740)]()||_0x3bd90e[_0x161d22(0x10c)]())this[_0x161d22(0x12a)](_0x161d22(0x486));else{if(_0x287964===0x1)this[_0x161d22(0x12a)](_0x161d22(0x661));else{if(_0x3bd90e[_0x161d22(0x33f)]())this[_0x161d22(0x12a)](_0x161d22(0x401));else{if(_0x3bd90e['isUndecided']())this[_0x161d22(0x12a)]('walk');else _0x3bd90e['currentAction']()?this[_0x161d22(0x12a)](_0x161d22(0x223)):this[_0x161d22(0x12a)](_0x161d22(0x681));}}}}}}}}}}},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x549)]=function(){const _0x572d6f=_0x482454,_0x422886=0xa,_0x303017=0x12c*_0x422886,_0x32cc1d=0x1e*_0x422886;this[_0x572d6f(0x43c)](_0x303017,0x0,_0x32cc1d);},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x180)]=function(){const _0x23841d=_0x482454;Sprite_Battler[_0x23841d(0x61b)][_0x23841d(0x180)]['call'](this);},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x16d)]=function(){const _0x2dbf77=_0x482454;return Sprite_Battler[_0x2dbf77(0x46f)];},Sprite_Weapon['prototype'][_0x482454(0x5e0)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x37d)]=function(){},Sprite_Actor['prototype'][_0x482454(0x1b8)]=function(){},Sprite_Actor['prototype'][_0x482454(0x773)]=function(){const _0x12d19c=_0x482454;if(this[_0x12d19c(0x603)]&&++this[_0x12d19c(0x903)]>=this[_0x12d19c(0x16d)]()){if(this[_0x12d19c(0x603)][_0x12d19c(0x7e4)])this[_0x12d19c(0x527)]=(this[_0x12d19c(0x527)]+0x1)%0x4;else this[_0x12d19c(0x527)]<0x2?this[_0x12d19c(0x527)]++:this['refreshMotion']();this['_motionCount']=0x0;}},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x73c)]=function(_0x25f50a){const _0x34eac2=_0x482454;if(_0x25f50a===_0x34eac2(0x154))this[_0x34eac2(0x3f4)]=!![];if(this[_0x34eac2(0x84e)]&&this[_0x34eac2(0x84e)][_0x34eac2(0x7a7)]()){this[_0x34eac2(0x603)]=Sprite_Actor['MOTIONS']['dead'];return;}const _0x597e67=Sprite_Actor[_0x34eac2(0x59e)][_0x25f50a];this[_0x34eac2(0x603)]=_0x597e67,this[_0x34eac2(0x903)]=0x0,this[_0x34eac2(0x527)]=0x0;},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x10d)]=function(_0x163705){const _0x46ac4c=_0x482454;this['adjustWeaponSpriteOffset'](),this[_0x46ac4c(0x214)][_0x46ac4c(0x2b6)](_0x163705),this[_0x46ac4c(0x142)]['clearWeaponAnimation']();},Sprite_Actor['prototype'][_0x482454(0x6c3)]=function(){const _0xf86f09=_0x482454;let _0x6ba1d2=-0x10,_0x10bf9c=this[_0xf86f09(0x4c6)]*0.5;const _0x484b4b=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0xea92bc=this[_0xf86f09(0x84e)][_0xf86f09(0x6e1)]()[_0xf86f09(0x597)](_0x39d72d=>_0x39d72d&&_0x39d72d['note']['match'](_0x484b4b)?Number(RegExp['$1']):0x0),_0x102cc9=this[_0xf86f09(0x84e)][_0xf86f09(0x6e1)]()['map'](_0x3fafae=>_0x3fafae&&_0x3fafae[_0xf86f09(0x305)][_0xf86f09(0x445)](_0x484b4b)?Number(RegExp['$2']):0x0);_0x6ba1d2=_0xea92bc['reduce']((_0x11e5df,_0x347505)=>_0x11e5df+_0x347505,_0x6ba1d2),_0x10bf9c=_0x102cc9['reduce']((_0x46fc01,_0x59b37c)=>_0x46fc01+_0x59b37c,_0x10bf9c),this[_0xf86f09(0x214)]['x']=_0x6ba1d2,this[_0xf86f09(0x214)]['y']=_0x10bf9c,this['_weaponSprite'][_0xf86f09(0x2fa)]();},Sprite_Weapon[_0x482454(0x61b)]['setup']=function(_0x5a5d34){const _0x4053f1=_0x482454;this[_0x4053f1(0x4d1)]=_0x5a5d34,this['_animationCount']=-0x1,this['_pattern']=0x0,this['loadBitmap'](),this[_0x4053f1(0x457)]();},Sprite_Actor[_0x482454(0x61b)][_0x482454(0x875)]=function(){},Sprite_Actor[_0x482454(0x61b)][_0x482454(0xde)]=function(){const _0xf39cf3=_0x482454,_0x4abff8=VisuMZ[_0xf39cf3(0x16e)][_0xf39cf3(0x4ae)][_0xf39cf3(0x1ee)],_0x126de4=_0x4abff8[_0xf39cf3(0x968)],_0x11e159=_0x4abff8[_0xf39cf3(0x798)],_0x3df290=_0x4abff8[_0xf39cf3(0x6cb)];this[_0xf39cf3(0x43c)](-_0x126de4,-_0x11e159,_0x3df290);},VisuMZ['BattleCore'][_0x482454(0x536)]=Sprite_Actor[_0x482454(0x61b)]['updateFrame'],Sprite_Actor[_0x482454(0x61b)]['updateFrame']=function(){const _0x1da889=_0x482454;this[_0x1da889(0x419)](),VisuMZ[_0x1da889(0x16e)][_0x1da889(0x536)][_0x1da889(0x2b9)](this);},Sprite_Actor['prototype'][_0x482454(0x419)]=function(){const _0x14518d=_0x482454;if(this[_0x14518d(0x84e)]&&this[_0x14518d(0x84e)][_0x14518d(0x892)]){const _0x371d58=this['_battler'][_0x14518d(0x892)];this[_0x14518d(0x603)]=Sprite_Actor[_0x14518d(0x59e)][_0x371d58[_0x14518d(0xe3)]],this[_0x14518d(0x527)]=_0x371d58['pattern'];const _0x4b15e6=this['_weaponSprite'];_0x4b15e6['freezeFrame'](_0x371d58[_0x14518d(0x5b2)],_0x371d58[_0x14518d(0x733)]),this[_0x14518d(0x6c3)]();}},Sprite_Weapon[_0x482454(0x61b)][_0x482454(0x719)]=function(_0x744a2f,_0x727684){const _0x534e26=_0x482454;this['_weaponImageId']=_0x744a2f,this[_0x534e26(0x26b)]=-Infinity,this['_pattern']=_0x727684,this['loadBitmap'](),this[_0x534e26(0x457)]();},Sprite_Enemy['prototype'][_0x482454(0x4fa)]=function(){const _0x48b972=_0x482454;Sprite_Battler[_0x48b972(0x61b)][_0x48b972(0x4fa)][_0x48b972(0x2b9)](this),this['_enemy']=null,this[_0x48b972(0x664)]=![],this[_0x48b972(0x40b)]='',this[_0x48b972(0x36c)]=0x0,this['_effectType']=null,this[_0x48b972(0x675)]=0x0,this[_0x48b972(0x37a)]=0x0,this[_0x48b972(0x856)](),this[_0x48b972(0x267)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x7a2)]=Sprite_Enemy[_0x482454(0x61b)]['update'],Sprite_Enemy[_0x482454(0x61b)]['update']=function(){const _0x5b0c24=_0x482454;VisuMZ[_0x5b0c24(0x16e)][_0x5b0c24(0x7a2)]['call'](this),this[_0x5b0c24(0x6e5)]();},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x856)]=function(){const _0x54ffbe=_0x482454;this[_0x54ffbe(0x8aa)]=new Sprite(),this['_mainSprite'][_0x54ffbe(0x935)]['x']=0.5,this[_0x54ffbe(0x8aa)][_0x54ffbe(0x935)]['y']=0x1,this['addChild'](this[_0x54ffbe(0x8aa)]),this[_0x54ffbe(0x7f1)]();},Sprite_Enemy['prototype'][_0x482454(0x320)]=function(){const _0x1e0056=_0x482454;return this[_0x1e0056(0x8db)]||this[_0x1e0056(0x8aa)]||this;},Sprite_Enemy['prototype'][_0x482454(0x2c1)]=function(_0x4b7652){const _0x13e512=_0x482454;this[_0x13e512(0x2f4)]=new Bitmap(0x1,0x1);if(this[_0x13e512(0x718)]()){const _0x28e6fa=this[_0x13e512(0x148)][_0x13e512(0x6e3)]();this[_0x13e512(0x2f4)]=new Bitmap(_0x28e6fa[_0x13e512(0x913)],_0x28e6fa[_0x13e512(0x4c6)]),this[_0x13e512(0x8aa)]['bitmap']=new Bitmap(0x1,0x1);}else $gameSystem[_0x13e512(0x447)]()?(this['_mainSprite'][_0x13e512(0x2f4)]=ImageManager['loadSvEnemy'](_0x4b7652),this[_0x13e512(0x8aa)][_0x13e512(0x2f4)]['addLoadListener'](this[_0x13e512(0x969)]['bind'](this))):(this[_0x13e512(0x8aa)][_0x13e512(0x2f4)]=ImageManager['loadEnemy'](_0x4b7652),this[_0x13e512(0x8aa)][_0x13e512(0x2f4)][_0x13e512(0x1b0)](this[_0x13e512(0x969)][_0x13e512(0x7be)](this)));},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x969)]=function(){const _0x451a6e=_0x482454,_0x4420c9=this[_0x451a6e(0x8aa)]['bitmap'];_0x4420c9&&(this[_0x451a6e(0x2f4)]=new Bitmap(_0x4420c9[_0x451a6e(0x913)],_0x4420c9[_0x451a6e(0x4c6)]));},VisuMZ[_0x482454(0x16e)][_0x482454(0x728)]=Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x58e)],Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x58e)]=function(_0x54b1d5){const _0x3938e4=_0x482454;this[_0x3938e4(0x8aa)]&&this[_0x3938e4(0x8aa)][_0x3938e4(0x58e)](_0x54b1d5);},VisuMZ[_0x482454(0x16e)][_0x482454(0x8ed)]=Sprite_Enemy[_0x482454(0x61b)]['initVisibility'],Sprite_Enemy['prototype'][_0x482454(0x3a3)]=function(){const _0x148f3e=_0x482454;this[_0x148f3e(0x276)]()?VisuMZ[_0x148f3e(0x16e)][_0x148f3e(0x8ed)][_0x148f3e(0x2b9)](this):(this[_0x148f3e(0x664)]=!this[_0x148f3e(0x148)][_0x148f3e(0x2c8)](),!this[_0x148f3e(0x664)]&&(this[_0x148f3e(0x1f2)]=0x0));},VisuMZ['BattleCore'][_0x482454(0x787)]=Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x2d9)],Sprite_Enemy['prototype'][_0x482454(0x2d9)]=function(){const _0x26f873=_0x482454;if(this[_0x26f873(0x276)]())VisuMZ[_0x26f873(0x16e)]['Sprite_Enemy_updateCollapse'][_0x26f873(0x2b9)](this);},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x457)]=function(){const _0x218130=_0x482454;Sprite_Battler[_0x218130(0x61b)][_0x218130(0x457)][_0x218130(0x2b9)](this);const _0x24f771=this[_0x218130(0x320)]()||this;if(!_0x24f771)return;!_0x24f771[_0x218130(0x2f4)]&&(_0x24f771[_0x218130(0x2f4)]=new Bitmap(this[_0x218130(0x913)],this[_0x218130(0x4c6)])),this[_0x218130(0x2e2)]===_0x218130(0x33e)?this[_0x218130(0x8aa)]['setFrame'](0x0,0x0,this[_0x218130(0x8aa)][_0x218130(0x913)],this['_effectDuration']):_0x24f771[_0x218130(0x5be)](0x0,0x0,_0x24f771[_0x218130(0x2f4)][_0x218130(0x913)],this[_0x218130(0x2f4)][_0x218130(0x4c6)]);},VisuMZ[_0x482454(0x16e)]['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x482454(0x61b)]['updateBossCollapse'],Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x6a4)]=function(){const _0x3e2120=_0x482454;if(this[_0x3e2120(0x276)]())VisuMZ['BattleCore'][_0x3e2120(0x425)][_0x3e2120(0x2b9)](this);},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x2a6)]=function(){const _0x416679=_0x482454;return Sprite_Battler['prototype'][_0x416679(0x2a6)][_0x416679(0x2b9)](this);},VisuMZ['BattleCore'][_0x482454(0x19f)]=Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x4c8)],Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x4c8)]=function(){const _0x4031f2=_0x482454;VisuMZ[_0x4031f2(0x16e)][_0x4031f2(0x19f)]['call'](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy[_0x482454(0x61b)]['updateStateSpriteBattleCore']=function(){const _0x2980d8=_0x482454,_0x5044ae=VisuMZ[_0x2980d8(0x16e)][_0x2980d8(0x4ae)][_0x2980d8(0x8c8)];if(_0x5044ae[_0x2980d8(0x55e)]&&!_0x5044ae['NameLegacy']){this[_0x2980d8(0x376)]['opacity']=0x0;return;}this[_0x2980d8(0x376)]['x']=0x0,this[_0x2980d8(0x376)]['x']+=this[_0x2980d8(0x84e)][_0x2980d8(0x695)](),this['_stateIconSprite']['y']=-this[_0x2980d8(0x2f4)][_0x2980d8(0x4c6)]-this[_0x2980d8(0x376)]['height'],this[_0x2980d8(0x376)]['y']+=this[_0x2980d8(0x84e)][_0x2980d8(0x221)](),this[_0x2980d8(0x376)][_0x2980d8(0x3a5)]['x']=0x1/(this['scale']['x']||0.001),this['_stateIconSprite'][_0x2980d8(0x3a5)]['y']=0x1/(this[_0x2980d8(0x3a5)]['y']||0.001),this['hasSvBattler']()&&(this[_0x2980d8(0x160)][_0x2980d8(0x29e)][_0x2980d8(0x3a5)]['x']=-0x1/(this[_0x2980d8(0x3a5)]['x']||0.001),this[_0x2980d8(0x160)]['_stateSprite'][_0x2980d8(0x3a5)]['y']=0x1/(this[_0x2980d8(0x3a5)]['y']||0.001));},VisuMZ[_0x482454(0x16e)][_0x482454(0x7de)]=Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x17c)],Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x17c)]=function(_0x1f5020){const _0x494dde=_0x482454;VisuMZ[_0x494dde(0x16e)][_0x494dde(0x7de)][_0x494dde(0x2b9)](this,_0x1f5020),this[_0x494dde(0x682)](_0x1f5020);},Sprite_Enemy['prototype']['setSvBattlerSprite']=function(_0x4cedc6){const _0x37f9e4=_0x482454;!this[_0x37f9e4(0x160)]&&(this[_0x37f9e4(0x160)]=new Sprite_SvEnemy(_0x4cedc6),this[_0x37f9e4(0x7f1)]()),this[_0x37f9e4(0x160)][_0x37f9e4(0x17c)](_0x4cedc6);},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x718)]=function(){const _0x25046c=_0x482454;return this[_0x25046c(0x148)]&&this[_0x25046c(0x148)][_0x25046c(0x718)]();},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x276)]=function(){const _0x301918=_0x482454;return this[_0x301918(0x718)]()?this[_0x301918(0x148)][_0x301918(0x276)]():!![];},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x5c9)]=function(){const _0x7e6be0=_0x482454;this[_0x7e6be0(0x718)]()&&this[_0x7e6be0(0x160)]['refreshMotion']();},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x73c)]=function(_0x5d7929){const _0x4cfcba=_0x482454;if(this[_0x4cfcba(0x718)]())this[_0x4cfcba(0x160)][_0x4cfcba(0x73c)](_0x5d7929);},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0x10d)]=function(_0x27d9f7){const _0x3e523d=_0x482454;if(this[_0x3e523d(0x718)]())this['_svBattlerSprite'][_0x3e523d(0x10d)](_0x27d9f7);},Sprite_Enemy[_0x482454(0x61b)][_0x482454(0xde)]=function(){const _0x3907d0=_0x482454,_0x24350a=VisuMZ[_0x3907d0(0x16e)]['Settings'][_0x3907d0(0x1ee)],_0x337be8=_0x24350a[_0x3907d0(0x968)],_0x58f7c1=_0x24350a[_0x3907d0(0x798)],_0x2b35df=_0x24350a[_0x3907d0(0x6cb)];this['startMove'](_0x337be8,_0x58f7c1,_0x2b35df);};function Sprite_SvEnemy(){const _0x540722=_0x482454;this[_0x540722(0x63a)](...arguments);}Sprite_SvEnemy[_0x482454(0x61b)]=Object[_0x482454(0x665)](Sprite_Actor[_0x482454(0x61b)]),Sprite_SvEnemy[_0x482454(0x61b)]['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x63a)]=function(_0x3af9b3){const _0x44612c=_0x482454;Sprite_Actor[_0x44612c(0x61b)][_0x44612c(0x63a)]['call'](this,_0x3af9b3),this[_0x44612c(0x3a5)]['x']=-0x1,this[_0x44612c(0x29e)]['scale']['x']=-0x1;},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x71e)]=function(){},Sprite_SvEnemy['prototype'][_0x482454(0x7d1)]=function(){},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x629)]=function(_0xd7b40a){},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x307)]=function(){},Sprite_SvEnemy[_0x482454(0x61b)]['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x4c8)]=function(){const _0x45e9cd=_0x482454;this[_0x45e9cd(0x29e)][_0x45e9cd(0x47d)]=![];},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x3f6)]=function(){const _0x276299=_0x482454;Sprite_Battler[_0x276299(0x61b)]['updateBitmap'][_0x276299(0x2b9)](this);const _0x1030a1=this['_actor']['svBattlerName']();this[_0x276299(0x40b)]!==_0x1030a1&&(this[_0x276299(0x40b)]=_0x1030a1,this['_mainSprite'][_0x276299(0x2f4)]=ImageManager[_0x276299(0xf5)](_0x1030a1)),this[_0x276299(0x8aa)]&&this['_mainSprite'][_0x276299(0x2f4)]&&this[_0x276299(0x84e)]&&(this[_0x276299(0x8aa)][_0x276299(0x2f4)][_0x276299(0x843)]!==this['_battler'][_0x276299(0x294)]()&&(this[_0x276299(0x8aa)][_0x276299(0x2f4)]['smooth']=this[_0x276299(0x84e)][_0x276299(0x294)]()));},Sprite_SvEnemy[_0x482454(0x61b)]['retreat']=function(){},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x43c)]=function(_0x41c4e5,_0x3d9ef6,_0x4fdece){const _0x43bab5=_0x482454;if(this[_0x43bab5(0x5e4)])this['parent'][_0x43bab5(0x43c)](_0x41c4e5,_0x3d9ef6,_0x4fdece);},Sprite_SvEnemy['prototype'][_0x482454(0x5c9)]=function(){const _0x3a8e87=_0x482454,_0x5a836e=this['_actor'];if(_0x5a836e){const _0x26af3f=_0x5a836e[_0x3a8e87(0x427)]();if(_0x5a836e[_0x3a8e87(0xe0)]()||_0x5a836e[_0x3a8e87(0x52d)]())this[_0x3a8e87(0x12a)](_0x3a8e87(0x681));else{if(_0x26af3f===0x3)this[_0x3a8e87(0x12a)](_0x3a8e87(0x2eb));else{if(_0x26af3f===0x2)this[_0x3a8e87(0x12a)](_0x3a8e87(0x78a));else{if(_0x5a836e[_0x3a8e87(0x21c)]())this[_0x3a8e87(0x12a)](_0x3a8e87(0x187));else{if(_0x5a836e[_0x3a8e87(0x740)]()||_0x5a836e[_0x3a8e87(0x10c)]())this[_0x3a8e87(0x12a)](_0x3a8e87(0x486));else{if(_0x26af3f===0x1)this[_0x3a8e87(0x12a)](_0x3a8e87(0x661));else{if(_0x5a836e['isDying']())this['startMotion']('dying');else _0x5a836e['isUndecided']()?this[_0x3a8e87(0x12a)](_0x3a8e87(0x681)):this[_0x3a8e87(0x12a)](_0x5a836e[_0x3a8e87(0x6e3)]()[_0x3a8e87(0x3ce)]||'walk');}}}}}}}},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x1b2)]=function(){const _0x594e31=_0x482454;return this[_0x594e31(0x5e4)]?this[_0x594e31(0x5e4)][_0x594e31(0x71f)]===0x0&&this[_0x594e31(0x5e4)][_0x594e31(0x7c0)]===0x0:!![];},Sprite_SvEnemy[_0x482454(0x61b)][_0x482454(0x4da)]=function(){},VisuMZ[_0x482454(0x16e)][_0x482454(0x28e)]=Sprite_Animation[_0x482454(0x61b)][_0x482454(0x777)],Sprite_Animation[_0x482454(0x61b)][_0x482454(0x777)]=function(_0x53ee5f){const _0x4c44e9=_0x482454;return _0x53ee5f[_0x4c44e9(0x8db)]?this['targetDistortionSpritePosition'](_0x53ee5f):VisuMZ['BattleCore'][_0x4c44e9(0x28e)][_0x4c44e9(0x2b9)](this,_0x53ee5f);},Sprite_Animation[_0x482454(0x61b)]['targetDistortionSpritePosition']=function(_0x511281){const _0x41cf95=_0x482454;let _0x511a62=_0x511281['x'],_0x30c079=_0x511281['y'],_0x2f9a28=_0x511281[_0x41cf95(0x4c6)],_0x3cece4=_0x511281[_0x41cf95(0x8db)]['scale']['y'];_0x511281['x']=_0x511281[_0x41cf95(0x12b)]+_0x511281[_0x41cf95(0x6a3)](),_0x511281['y']=_0x511281[_0x41cf95(0x4c4)]+_0x511281['extraPositionY'](),_0x511281['height']*=_0x3cece4;let _0x3a0fef=VisuMZ[_0x41cf95(0x16e)][_0x41cf95(0x28e)][_0x41cf95(0x2b9)](this,_0x511281);return _0x511281['x']=_0x511a62,_0x511281['y']=_0x30c079,_0x511281[_0x41cf95(0x4c6)]=_0x2f9a28,_0x3a0fef;},VisuMZ[_0x482454(0x16e)][_0x482454(0x53f)]=Sprite_AnimationMV[_0x482454(0x61b)][_0x482454(0x6b3)],Sprite_AnimationMV[_0x482454(0x61b)][_0x482454(0x6b3)]=function(){const _0x427971=_0x482454;VisuMZ['BattleCore'][_0x427971(0x53f)][_0x427971(0x2b9)](this);if(this['_animation'][_0x427971(0x38a)]===0x3){if(this['x']===0x0)this['x']=Math['round'](Graphics['width']/0x2);if(this['y']===0x0)this['y']=Math[_0x427971(0x5d9)](Graphics[_0x427971(0x4c6)]/0x2);}},Sprite_Damage[_0x482454(0x61b)][_0x482454(0xf2)]=function(_0x2d22b3){const _0x40b9d2=_0x482454,_0x2ca35c=_0x2d22b3[_0x40b9d2(0x504)]()||_0x2d22b3[_0x40b9d2(0x125)]();if(_0x2ca35c[_0x40b9d2(0x821)]||_0x2ca35c[_0x40b9d2(0x92e)])this['_colorType']=0x0,this[_0x40b9d2(0x6c9)]();else{if(_0x2ca35c[_0x40b9d2(0x1dd)])this['_colorType']=_0x2ca35c[_0x40b9d2(0x327)]>=0x0?0x0:0x1,this[_0x40b9d2(0x920)](_0x2ca35c[_0x40b9d2(0x327)]);else _0x2d22b3[_0x40b9d2(0x825)]()&&_0x2ca35c['mpDamage']!==0x0&&(this[_0x40b9d2(0x111)]=_0x2ca35c['mpDamage']>=0x0?0x2:0x3,this[_0x40b9d2(0x920)](_0x2ca35c[_0x40b9d2(0x14d)]));}_0x2ca35c[_0x40b9d2(0x12c)]&&this[_0x40b9d2(0x3e9)]();},Sprite_Damage[_0x482454(0x61b)][_0x482454(0x2b6)]=function(_0x520d19){},Sprite_Damage[_0x482454(0x61b)]['createDigits']=function(_0x6d369){const _0x43a6b1=_0x482454;let _0x21fd56=this[_0x43a6b1(0x742)](_0x6d369);const _0x1b84e7=this[_0x43a6b1(0x8be)](),_0x2a6b92=Math[_0x43a6b1(0x139)](_0x1b84e7*0.75);for(let _0x20abf5=0x0;_0x20abf5<_0x21fd56[_0x43a6b1(0x403)];_0x20abf5++){const _0x202ca2=this[_0x43a6b1(0x31d)](_0x2a6b92,_0x1b84e7);_0x202ca2[_0x43a6b1(0x2f4)][_0x43a6b1(0x72c)](_0x21fd56[_0x20abf5],0x0,0x0,_0x2a6b92,_0x1b84e7,_0x43a6b1(0x59d)),_0x202ca2['x']=(_0x20abf5-(_0x21fd56['length']-0x1)/0x2)*_0x2a6b92,_0x202ca2['dy']=-_0x20abf5;}},Sprite_Damage[_0x482454(0x61b)][_0x482454(0x742)]=function(_0x53e817){const _0x110fd5=_0x482454;let _0x2044e6=Math[_0x110fd5(0x36b)](_0x53e817)[_0x110fd5(0x253)]();this[_0x110fd5(0x8d7)]()&&(_0x2044e6=VisuMZ[_0x110fd5(0x530)](_0x2044e6));const _0x4b03c5=VisuMZ['BattleCore'][_0x110fd5(0x4ae)][_0x110fd5(0x448)];let _0x5fdd0='',_0x52cdc4='';switch(this[_0x110fd5(0x111)]){case 0x0:_0x5fdd0=_0x4b03c5[_0x110fd5(0x8f2)]||_0x110fd5(0x8fa),_0x52cdc4=TextManager['hp'];if(_0x53e817===0x0)_0x5fdd0='%1';break;case 0x1:_0x5fdd0=_0x4b03c5[_0x110fd5(0x959)]||'+%1',_0x52cdc4=TextManager['hp'];break;case 0x2:_0x5fdd0=_0x4b03c5[_0x110fd5(0x90a)]||_0x110fd5(0x54c),_0x52cdc4=TextManager['mp'];break;case 0x3:_0x5fdd0=_0x4b03c5['mpHealingFmt']||_0x110fd5(0x306),_0x52cdc4=TextManager['mp'];break;}return _0x5fdd0[_0x110fd5(0x355)](_0x2044e6,_0x52cdc4)[_0x110fd5(0x910)]();},Sprite_Damage[_0x482454(0x61b)][_0x482454(0x8d7)]=function(){const _0x3de1e7=_0x482454;return Imported[_0x3de1e7(0x49a)]?VisuMZ[_0x3de1e7(0x558)][_0x3de1e7(0x4ae)][_0x3de1e7(0x1d4)][_0x3de1e7(0x6aa)]:![];},Sprite_Damage[_0x482454(0x61b)][_0x482454(0x3e9)]=function(){const _0x406f78=_0x482454,_0x175eec=VisuMZ['BattleCore'][_0x406f78(0x4ae)][_0x406f78(0x448)];this['_flashColor']=_0x175eec[_0x406f78(0x64e)][_0x406f78(0x808)](0x0),this[_0x406f78(0x73f)]=_0x175eec[_0x406f78(0x70e)];},Sprite_Damage[_0x482454(0x61b)][_0x482454(0x713)]=function(_0x41a9a8,_0x5b5e8a){const _0x508dbf=_0x482454;this[_0x508dbf(0x1fe)]=_0x5b5e8a['flashColor']||[0x0,0x0,0x0,0x0],this[_0x508dbf(0x1fe)]=JsonEx[_0x508dbf(0x627)](this['_flashColor']),this[_0x508dbf(0x73f)]=_0x5b5e8a[_0x508dbf(0x8a9)]||0x0;const _0x24f6d9=this[_0x508dbf(0x8be)](),_0x2651de=Math[_0x508dbf(0x139)](_0x24f6d9*0x1e),_0x1f9b86=this[_0x508dbf(0x31d)](_0x2651de,_0x24f6d9);_0x1f9b86['bitmap'][_0x508dbf(0x3f2)]=ColorManager['getColor'](_0x5b5e8a[_0x508dbf(0x3f2)]),_0x1f9b86[_0x508dbf(0x2f4)]['drawText'](_0x41a9a8,0x0,0x0,_0x2651de,_0x24f6d9,_0x508dbf(0x59d)),_0x1f9b86['dy']=0x0;},Sprite_Damage['prototype'][_0x482454(0x712)]=function(_0x8ab470,_0x31fb95,_0x26c374){const _0x1eb161=_0x482454,_0x55d1c7=Math[_0x1eb161(0x1e3)](this[_0x1eb161(0x8be)](),ImageManager[_0x1eb161(0x3a0)]),_0x211470=Math['floor'](_0x55d1c7*0x1e),_0x5d6037=this[_0x1eb161(0x31d)](_0x211470,_0x55d1c7),_0x3c8745=ImageManager[_0x1eb161(0x8a0)]/0x2,_0x2b7dda=_0x5d6037[_0x1eb161(0x2f4)][_0x1eb161(0x333)](_0x31fb95+'\x20');_0x5d6037[_0x1eb161(0x2f4)][_0x1eb161(0x3f2)]=ColorManager[_0x1eb161(0x72a)](_0x26c374[_0x1eb161(0x3f2)]),_0x5d6037['bitmap'][_0x1eb161(0x72c)](_0x31fb95,_0x3c8745,0x0,_0x211470-_0x3c8745,_0x55d1c7,_0x1eb161(0x59d));const _0x2db705=Math[_0x1eb161(0x5d9)]((_0x55d1c7-ImageManager[_0x1eb161(0x3a0)])/0x2),_0x5466fb=_0x211470/0x2-ImageManager[_0x1eb161(0x8a0)]-_0x2b7dda/0x2+_0x3c8745/0x2,_0x5e7c63=ImageManager['loadSystem']('IconSet'),_0x13366d=ImageManager[_0x1eb161(0x8a0)],_0x131b01=ImageManager['iconHeight'],_0x421413=_0x8ab470%0x10*_0x13366d,_0x4c2535=Math[_0x1eb161(0x139)](_0x8ab470/0x10)*_0x131b01;_0x5d6037[_0x1eb161(0x2f4)]['blt'](_0x5e7c63,_0x421413,_0x4c2535,_0x13366d,_0x131b01,_0x5466fb,_0x2db705),this[_0x1eb161(0x1fe)]=_0x26c374[_0x1eb161(0x5a1)]||[0x0,0x0,0x0,0x0],this[_0x1eb161(0x1fe)]=JsonEx[_0x1eb161(0x627)](this['_flashColor']),this['_flashDuration']=_0x26c374[_0x1eb161(0x8a9)]||0x0,_0x5d6037['dy']=0x0;},VisuMZ['BattleCore'][_0x482454(0x556)]=Sprite_StateIcon[_0x482454(0x61b)][_0x482454(0x457)],Sprite_StateIcon['prototype'][_0x482454(0x457)]=function(){const _0x32ccc7=_0x482454;VisuMZ[_0x32ccc7(0x16e)]['Sprite_StateIcon_updateFrame'][_0x32ccc7(0x2b9)](this),this[_0x32ccc7(0x1f2)]=this[_0x32ccc7(0x53c)]>0x0?0xff:0x0;},VisuMZ['BattleCore']['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x482454(0x61b)][_0x482454(0x2c1)],Sprite_Weapon[_0x482454(0x61b)][_0x482454(0x2c1)]=function(){const _0x15f5ac=_0x482454;VisuMZ[_0x15f5ac(0x16e)][_0x15f5ac(0x1a1)][_0x15f5ac(0x2b9)](this),this[_0x15f5ac(0x2f4)]&&(this[_0x15f5ac(0x2f4)][_0x15f5ac(0x843)]=VisuMZ[_0x15f5ac(0x16e)][_0x15f5ac(0x4ae)][_0x15f5ac(0x2ef)][_0x15f5ac(0x6c2)]);};function Sprite_HpGauge(){const _0x44e760=_0x482454;this[_0x44e760(0x63a)](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x482454(0x61b)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x482454(0x61b)][_0x482454(0x63a)]=function(){const _0x47c3af=_0x482454;Sprite_Gauge[_0x47c3af(0x61b)][_0x47c3af(0x63a)][_0x47c3af(0x2b9)](this);},Sprite_HpGauge[_0x482454(0x61b)][_0x482454(0x601)]=function(){return 0x0;},Sprite_HpGauge['prototype'][_0x482454(0x482)]=function(){const _0x7e45b9=_0x482454;this[_0x7e45b9(0x2f4)][_0x7e45b9(0x4f7)]();const _0x1079ed=this[_0x7e45b9(0x5fe)]();!isNaN(_0x1079ed)&&this[_0x7e45b9(0x54d)]();};function Sprite_EnemyName(){this['initialize'](...arguments);}Sprite_EnemyName[_0x482454(0x61b)]=Object[_0x482454(0x665)](Sprite_Name[_0x482454(0x61b)]),Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x7cc)]=Sprite_EnemyName,Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x63a)]=function(){const _0x57ea9c=_0x482454;Sprite_Name[_0x57ea9c(0x61b)][_0x57ea9c(0x63a)]['call'](this),this[_0x57ea9c(0x4cc)]();},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x4fa)]=function(){const _0x3d2e0d=_0x482454;Sprite_Name[_0x3d2e0d(0x61b)][_0x3d2e0d(0x4fa)][_0x3d2e0d(0x2b9)](this),this[_0x3d2e0d(0x1f2)]=0x0,this['_linkedSprite']=null,this['anchor']['x']=0.5,this[_0x3d2e0d(0x935)]['y']=0x0;},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x4cc)]=function(){const _0x3dc74f=_0x482454;VisuMZ['BattleCore'][_0x3dc74f(0x4ae)][_0x3dc74f(0x8c8)][_0x3dc74f(0x55e)]&&(this[_0x3dc74f(0x376)]=new Sprite_StateIcon(),this[_0x3dc74f(0x83b)](this[_0x3dc74f(0x376)]));},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x21f)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x4a8)]=function(){const _0xf2db72=_0x482454;return this[_0xf2db72(0x865)]=this['_lineHeight']||Window_Base[_0xf2db72(0x61b)][_0xf2db72(0x7eb)]()||0x24,this[_0xf2db72(0x865)]*0x4;},Sprite_EnemyName['prototype'][_0x482454(0x8be)]=function(){const _0x3ff182=_0x482454;return VisuMZ[_0x3ff182(0x16e)][_0x3ff182(0x4ae)]['Enemy']['NameFontSize']||$gameSystem[_0x3ff182(0x2ac)]();},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x6b8)]=function(_0xf740a6){const _0x190f27=_0x482454;this[_0x190f27(0x3d4)]=_0xf740a6;},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x2fa)]=function(){const _0x23be7b=_0x482454;Sprite_Name[_0x23be7b(0x61b)]['update'][_0x23be7b(0x2b9)](this),this[_0x23be7b(0x86e)](),this[_0x23be7b(0x6b3)](),this['updateAttachedSprites'](),this['updateOpacity']();},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x482)]=function(){const _0x2d2f66=_0x482454;this['_cacheTextWidth']=undefined;const _0x248904=this[_0x2d2f66(0x7cb)](),_0x1db495=this[_0x2d2f66(0x21f)](),_0x39fdfd=Window_Base[_0x2d2f66(0x61b)][_0x2d2f66(0x7eb)]();this[_0x2d2f66(0x83f)](),this[_0x2d2f66(0x2f4)][_0x2d2f66(0x4f7)](),this[_0x2d2f66(0x2f4)][_0x2d2f66(0x72c)](_0x248904,0x0,0x0,_0x1db495,_0x39fdfd,_0x2d2f66(0x59d));},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x86e)]=function(){const _0x27896a=_0x482454;if(!this[_0x27896a(0x3d4)])return;this[_0x27896a(0x84e)]!==this[_0x27896a(0x3d4)][_0x27896a(0x84e)]&&this[_0x27896a(0x2b6)](this[_0x27896a(0x3d4)][_0x27896a(0x84e)]);},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x6b3)]=function(){const _0x6ec73a=_0x482454;if(!this[_0x6ec73a(0x3d4)])return;this[_0x6ec73a(0x865)]=this[_0x6ec73a(0x865)]||Window_Base['prototype'][_0x6ec73a(0x7eb)](),this['x']=this['_linkedSprite'][_0x6ec73a(0x12b)],this['y']=this[_0x6ec73a(0x3d4)][_0x6ec73a(0x4c4)]-this[_0x6ec73a(0x865)]*0.5;const _0x571a7c=VisuMZ[_0x6ec73a(0x16e)][_0x6ec73a(0x4ae)][_0x6ec73a(0x8c8)];this['x']+=_0x571a7c[_0x6ec73a(0x352)]||0x0,this['y']+=_0x571a7c[_0x6ec73a(0x1b4)]||0x0;},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x90d)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x88c)]=function(){const _0x2047fd=_0x482454;if(!this[_0x2047fd(0x376)])return;this[_0x2047fd(0x84e)]!==this[_0x2047fd(0x376)][_0x2047fd(0x84e)]&&this[_0x2047fd(0x376)][_0x2047fd(0x2b6)](this[_0x2047fd(0x84e)]);const _0x80c0de=this[_0x2047fd(0x408)]();this['_lineHeight']=this[_0x2047fd(0x865)]||Window_Base[_0x2047fd(0x61b)][_0x2047fd(0x7eb)](),this[_0x2047fd(0x376)]['x']=Math[_0x2047fd(0x5d9)]((_0x80c0de+ImageManager[_0x2047fd(0x8a0)])/0x2)+0x8,this[_0x2047fd(0x376)]['y']=this[_0x2047fd(0x865)]/0x2;const _0x4fe4ce=VisuMZ[_0x2047fd(0x16e)][_0x2047fd(0x4ae)]['Enemy'];this[_0x2047fd(0x376)]['x']+=_0x4fe4ce[_0x2047fd(0x5ee)]||0x0,this[_0x2047fd(0x376)]['y']+=_0x4fe4ce[_0x2047fd(0x820)]||0x0;},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x588)]=function(){const _0x3013e6=_0x482454,_0x257bef=this[_0x3013e6(0x780)]();if(_0x257bef&&this[_0x3013e6(0x1f2)]<0xff)this[_0x3013e6(0x1f2)]+=0x10;else!_0x257bef&&this[_0x3013e6(0x1f2)]>0x0&&(this[_0x3013e6(0x1f2)]-=0x10);},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x780)]=function(){const _0x440381=_0x482454;if(this[_0x440381(0x56e)]())return![];else{if(!this[_0x440381(0x84e)])return![];else{if(this[_0x440381(0x84e)]['isDead']())return![];else{if(!this[_0x440381(0x84e)]['isAppeared']())return![];else{if(this[_0x440381(0x4e8)]())return!![];else{if(this[_0x440381(0x522)]())return!![];else{if(this[_0x440381(0x839)]())return!![];else{if(this[_0x440381(0x1f2)]>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x56e)]=function(){const _0x1036d2=_0x482454;return VisuMZ['BattleCore'][_0x1036d2(0x4ae)][_0x1036d2(0x8c8)][_0x1036d2(0x25c)];},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x4e8)]=function(){return![];},Sprite_EnemyName[_0x482454(0x61b)]['isAlwaysVisible']=function(){const _0x4fa732=_0x482454;return VisuMZ[_0x4fa732(0x16e)][_0x4fa732(0x4ae)][_0x4fa732(0x8c8)][_0x4fa732(0x147)];},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x839)]=function(){const _0x448aec=_0x482454;return VisuMZ['BattleCore'][_0x448aec(0x4ae)][_0x448aec(0x8c8)]['NameAlwaysSelectOnly']?this[_0x448aec(0x84e)][_0x448aec(0x555)]():SceneManager[_0x448aec(0x938)][_0x448aec(0x1c2)]&&SceneManager[_0x448aec(0x938)][_0x448aec(0x1c2)][_0x448aec(0x2e7)]&&SceneManager['_scene'][_0x448aec(0x1c2)][_0x448aec(0x557)][_0x448aec(0x4df)](this[_0x448aec(0x84e)]);},Sprite_EnemyName[_0x482454(0x61b)][_0x482454(0x408)]=function(){const _0x497e87=_0x482454;if(!this['_battler'])return 0x0;if(this[_0x497e87(0x101)])return this[_0x497e87(0x101)];const _0x54dea3=this['name']();return this[_0x497e87(0x83f)](),this['_cacheTextWidth']=this[_0x497e87(0x2f4)][_0x497e87(0x333)](_0x54dea3)||0x1,this[_0x497e87(0x101)];},VisuMZ[_0x482454(0x16e)][_0x482454(0x35b)]=Sprite_Battleback[_0x482454(0x61b)][_0x482454(0x1b6)],Sprite_Battleback[_0x482454(0x61b)][_0x482454(0x1b6)]=function(){const _0x36d851=_0x482454,_0x437a73=VisuMZ[_0x36d851(0x16e)][_0x36d851(0x4ae)][_0x36d851(0x575)];if(!_0x437a73)return VisuMZ[_0x36d851(0x16e)]['Sprite_Battleback_adjustPosition'][_0x36d851(0x2b9)](this);const _0x5f090f=String(_0x437a73['DefaultStyle'])||'MZ';switch(_0x5f090f){case'MZ':VisuMZ[_0x36d851(0x16e)][_0x36d851(0x35b)][_0x36d851(0x2b9)](this);break;case _0x36d851(0x625):this[_0x36d851(0x254)]();break;case _0x36d851(0x287):this[_0x36d851(0x7f0)]();break;case _0x36d851(0x4a1):this[_0x36d851(0x6a1)]();break;case _0x36d851(0x3db):this[_0x36d851(0x484)]();break;}},Sprite_Battleback[_0x482454(0x61b)]['adjustPosition_1for1']=function(){const _0x5d5bdb=_0x482454;this[_0x5d5bdb(0x913)]=Graphics[_0x5d5bdb(0x913)],this['height']=Graphics['height'];const _0x5a845a=0x1;this['scale']['x']=_0x5a845a,this['scale']['y']=_0x5a845a,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x482454(0x61b)][_0x482454(0x7f0)]=function(){const _0x3ffecb=_0x482454;this[_0x3ffecb(0x913)]=Graphics['width'],this[_0x3ffecb(0x4c6)]=Graphics[_0x3ffecb(0x4c6)];const _0x569b7a=this[_0x3ffecb(0x913)]/this['bitmap'][_0x3ffecb(0x913)],_0x19ba41=this[_0x3ffecb(0x4c6)]/this[_0x3ffecb(0x2f4)][_0x3ffecb(0x4c6)],_0x2d0b6d=Math[_0x3ffecb(0x1e3)](_0x569b7a,_0x19ba41);this[_0x3ffecb(0x3a5)]['x']=_0x2d0b6d,this[_0x3ffecb(0x3a5)]['y']=_0x2d0b6d,this['x']=(Graphics[_0x3ffecb(0x913)]-this[_0x3ffecb(0x913)])/0x2,this['y']=Graphics['height']-this[_0x3ffecb(0x4c6)];},Sprite_Battleback[_0x482454(0x61b)][_0x482454(0x6a1)]=function(){const _0x7c093a=_0x482454;this[_0x7c093a(0x913)]=Graphics['width'],this[_0x7c093a(0x4c6)]=Graphics['height'];const _0x5ea8b1=Math[_0x7c093a(0x450)](0x1,this[_0x7c093a(0x913)]/this['bitmap']['width']),_0x3665ae=Math[_0x7c093a(0x450)](0x1,this[_0x7c093a(0x4c6)]/this['bitmap'][_0x7c093a(0x4c6)]),_0x191b6d=Math[_0x7c093a(0x1e3)](_0x5ea8b1,_0x3665ae);this[_0x7c093a(0x3a5)]['x']=_0x191b6d,this[_0x7c093a(0x3a5)]['y']=_0x191b6d,this['x']=(Graphics[_0x7c093a(0x913)]-this[_0x7c093a(0x913)])/0x2,this['y']=Graphics['height']-this[_0x7c093a(0x4c6)];},Sprite_Battleback[_0x482454(0x61b)][_0x482454(0x484)]=function(){const _0x47d20c=_0x482454;this[_0x47d20c(0x913)]=Graphics[_0x47d20c(0x913)],this[_0x47d20c(0x4c6)]=Graphics[_0x47d20c(0x4c6)];const _0x1c1305=Math[_0x47d20c(0x1e3)](0x1,this[_0x47d20c(0x913)]/this[_0x47d20c(0x2f4)][_0x47d20c(0x913)]),_0xe8ce8a=Math[_0x47d20c(0x1e3)](0x1,this[_0x47d20c(0x4c6)]/this[_0x47d20c(0x2f4)][_0x47d20c(0x4c6)]),_0x4379e7=Math['max'](_0x1c1305,_0xe8ce8a);this[_0x47d20c(0x3a5)]['x']=_0x4379e7,this['scale']['y']=_0x4379e7,this['x']=(Graphics[_0x47d20c(0x913)]-this[_0x47d20c(0x913)])/0x2,this['y']=Graphics[_0x47d20c(0x4c6)]-this[_0x47d20c(0x4c6)];},Spriteset_Battle[_0x482454(0x7e0)]=VisuMZ[_0x482454(0x16e)][_0x482454(0x4ae)]['BattleLayout'][_0x482454(0x7e5)]??!![],Spriteset_Battle[_0x482454(0x61b)]['isFlipped']=function(){const _0x4396f2=_0x482454;if(!$gameSystem[_0x4396f2(0x447)]())return![];return![];},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x87e)]=function(){return 0x0;},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x7c8)]=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype']['createLowerLayer'],Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x8a7)]=function(){const _0x38c630=_0x482454;VisuMZ['BattleCore'][_0x38c630(0x114)][_0x38c630(0x2b9)](this),this['createWeather'](),this[_0x38c630(0x6f1)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x837)]=Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x2fa)],Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x2fa)]=function(){const _0x1c754c=_0x482454;VisuMZ[_0x1c754c(0x16e)]['Spriteset_Battle_update']['call'](this),this['updateUiContainerPosition'](),this['updateWeather']();},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x3d5)]=function(){const _0x1155b9=_0x482454;this[_0x1155b9(0x71c)]=new Weather(),this[_0x1155b9(0x8d6)][_0x1155b9(0x83b)](this['_weather']);},Spriteset_Battle['prototype'][_0x482454(0x81e)]=function(){const _0x1a4965=_0x482454;this['_weather'][_0x1a4965(0x415)]=$gameScreen['weatherType'](),this[_0x1a4965(0x71c)][_0x1a4965(0x86d)]=$gameScreen[_0x1a4965(0x8b1)]();},Game_Interpreter[_0x482454(0x61b)][_0x482454(0x336)]=function(_0x50f93f){const _0x1542fc=_0x482454;$gameScreen[_0x1542fc(0x463)](_0x50f93f[0x0],_0x50f93f[0x1],_0x50f93f[0x2]);if(_0x50f93f[0x3])this[_0x1542fc(0x223)](_0x50f93f[0x2]);return!![];},VisuMZ['BattleCore'][_0x482454(0x55f)]=Game_Interpreter[_0x482454(0x61b)][_0x482454(0x2c9)],Game_Interpreter[_0x482454(0x61b)][_0x482454(0x2c9)]=function(_0x48a514){const _0x5126c9=_0x482454;return SceneManager[_0x5126c9(0x1f8)]()?(SceneManager['_scene']['_spriteset']['changeBattlebacks'](_0x48a514[0x0],_0x48a514[0x1]),!![]):VisuMZ[_0x5126c9(0x16e)][_0x5126c9(0x55f)][_0x5126c9(0x2b9)](this,_0x48a514);},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x3e8)]=function(_0x554034,_0x1d90e8){const _0x2f78e0=_0x482454;_0x554034[_0x2f78e0(0x2f4)]=_0x1d90e8;},Spriteset_Battle['prototype'][_0x482454(0x3f9)]=function(_0x1f67aa,_0x9a6764){const _0x3dd1c7=_0x482454;_0x1f67aa=_0x1f67aa||'',_0x9a6764=_0x9a6764||'';_0x1f67aa===''&&_0x9a6764===''&&(_0x1f67aa=this['_back1Sprite'][_0x3dd1c7(0x6f6)](),_0x9a6764=this[_0x3dd1c7(0x487)][_0x3dd1c7(0x70b)]());const _0x46c275=ImageManager[_0x3dd1c7(0x15e)](_0x1f67aa),_0x14d5c5=ImageManager[_0x3dd1c7(0x4d0)](_0x9a6764);_0x46c275['addLoadListener'](this[_0x3dd1c7(0x6d3)]['bind'](this,this[_0x3dd1c7(0x34c)],this[_0x3dd1c7(0x487)],_0x46c275,_0x14d5c5));},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x6d3)]=function(_0x542bd5,_0x4dc4d4,_0x115b25,_0x469c2f){const _0x91e4e9=_0x482454;_0x469c2f[_0x91e4e9(0x1b0)](this[_0x91e4e9(0x623)]['bind'](this,_0x542bd5,_0x4dc4d4,_0x115b25,_0x469c2f));},Spriteset_Battle['prototype'][_0x482454(0x623)]=function(_0xaaa940,_0x17fb80,_0x315438,_0x5d8863){const _0x178485=_0x482454;_0xaaa940[_0x178485(0x2f4)]=_0x315438,_0x17fb80[_0x178485(0x2f4)]=_0x5d8863,_0xaaa940[_0x178485(0x1b6)](),_0x17fb80[_0x178485(0x1b6)]();},VisuMZ['BattleCore']['Spriteset_Battle_createBattleField']=Spriteset_Battle['prototype'][_0x482454(0x3e4)],Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x3e4)]=function(){const _0x1e8a7a=_0x482454;VisuMZ['BattleCore'][_0x1e8a7a(0x211)][_0x1e8a7a(0x2b9)](this),this[_0x1e8a7a(0x232)]();},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x232)]=function(){const _0x12c0b5=_0x482454;this[_0x12c0b5(0x2f5)](),this[_0x12c0b5(0x4a0)](),this[_0x12c0b5(0x1fb)](),this['createDamageContainer'](),this[_0x12c0b5(0x2a1)]();},Spriteset_Battle['prototype'][_0x482454(0x2f5)]=function(){const _0x55fdf8=_0x482454;this[_0x55fdf8(0x339)]=new Sprite(),this[_0x55fdf8(0x8d6)][_0x55fdf8(0x83b)](this['_battlerContainer']);},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x1fb)]=function(){const _0x4bbf1d=_0x482454;this[_0x4bbf1d(0x1ce)]=new Sprite(),Spriteset_Battle[_0x4bbf1d(0x7e0)]?this[_0x4bbf1d(0x83b)](this[_0x4bbf1d(0x1ce)]):this[_0x4bbf1d(0x8d6)][_0x4bbf1d(0x83b)](this[_0x4bbf1d(0x1ce)]);},Spriteset_Battle[_0x482454(0x61b)]['createDamageContainer']=function(){const _0x2b410d=_0x482454;this[_0x2b410d(0x7fc)]=new Sprite(),this[_0x2b410d(0x7fc)]['x']=this['_battleField']['x'],this[_0x2b410d(0x7fc)]['y']=this[_0x2b410d(0x8d6)]['y'],this[_0x2b410d(0x83b)](this[_0x2b410d(0x7fc)]);},Spriteset_Battle['prototype'][_0x482454(0x2a1)]=function(){const _0x58e49d=_0x482454;if(!this[_0x58e49d(0x667)]())return;this['_battlerContainer'][_0x58e49d(0x3a5)]['x']=-0x1,this[_0x58e49d(0x339)]['x']=this[_0x58e49d(0x8d6)][_0x58e49d(0x913)],this[_0x58e49d(0x6f4)][_0x58e49d(0x3a5)]['x']=-0x1,this[_0x58e49d(0x6f4)]['x']=this[_0x58e49d(0x8d6)][_0x58e49d(0x913)],this[_0x58e49d(0x1ce)]['scale']['x']=-0x1,this['_animationContainer']['x']=this[_0x58e49d(0x8d6)][_0x58e49d(0x913)],this[_0x58e49d(0x7fc)][_0x58e49d(0x3a5)]['x']=-0x1,this[_0x58e49d(0x7fc)]['x']=this[_0x58e49d(0x8d6)]['x']+this[_0x58e49d(0x8d6)]['width'];},Spriteset_Battle[_0x482454(0x61b)]['createEnemies']=function(){const _0x20112a=_0x482454;Imported['VisuMZ_0_CoreEngine']&&this['coreEngineRepositionEnemies']()&&this['repositionEnemiesByResolution']();const _0x40283=$gameTroop['members'](),_0x477347=[];for(const _0x4fd0d5 of _0x40283){_0x477347[_0x20112a(0x32d)](new Sprite_Enemy(_0x4fd0d5));}_0x477347['sort'](this[_0x20112a(0x5fa)]['bind'](this));for(const _0x5b6118 of _0x477347){this[_0x20112a(0x339)][_0x20112a(0x83b)](_0x5b6118);}this[_0x20112a(0x7c2)]=_0x477347;},Spriteset_Battle[_0x482454(0x61b)]['createActors']=function(){const _0xdc6f42=_0x482454;this[_0xdc6f42(0x6c8)]=[];for(let _0x5828cb=0x0;_0x5828cb<$gameParty['maxBattleMembers']();_0x5828cb++){const _0x42671a=$gameParty[_0xdc6f42(0x49d)]()[_0x5828cb],_0xf11879=new Sprite_Actor();_0xf11879[_0xdc6f42(0xe4)](_0x42671a),_0xf11879[_0xdc6f42(0x17c)](_0x42671a),_0xf11879['update'](),this[_0xdc6f42(0x6c8)][_0xdc6f42(0x32d)](_0xf11879),this[_0xdc6f42(0x339)][_0xdc6f42(0x83b)](_0xf11879);}},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x115)]=function(_0x22a844,_0x2dbbd5,_0x1d1a32,_0x45edea){const _0x378d4b=_0x482454,_0x3fd959=this[_0x378d4b(0x268)](_0x2dbbd5),_0x4848a8=new(_0x3fd959?Sprite_AnimationMV:Sprite_Animation)(),_0x53974f=this['makeTargetSprites'](_0x22a844);this['animationShouldMirror'](_0x22a844[0x0])&&(_0x1d1a32=!_0x1d1a32),_0x4848a8[_0x378d4b(0xfc)]=_0x22a844,_0x4848a8[_0x378d4b(0x2b6)](_0x53974f,_0x2dbbd5,_0x1d1a32,_0x45edea),this[_0x378d4b(0x3eb)](_0x4848a8);},Spriteset_Battle[_0x482454(0x61b)]['addAnimationSpriteToContainer']=function(_0x3b9581){const _0x2d88ed=_0x482454;this['isAnimationShownOnBattlePortrait'](_0x3b9581)?this[_0x2d88ed(0x250)]()[_0x2d88ed(0x83b)](_0x3b9581):this['_animationContainer']['addChild'](_0x3b9581),this['_animationSprites'][_0x2d88ed(0x32d)](_0x3b9581);},Spriteset_Battle[_0x482454(0x61b)]['isAnimationShownOnBattlePortrait']=function(_0x589e63){const _0x43f5f5=_0x482454;if(!_0x589e63)return![];if(!_0x589e63[_0x43f5f5(0x3b6)])return![];if(!_0x589e63[_0x43f5f5(0xfc)][0x0])return![];if(_0x589e63[_0x43f5f5(0xfc)][0x0][_0x43f5f5(0x761)]&&!_0x589e63[_0x43f5f5(0xfc)][0x0]['isActor']())return![];if($gameSystem[_0x43f5f5(0x447)]())return![];if(!this[_0x43f5f5(0x250)]())return![];if(_0x589e63[_0x43f5f5(0x7cc)]===Sprite_Animation){if(_0x589e63[_0x43f5f5(0x3b6)][_0x43f5f5(0x656)]!==0x0)return![];}else{if(_0x589e63['constructor']===Sprite_AnimationMV){if(_0x589e63[_0x43f5f5(0x3b6)]['position']===0x3)return![];}}return!![];const _0xe11823=Window_BattleStatus['prototype']['battleLayoutStyle']();return['xp',_0x43f5f5(0x17a)]['contains'](_0xe11823);},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x250)]=function(){const _0x5270e2=_0x482454;if(!SceneManager[_0x5270e2(0x938)])return null;if(!SceneManager[_0x5270e2(0x938)]['_statusWindow'])return null;if(!SceneManager['_scene'][_0x5270e2(0x63d)][_0x5270e2(0x62b)])return null;return SceneManager[_0x5270e2(0x938)][_0x5270e2(0x63d)][_0x5270e2(0x62b)];},Spriteset_Battle[_0x482454(0x61b)]['removeAnimation']=function(_0x479955){const _0x536ff9=_0x482454;this[_0x536ff9(0x7b2)](_0x479955);for(const _0x472b4e of _0x479955[_0x536ff9(0xfc)]){_0x472b4e[_0x536ff9(0x56a)]&&_0x472b4e[_0x536ff9(0x56a)]();}_0x479955[_0x536ff9(0x16b)]();},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x7b2)]=function(_0x1e9282){const _0x50375b=_0x482454;this['_animationSprites']['remove'](_0x1e9282),this['isAnimationShownOnBattlePortrait'](_0x1e9282)?this[_0x50375b(0x250)]()[_0x50375b(0x5d4)](_0x1e9282):this['_animationContainer'][_0x50375b(0x5d4)](_0x1e9282);},VisuMZ['BattleCore'][_0x482454(0x7b9)]=Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x795)],Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x795)]=function(){const _0x37b4ae=_0x482454;VisuMZ['BattleCore'][_0x37b4ae(0x7b9)]['call'](this),this[_0x37b4ae(0x6ad)]();},Spriteset_Battle['prototype'][_0x482454(0x6ad)]=function(){const _0x448fcb=_0x482454;this[_0x448fcb(0x339)]['children'][_0x448fcb(0x73b)](this[_0x448fcb(0x880)]['bind'](this)),this[_0x448fcb(0x17d)]();},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x880)]=function(_0x3c2c96,_0x5589b9){const _0x59ea47=_0x482454;if(VisuMZ['BattleCore'][_0x59ea47(0x4ae)][_0x59ea47(0x2ef)][_0x59ea47(0x2b5)]){if(_0x3c2c96[_0x59ea47(0x84e)]&&_0x5589b9['_battler']){if(_0x3c2c96[_0x59ea47(0x84e)][_0x59ea47(0x761)]()&&_0x5589b9['_battler'][_0x59ea47(0x186)]())return 0x1;else{if(_0x5589b9[_0x59ea47(0x84e)]['isActor']()&&_0x3c2c96[_0x59ea47(0x84e)][_0x59ea47(0x186)]())return-0x1;}}}return _0x3c2c96[_0x59ea47(0x4c4)]!==_0x5589b9[_0x59ea47(0x4c4)]?_0x3c2c96[_0x59ea47(0x4c4)]-_0x5589b9['_baseY']:_0x5589b9['spriteId']-_0x3c2c96['spriteId'];},Spriteset_Battle['prototype'][_0x482454(0x17d)]=function(){const _0x2c87d9=_0x482454;if(!VisuMZ[_0x2c87d9(0x16e)]['Settings'][_0x2c87d9(0x2ef)][_0x2c87d9(0x3bb)])return;const _0x598af4=BattleManager['_subject'];if(_0x598af4){if(_0x598af4[_0x2c87d9(0x761)]()&&!$gameSystem[_0x2c87d9(0x447)]())return;const _0x55c0d4=_0x598af4[_0x2c87d9(0x1f6)]();if(_0x55c0d4&&_0x598af4['isActor']())this[_0x2c87d9(0x339)][_0x2c87d9(0x83b)](_0x55c0d4);}},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x260)]=function(){const _0x388580=_0x482454;for(const _0x33be40 of $gameParty[_0x388580(0x7e3)]()){if(!_0x33be40)continue;if(!_0x33be40[_0x388580(0x1f6)]())continue;_0x33be40[_0x388580(0x1f6)]()[_0x388580(0x359)]=!![],_0x33be40[_0x388580(0x1f6)]()[_0x388580(0x549)]();}},Spriteset_Battle['prototype']['createUIContainer']=function(){const _0x55b790=_0x482454;this['_uiContainer']=new Sprite(),Spriteset_Battle[_0x55b790(0x7e0)]?this[_0x55b790(0x83b)](this[_0x55b790(0x6f4)]):this[_0x55b790(0x8d6)][_0x55b790(0x83b)](this[_0x55b790(0x6f4)]),SceneManager[_0x55b790(0x938)][_0x55b790(0x6f4)]=this[_0x55b790(0x6f4)];},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x6f1)]=function(){const _0x40ce81=_0x482454;if(VisuMZ['BattleCore'][_0x40ce81(0x4ae)][_0x40ce81(0x8c8)][_0x40ce81(0x4ac)])return;this[_0x40ce81(0x8c7)]=new Sprite(),BattleManager['addChildToUiContainer'](this['_enemyNameContainer']);for(const _0x1c4371 of this['_enemySprites']){const _0x55edd1=new Sprite_EnemyName();this[_0x40ce81(0x8c7)]['addChild'](_0x55edd1),_0x55edd1[_0x40ce81(0x6b8)](_0x1c4371);}},Spriteset_Battle[_0x482454(0x61b)]['updateUiContainerPosition']=function(){const _0x4fd7fc=_0x482454;if(!this['_damageContainer'])return;if(!this[_0x4fd7fc(0x6f4)])return;const _0x35e560=Spriteset_Battle[_0x4fd7fc(0x7e0)]?this[_0x4fd7fc(0x7fc)]['x']:0x0,_0x166052=Spriteset_Battle[_0x4fd7fc(0x7e0)]?this['_damageContainer']['y']:0x0,_0x46bbbf=Spriteset_Battle[_0x4fd7fc(0x7e0)]?this['_battleField']['x']:0x0,_0x2a39ba=Spriteset_Battle[_0x4fd7fc(0x7e0)]?this[_0x4fd7fc(0x8d6)]['y']:0x0;this[_0x4fd7fc(0x6f4)]['x']=_0x35e560+_0x46bbbf,this[_0x4fd7fc(0x6f4)]['y']=_0x166052+_0x2a39ba;},BattleManager[_0x482454(0x25f)]=function(_0x1cdd39){const _0x47cc07=_0x482454;if(!SceneManager[_0x47cc07(0x938)]['_uiContainer'])return;SceneManager['_scene'][_0x47cc07(0x6f4)]['addChild'](_0x1cdd39);},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x7aa)]=function(){return![];},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x96b)]=function(){const _0xa07886=_0x482454;return this[_0xa07886(0x102)]()[_0xa07886(0x29d)](_0x14c0c1=>_0x14c0c1['isFloating']());},Spriteset_Battle['prototype'][_0x482454(0x4e6)]=function(){const _0x47b95d=_0x482454;return this['battlerSprites']()[_0x47b95d(0x29d)](_0x5b9394=>_0x5b9394[_0x47b95d(0x789)]());},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x68d)]=function(){const _0x56e8a8=_0x482454;return this['battlerSprites']()[_0x56e8a8(0x29d)](_0x2c8919=>_0x2c8919[_0x56e8a8(0x8d0)]());},Spriteset_Battle[_0x482454(0x61b)]['isAnyoneSkewing']=function(){const _0xe8ece0=_0x482454;return this[_0xe8ece0(0x102)]()[_0xe8ece0(0x29d)](_0x541bd8=>_0x541bd8[_0xe8ece0(0x19e)]());},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x2ff)]=function(){const _0x2dd9d3=_0x482454;return this[_0x2dd9d3(0x102)]()['some'](_0x32a475=>_0x32a475[_0x2dd9d3(0x1df)]());},Spriteset_Battle[_0x482454(0x61b)][_0x482454(0x730)]=function(){const _0x4473ce=_0x482454;return this[_0x4473ce(0x102)]()['some'](_0x33a793=>_0x33a793[_0x4473ce(0x529)]());},VisuMZ[_0x482454(0x16e)][_0x482454(0x876)]=Window_ItemList[_0x482454(0x61b)]['maxCols'],Window_ItemList[_0x482454(0x61b)]['maxCols']=function(){const _0x5bf34a=_0x482454;return SceneManager['isSceneBattle']()?SceneManager[_0x5bf34a(0x938)][_0x5bf34a(0x2cb)]()==='border'?VisuMZ[_0x5bf34a(0x16e)][_0x5bf34a(0x4ae)][_0x5bf34a(0x738)][_0x5bf34a(0x8f0)]:VisuMZ[_0x5bf34a(0x16e)][_0x5bf34a(0x4ae)][_0x5bf34a(0x738)][_0x5bf34a(0x491)]:VisuMZ['BattleCore'][_0x5bf34a(0x876)][_0x5bf34a(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x7ab)]=Window_SkillList[_0x482454(0x61b)][_0x482454(0x263)],Window_SkillList[_0x482454(0x61b)][_0x482454(0x263)]=function(){const _0x1a7df=_0x482454;return SceneManager['isSceneBattle']()?SceneManager[_0x1a7df(0x938)]['battleLayoutStyle']()==='border'?VisuMZ[_0x1a7df(0x16e)]['Settings']['BattleLayout'][_0x1a7df(0x8f0)]:VisuMZ['BattleCore'][_0x1a7df(0x4ae)][_0x1a7df(0x738)][_0x1a7df(0x491)]:VisuMZ['BattleCore'][_0x1a7df(0x7ab)][_0x1a7df(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x236)]=Window_Options[_0x482454(0x61b)]['addGeneralOptions'],Window_Options[_0x482454(0x61b)][_0x482454(0x862)]=function(){const _0x2a242a=_0x482454;VisuMZ[_0x2a242a(0x16e)][_0x2a242a(0x236)][_0x2a242a(0x2b9)](this),this[_0x2a242a(0x6e6)](),this[_0x2a242a(0x5c2)]();},Window_Options[_0x482454(0x61b)][_0x482454(0x6e6)]=function(){const _0x423e2a=_0x482454;VisuMZ['BattleCore'][_0x423e2a(0x4ae)]['AutoBattle'][_0x423e2a(0x6f2)]&&(this[_0x423e2a(0x542)](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options['prototype'][_0x482454(0x5c2)]=function(){const _0x12db78=_0x482454;if(!VisuMZ[_0x12db78(0x16e)]['Settings']['HpGauge']['AddHpGaugeOption'])return;const _0x5ae4ff=TextManager[_0x12db78(0x48a)],_0x54ddfe=_0x12db78(0x48a);this[_0x12db78(0x475)](_0x5ae4ff,_0x54ddfe);},Window_Options[_0x482454(0x61b)]['addBattleCoreAutoBattleStartupCommand']=function(){const _0x127a40=_0x482454,_0x23da86=TextManager[_0x127a40(0x2ec)],_0x446728=_0x127a40(0x449);this[_0x127a40(0x475)](_0x23da86,_0x446728);},Window_Options[_0x482454(0x61b)][_0x482454(0x1fc)]=function(){const _0x36bec1=_0x482454,_0x3159e8=TextManager[_0x36bec1(0x8c5)],_0x5bcf9a=_0x36bec1(0x872);this[_0x36bec1(0x475)](_0x3159e8,_0x5bcf9a);},VisuMZ[_0x482454(0x16e)][_0x482454(0x45b)]=Window_Options[_0x482454(0x61b)][_0x482454(0x53a)],Window_Options[_0x482454(0x61b)][_0x482454(0x53a)]=function(_0x3e7c81){const _0x1357ba=_0x482454,_0x5ccf62=this[_0x1357ba(0x35e)](_0x3e7c81);return _0x5ccf62===_0x1357ba(0x872)?this['statusTextAutoBattleStyle']():VisuMZ['BattleCore']['Window_Options_statusText']['call'](this,_0x3e7c81);},Window_Options['prototype'][_0x482454(0x828)]=function(){const _0x51c4b3=_0x482454,_0x20789d=VisuMZ[_0x51c4b3(0x16e)][_0x51c4b3(0x4ae)][_0x51c4b3(0x6c4)],_0xf4095f=this[_0x51c4b3(0x725)](_0x51c4b3(0x872));return _0xf4095f?_0x20789d['StyleON']:_0x20789d[_0x51c4b3(0x2aa)];},Window_ShopStatus[_0x482454(0x61b)]['getItemDamageAmountLabelBattleCore']=function(){const _0x178fdb=_0x482454,_0x43827e=DataManager[_0x178fdb(0x34d)](this[_0x178fdb(0x58a)]),_0x23089e=VisuMZ[_0x178fdb(0x84f)][_0x43827e];if(!_0x23089e)return this[_0x178fdb(0x488)]();const _0x45e399='DamageType%1'[_0x178fdb(0x355)](this[_0x178fdb(0x58a)][_0x178fdb(0x166)]['type']),_0x4db0dd=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x178fdb(0x58a)][_0x178fdb(0x166)][_0x178fdb(0x415)]];return _0x23089e[_0x45e399][_0x178fdb(0x355)](_0x4db0dd);},Window_ShopStatus[_0x482454(0x61b)][_0x482454(0x430)]=function(){const _0x3f3c7a=_0x482454,_0x5a3ef4=DataManager['getDamageStyle'](this[_0x3f3c7a(0x58a)]),_0x29db45=VisuMZ[_0x3f3c7a(0x84f)][_0x5a3ef4];if(!_0x29db45)return this[_0x3f3c7a(0x5cf)]();return _0x29db45[_0x3f3c7a(0x6f9)][_0x3f3c7a(0x2b9)](this);},VisuMZ[_0x482454(0x16e)][_0x482454(0x600)]=Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x63a)],Window_PartyCommand[_0x482454(0x61b)]['initialize']=function(_0x4cf3b9){const _0x45f082=_0x482454;VisuMZ[_0x45f082(0x16e)]['Window_PartyCommand_initialize'][_0x45f082(0x2b9)](this,_0x4cf3b9),this['createCommandNameWindow'](_0x4cf3b9);},Window_PartyCommand[_0x482454(0x61b)]['createCommandNameWindow']=function(_0x8c4a15){const _0x24c201=_0x482454,_0x57b39c=new Rectangle(0x0,0x0,_0x8c4a15[_0x24c201(0x913)],_0x8c4a15['height']);this[_0x24c201(0x60e)]=new Window_Base(_0x57b39c),this['_commandNameWindow'][_0x24c201(0x1f2)]=0x0,this[_0x24c201(0x83b)](this[_0x24c201(0x60e)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x482454(0x61b)]['callUpdateHelp']=function(){const _0x1144f8=_0x482454;Window_Command[_0x1144f8(0x61b)][_0x1144f8(0x7c6)][_0x1144f8(0x2b9)](this);if(this[_0x1144f8(0x60e)])this[_0x1144f8(0x6a8)]();},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x6a8)]=function(){const _0x1aa707=_0x482454,_0x393da3=this[_0x1aa707(0x60e)];_0x393da3[_0x1aa707(0x95a)][_0x1aa707(0x4f7)]();const _0x43ce53=this['commandStyleCheck'](this[_0x1aa707(0x836)]());if(_0x43ce53===_0x1aa707(0x3b3)&&this[_0x1aa707(0x4c0)]()>0x0){const _0x4b21db=this[_0x1aa707(0x7d7)](this[_0x1aa707(0x836)]());let _0x22f6e0=this[_0x1aa707(0x296)](this[_0x1aa707(0x836)]());_0x22f6e0=_0x22f6e0['replace'](/\\I\[(\d+)\]/gi,''),_0x393da3['resetFontSettings'](),this['commandNameWindowDrawBackground'](_0x22f6e0,_0x4b21db),this[_0x1aa707(0x189)](_0x22f6e0,_0x4b21db),this['commandNameWindowCenter'](_0x22f6e0,_0x4b21db);}},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x210)]=function(_0x3539b9,_0x2bfc04){},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x189)]=function(_0x166d4f,_0x3fe05f){const _0x381a27=_0x482454,_0x3923b0=this[_0x381a27(0x60e)];_0x3923b0[_0x381a27(0x72c)](_0x166d4f,0x0,_0x3fe05f['y'],_0x3923b0[_0x381a27(0x311)],_0x381a27(0x59d));},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x1cc)]=function(_0x52fd45,_0x259699){const _0x27f33c=_0x482454,_0x136895=this['_commandNameWindow'],_0x4bf77d=$gameSystem[_0x27f33c(0x3d7)](),_0x1583ab=_0x259699['x']+Math[_0x27f33c(0x139)](_0x259699[_0x27f33c(0x913)]/0x2)+_0x4bf77d;_0x136895['x']=_0x136895[_0x27f33c(0x913)]/-0x2+_0x1583ab,_0x136895['y']=Math[_0x27f33c(0x139)](_0x259699[_0x27f33c(0x4c6)]/0x2);},Window_PartyCommand[_0x482454(0x61b)]['makeCommandList']=function(){const _0x4b1f5f=_0x482454;this['addFightCommand'](),this[_0x4b1f5f(0x6d5)](),this[_0x4b1f5f(0x119)](),this[_0x4b1f5f(0x30b)](),this[_0x4b1f5f(0x786)]();},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x5af)]=function(){const _0x5088a9=_0x482454,_0x3cf1f5=this[_0x5088a9(0x72d)](),_0x40ed34=VisuMZ[_0x5088a9(0x16e)][_0x5088a9(0x4ae)][_0x5088a9(0x8ee)][_0x5088a9(0x696)],_0x556c3f=_0x3cf1f5==='text'?TextManager['fight']:_0x5088a9(0x655)['format'](_0x40ed34,TextManager[_0x5088a9(0x1bb)]),_0xd3df5e=this[_0x5088a9(0x7a0)]();this['addCommand'](_0x556c3f,'fight',_0xd3df5e);},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x7a0)]=function(){return!![];},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x6d5)]=function(){const _0x3f255d=_0x482454;if(!this[_0x3f255d(0x203)]())return;const _0x7c980f=this[_0x3f255d(0x72d)](),_0x3d7c79=VisuMZ[_0x3f255d(0x16e)]['Settings'][_0x3f255d(0x8ee)][_0x3f255d(0x4d3)],_0x31ce48=_0x7c980f==='text'?TextManager[_0x3f255d(0x4be)]:_0x3f255d(0x655)[_0x3f255d(0x355)](_0x3d7c79,TextManager[_0x3f255d(0x4be)]),_0x3f390e=this[_0x3f255d(0x859)]();this[_0x3f255d(0x475)](_0x31ce48,'autoBattle',_0x3f390e);},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x203)]=function(){const _0x369fc3=_0x482454;return VisuMZ['BattleCore'][_0x369fc3(0x4ae)][_0x369fc3(0x8ee)][_0x369fc3(0x901)];},Window_PartyCommand[_0x482454(0x61b)]['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x119)]=function(){},Window_PartyCommand['prototype']['addOptionsCommand']=function(){const _0x246774=_0x482454;if(!this['isOptionsCommandAdded']())return;const _0x672dd6=this[_0x246774(0x72d)](),_0x22eb52=VisuMZ[_0x246774(0x16e)][_0x246774(0x4ae)][_0x246774(0x8ee)][_0x246774(0x715)],_0x357f1d=_0x672dd6===_0x246774(0x3cb)?TextManager[_0x246774(0x11c)]:_0x246774(0x655)['format'](_0x22eb52,TextManager[_0x246774(0x11c)]),_0x32f05a=this['isOptionsCommandEnabled']();this[_0x246774(0x475)](_0x357f1d,'options',_0x32f05a);},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x8b0)]=function(){const _0x12e19e=_0x482454;return VisuMZ[_0x12e19e(0x16e)]['Settings'][_0x12e19e(0x8ee)][_0x12e19e(0x43a)];},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x35f)]=function(){return!![];},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x786)]=function(){const _0x2df760=_0x482454,_0x105acc=this[_0x2df760(0x72d)](),_0x4678de=VisuMZ[_0x2df760(0x16e)][_0x2df760(0x4ae)]['PartyCmd'][_0x2df760(0x8f3)],_0x1c8f90=_0x105acc==='text'?TextManager[_0x2df760(0x69c)]:_0x2df760(0x655)[_0x2df760(0x355)](_0x4678de,TextManager[_0x2df760(0x69c)]),_0x1303d6=this[_0x2df760(0x24f)]();this[_0x2df760(0x475)](_0x1c8f90,'escape',_0x1303d6);},Window_PartyCommand['prototype'][_0x482454(0x24f)]=function(){return BattleManager['canEscape']();},Window_PartyCommand['prototype'][_0x482454(0x62d)]=function(){const _0x3d1605=_0x482454;return VisuMZ[_0x3d1605(0x16e)][_0x3d1605(0x4ae)]['PartyCmd']['CmdTextAlign'];},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x82d)]=function(_0x36b3b4){const _0x58b6b7=_0x482454,_0xa60b32=this[_0x58b6b7(0xe7)](_0x36b3b4);if(_0xa60b32==='iconText')this[_0x58b6b7(0x852)](_0x36b3b4);else _0xa60b32===_0x58b6b7(0x3b3)?this[_0x58b6b7(0x5ce)](_0x36b3b4):Window_Command[_0x58b6b7(0x61b)][_0x58b6b7(0x82d)][_0x58b6b7(0x2b9)](this,_0x36b3b4);},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x72d)]=function(){const _0x2cfcdb=_0x482454;return VisuMZ[_0x2cfcdb(0x16e)][_0x2cfcdb(0x4ae)][_0x2cfcdb(0x8ee)][_0x2cfcdb(0x604)];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0x41abb1){const _0x303760=_0x482454;if(_0x41abb1<0x0)return _0x303760(0x3cb);const _0x3b30ac=this[_0x303760(0x72d)]();if(_0x3b30ac!==_0x303760(0x3f5))return _0x3b30ac;else{if(this[_0x303760(0x4c0)]()>0x0){const _0x2f9f45=this['commandName'](_0x41abb1);if(_0x2f9f45[_0x303760(0x445)](/\\I\[(\d+)\]/i)){const _0x256456=this['itemLineRect'](_0x41abb1),_0x9bab75=this['textSizeEx'](_0x2f9f45)[_0x303760(0x913)];return _0x9bab75<=_0x256456[_0x303760(0x913)]?_0x303760(0x3a2):_0x303760(0x3b3);}}}return'text';},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x852)]=function(_0x3e20d3){const _0x49b49e=_0x482454,_0x16f744=this['itemLineRect'](_0x3e20d3),_0x3a6b92=this[_0x49b49e(0x296)](_0x3e20d3),_0x84dd9b=this['textSizeEx'](_0x3a6b92)[_0x49b49e(0x913)];this[_0x49b49e(0x8ff)](this[_0x49b49e(0x4a3)](_0x3e20d3));const _0x59a9fb=this[_0x49b49e(0x62d)]();if(_0x59a9fb===_0x49b49e(0x5e2))this[_0x49b49e(0x5bc)](_0x3a6b92,_0x16f744['x']+_0x16f744[_0x49b49e(0x913)]-_0x84dd9b,_0x16f744['y'],_0x84dd9b);else{if(_0x59a9fb===_0x49b49e(0x59d)){const _0x19d062=_0x16f744['x']+Math['floor']((_0x16f744['width']-_0x84dd9b)/0x2);this[_0x49b49e(0x5bc)](_0x3a6b92,_0x19d062,_0x16f744['y'],_0x84dd9b);}else this[_0x49b49e(0x5bc)](_0x3a6b92,_0x16f744['x'],_0x16f744['y'],_0x84dd9b);}},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x5ce)]=function(_0x841388){const _0x2f2161=_0x482454;this[_0x2f2161(0x296)](_0x841388)[_0x2f2161(0x445)](/\\I\[(\d+)\]/i);const _0x174fb4=Number(RegExp['$1'])||0x0,_0x2a17f4=this[_0x2f2161(0x7d7)](_0x841388),_0x3eda66=_0x2a17f4['x']+Math[_0x2f2161(0x139)]((_0x2a17f4[_0x2f2161(0x913)]-ImageManager[_0x2f2161(0x8a0)])/0x2),_0x3a7c40=_0x2a17f4['y']+(_0x2a17f4['height']-ImageManager[_0x2f2161(0x3a0)])/0x2;this[_0x2f2161(0x368)](_0x174fb4,_0x3eda66,_0x3a7c40);},Window_PartyCommand[_0x482454(0x61b)]['hide']=function(){},Window_PartyCommand['prototype']['activate']=function(){const _0x52b652=_0x482454;Window_Command[_0x52b652(0x61b)][_0x52b652(0x864)][_0x52b652(0x2b9)](this);const _0x3e3fb4=this[_0x52b652(0x2cb)]();_0x3e3fb4===_0x52b652(0x3a8)&&this['showHelpWindow']();},Window_PartyCommand['prototype'][_0x482454(0x2cb)]=function(){const _0x50aef3=_0x482454;if(this['_battleLayoutStyle'])return this[_0x50aef3(0x803)];return this[_0x50aef3(0x803)]=SceneManager[_0x50aef3(0x938)]['battleLayoutStyle'](),this[_0x50aef3(0x803)];},Window_PartyCommand[_0x482454(0x61b)][_0x482454(0x80e)]=function(){const _0x530e2f=_0x482454,_0x7ca579=VisuMZ[_0x530e2f(0x16e)][_0x530e2f(0x4ae)][_0x530e2f(0x8ee)],_0x37308a=this['currentSymbol']();switch(_0x37308a){case _0x530e2f(0x1bb):this[_0x530e2f(0x466)][_0x530e2f(0x238)](_0x7ca579['HelpFight']);break;case _0x530e2f(0x4be):this[_0x530e2f(0x466)]['setText'](_0x7ca579[_0x530e2f(0x155)]);break;case _0x530e2f(0x11c):this[_0x530e2f(0x466)][_0x530e2f(0x238)](_0x7ca579[_0x530e2f(0x624)]);break;case'escape':this[_0x530e2f(0x466)][_0x530e2f(0x238)](_0x7ca579[_0x530e2f(0x736)]);break;default:this[_0x530e2f(0x466)][_0x530e2f(0x238)]('');break;}},VisuMZ[_0x482454(0x16e)][_0x482454(0x364)]=Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x63a)],Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x63a)]=function(_0x1f9816){const _0x33619a=_0x482454;VisuMZ[_0x33619a(0x16e)][_0x33619a(0x364)][_0x33619a(0x2b9)](this,_0x1f9816),this[_0x33619a(0x252)](_0x1f9816);},Window_ActorCommand['prototype']['createCommandNameWindow']=function(_0x2eac0c){const _0x54ae8c=_0x482454,_0x427caf=new Rectangle(0x0,0x0,_0x2eac0c[_0x54ae8c(0x913)],_0x2eac0c['height']);this['_commandNameWindow']=new Window_Base(_0x427caf),this[_0x54ae8c(0x60e)]['opacity']=0x0,this[_0x54ae8c(0x83b)](this['_commandNameWindow']),this[_0x54ae8c(0x6a8)]();},Window_ActorCommand['prototype'][_0x482454(0x7c6)]=function(){const _0x995fb3=_0x482454;Window_Command[_0x995fb3(0x61b)][_0x995fb3(0x7c6)]['call'](this);if(this['_commandNameWindow'])this[_0x995fb3(0x6a8)]();},Window_ActorCommand[_0x482454(0x61b)]['updateCommandNameWindow']=function(){const _0x14eb5d=_0x482454,_0x490257=this[_0x14eb5d(0x60e)];_0x490257[_0x14eb5d(0x95a)][_0x14eb5d(0x4f7)]();const _0x1682d5=this['commandStyleCheck'](this[_0x14eb5d(0x836)]());if(_0x1682d5==='icon'&&this[_0x14eb5d(0x4c0)]()>0x0){const _0x304de4=this[_0x14eb5d(0x7d7)](this[_0x14eb5d(0x836)]());let _0x4a3f2b=this[_0x14eb5d(0x296)](this[_0x14eb5d(0x836)]());_0x4a3f2b=_0x4a3f2b['replace'](/\\I\[(\d+)\]/gi,''),_0x490257[_0x14eb5d(0x8ba)](),this[_0x14eb5d(0x210)](_0x4a3f2b,_0x304de4),this[_0x14eb5d(0x189)](_0x4a3f2b,_0x304de4),this[_0x14eb5d(0x1cc)](_0x4a3f2b,_0x304de4);}},Window_ActorCommand['prototype'][_0x482454(0x210)]=function(_0x23d27b,_0x979106){},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x189)]=function(_0x5b61c3,_0x245dbc){const _0x40682e=_0x482454,_0x1abfc0=this[_0x40682e(0x60e)];_0x1abfc0[_0x40682e(0x72c)](_0x5b61c3,0x0,_0x245dbc['y'],_0x1abfc0[_0x40682e(0x311)],_0x40682e(0x59d));},Window_ActorCommand['prototype'][_0x482454(0x1cc)]=function(_0x151e93,_0x356b16){const _0x42b9ae=_0x482454,_0x134a4b=this[_0x42b9ae(0x60e)],_0x5b5a10=$gameSystem[_0x42b9ae(0x3d7)](),_0x26484e=_0x356b16['x']+Math[_0x42b9ae(0x139)](_0x356b16[_0x42b9ae(0x913)]/0x2)+_0x5b5a10;_0x134a4b['x']=_0x134a4b[_0x42b9ae(0x913)]/-0x2+_0x26484e,_0x134a4b['y']=Math[_0x42b9ae(0x139)](_0x356b16[_0x42b9ae(0x4c6)]/0x2);},Window_ActorCommand['prototype'][_0x482454(0x6ee)]=function(){const _0x27afb5=_0x482454;if(!this['_actor'])return;const _0xe9309d=this['_actor'][_0x27afb5(0x7b0)]();for(const _0x1faaee of _0xe9309d){this[_0x27afb5(0x723)](_0x1faaee['toUpperCase']()['trim']());}},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x723)]=function(_0x1e0821){const _0x523de9=_0x482454;_0x1e0821===_0x523de9(0x79b)&&this[_0x523de9(0x390)]();[_0x523de9(0x763),'SKILLS']['includes'](_0x1e0821)&&this['addSkillCommands']();_0x1e0821===_0x523de9(0x89e)&&this[_0x523de9(0x8f5)]();_0x1e0821===_0x523de9(0x182)&&this[_0x523de9(0x455)]();_0x1e0821===_0x523de9(0x95c)&&this['addEscapeCommand']();_0x1e0821===_0x523de9(0x143)&&this[_0x523de9(0x6d5)]();if(_0x1e0821[_0x523de9(0x445)](/STYPE: (\d+)/i)){const _0x123971=Number(RegExp['$1']);this[_0x523de9(0x33b)](_0x123971);}else{if(_0x1e0821[_0x523de9(0x445)](/STYPE: (.*)/i)){const _0x586641=DataManager[_0x523de9(0x222)](RegExp['$1']);this[_0x523de9(0x33b)](_0x586641);}}_0x1e0821===_0x523de9(0x895)&&this[_0x523de9(0x932)]();if(_0x1e0821[_0x523de9(0x445)](/SKILL: (\d+)/i)){const _0x25f777=Number(RegExp['$1']);this[_0x523de9(0x8af)]($dataSkills[_0x25f777]);}else{if(_0x1e0821['match'](/SKILL: (.*)/i)){const _0x47a4fc=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x523de9(0x8af)]($dataSkills[_0x47a4fc]);}}_0x1e0821==='PARTY'&&Imported[_0x523de9(0x8b7)]&&this[_0x523de9(0x607)](),[_0x523de9(0x40d),_0x523de9(0x947)][_0x523de9(0x4df)](_0x1e0821)&&Imported['VisuMZ_4_CombatLog']&&this[_0x523de9(0x7f3)](),_0x1e0821==='WEAPON\x20SWAP'&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x523de9(0x939)](!![]);},Window_ActorCommand[_0x482454(0x61b)]['addAttackCommand']=function(){const _0x51644e=_0x482454,_0x2492a9=$dataSkills[this[_0x51644e(0x142)][_0x51644e(0x896)]()];if(!_0x2492a9)return;if(!this[_0x51644e(0xf8)](_0x2492a9))return;const _0x5f593a=this['commandStyle'](),_0x30b2b1=DataManager[_0x51644e(0x4e7)](_0x2492a9),_0xa1727=DataManager[_0x51644e(0x4f4)](_0x2492a9),_0x506305=_0x5f593a==='text'?_0x30b2b1:_0x51644e(0x655)['format'](_0xa1727,_0x30b2b1);this[_0x51644e(0x475)](_0x506305,_0x51644e(0x31e),this[_0x51644e(0x142)][_0x51644e(0x32a)]());},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x8f5)]=function(){const _0xc863ad=_0x482454,_0x34cf3a=$dataSkills[this[_0xc863ad(0x142)][_0xc863ad(0x937)]()];if(!_0x34cf3a)return;if(!this[_0xc863ad(0xf8)](_0x34cf3a))return;const _0x8d6a40=this[_0xc863ad(0x72d)](),_0x51a0e0=DataManager[_0xc863ad(0x4e7)](_0x34cf3a),_0xbf807d=DataManager[_0xc863ad(0x4f4)](_0x34cf3a),_0x14b717=_0x8d6a40===_0xc863ad(0x3cb)?_0x51a0e0:'\x5cI[%1]%2'[_0xc863ad(0x355)](_0xbf807d,_0x51a0e0);this[_0xc863ad(0x475)](_0x14b717,_0xc863ad(0x486),this['_actor']['canGuard']());},Window_ActorCommand['prototype'][_0x482454(0x455)]=function(){const _0x3881e8=_0x482454,_0x588986=this[_0x3881e8(0x72d)](),_0x24512b=VisuMZ[_0x3881e8(0x16e)][_0x3881e8(0x4ae)][_0x3881e8(0x89f)][_0x3881e8(0x506)],_0x336a7d=_0x588986===_0x3881e8(0x3cb)?TextManager['item']:_0x3881e8(0x655)[_0x3881e8(0x355)](_0x24512b,TextManager[_0x3881e8(0x94e)]),_0x3751c8=this[_0x3881e8(0x228)]();this[_0x3881e8(0x475)](_0x336a7d,_0x3881e8(0x94e),_0x3751c8);},Window_ActorCommand[_0x482454(0x61b)]['isItemCommandEnabled']=function(){const _0x4a3c96=_0x482454;return this[_0x4a3c96(0x142)]&&this['_actor'][_0x4a3c96(0x6af)]();},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x1a9)]=function(){const _0x31fe12=_0x482454,_0x23ab8a=this[_0x31fe12(0x142)]['skillTypes']();for(const _0x2e7dce of _0x23ab8a){this['addSkillTypeCommand'](_0x2e7dce);}},Window_ActorCommand[_0x482454(0x61b)]['addSkillTypeCommand']=function(_0x4889c2){const _0x2384bc=_0x482454;let _0x48ea47=$dataSystem['skillTypes'][_0x4889c2];if(!_0x48ea47)return;let _0x498083=_0x48ea47;const _0x446cc3=this[_0x2384bc(0x72d)]();if(_0x446cc3==='text')_0x498083=_0x498083[_0x2384bc(0x563)](/\x1I\[(\d+)\]/gi,''),_0x498083=_0x498083[_0x2384bc(0x563)](/\\I\[(\d+)\]/gi,'');else{if(!_0x48ea47['match'](/\\I\[(\d+)\]/i)){const _0x276e07=Imported[_0x2384bc(0x429)]?VisuMZ[_0x2384bc(0x85b)][_0x2384bc(0x4ae)][_0x2384bc(0x8ac)]:VisuMZ[_0x2384bc(0x16e)][_0x2384bc(0x4ae)]['ActorCmd'],_0x5d762e=$dataSystem[_0x2384bc(0x93c)]['includes'](_0x4889c2),_0x17fbc8=_0x5d762e?_0x276e07[_0x2384bc(0x6e4)]:_0x276e07[_0x2384bc(0x7e7)];_0x498083=_0x2384bc(0x655)[_0x2384bc(0x355)](_0x17fbc8,_0x48ea47);}}this[_0x2384bc(0x475)](_0x498083,_0x2384bc(0x40c),!![],_0x4889c2);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x932)]=function(){const _0x20955e=_0x482454,_0x5f2a7f=this[_0x20955e(0x142)][_0x20955e(0x1d2)](),_0x5598f2=this[_0x20955e(0x142)][_0x20955e(0x35a)]();for(const _0x5f02ff of _0x5598f2){if(!_0x5f02ff)continue;if(Imported[_0x20955e(0x429)]){if(this[_0x20955e(0x8f8)](_0x5f02ff))continue;if(this[_0x20955e(0x65d)](_0x5f02ff))continue;}else{if(!_0x5f2a7f['includes'](_0x5f02ff[_0x20955e(0x80f)]))continue;}this[_0x20955e(0x8af)](_0x5f02ff);}},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x8f8)]=function(_0x56e372){const _0x15b386=_0x482454,_0x10b785=this[_0x15b386(0x142)]['skillTypes'](),_0x207063=_0x10b785[_0x15b386(0x19d)](_0x4244b7=>DataManager[_0x15b386(0x3e3)](_0x56e372)[_0x15b386(0x4df)](_0x4244b7));return _0x207063[_0x15b386(0x403)]<=0x0;},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x65d)]=function(_0x193417){const _0x53df7c=_0x482454;if(!Window_SkillList[_0x53df7c(0x61b)][_0x53df7c(0x3ab)][_0x53df7c(0x2b9)](this,_0x193417))return!![];if(!Window_SkillList['prototype'][_0x53df7c(0x2d8)][_0x53df7c(0x2b9)](this,_0x193417))return!![];if(!Window_SkillList[_0x53df7c(0x61b)][_0x53df7c(0x8c0)][_0x53df7c(0x2b9)](this,_0x193417))return!![];return![];},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x8af)]=function(_0x550da1){const _0x1488e0=_0x482454;if(!_0x550da1)return;if(!this[_0x1488e0(0xf8)](_0x550da1))return;const _0x5c1ac7=this[_0x1488e0(0x72d)](),_0xce55f2=DataManager['battleCommandName'](_0x550da1),_0x353a20=DataManager[_0x1488e0(0x4f4)](_0x550da1),_0x502c55=_0x5c1ac7===_0x1488e0(0x3cb)?_0xce55f2:_0x1488e0(0x655)['format'](_0x353a20,_0xce55f2),_0x4aab05=this[_0x1488e0(0x142)][_0x1488e0(0x6fa)](_0x550da1);this[_0x1488e0(0x475)](_0x502c55,'singleSkill',_0x4aab05,_0x550da1['id']);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0xf8)]=function(_0x53cbde){const _0x4952c7=_0x482454,_0x4c8996=_0x53cbde[_0x4952c7(0x305)];if(_0x4c8996[_0x4952c7(0x445)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x4952c7(0x142)]['isLearnedSkill'](_0x53cbde['id']))return![];}if(_0x4c8996[_0x4952c7(0x445)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x4952c7(0x297)](_0x53cbde['id']))return![];}const _0x1c8a7f=VisuMZ[_0x4952c7(0x16e)][_0x4952c7(0x88d)](_0x53cbde,_0x4952c7(0x76c));if(VisuMZ[_0x4952c7(0x16e)]['JS'][_0x1c8a7f]){if(!VisuMZ[_0x4952c7(0x16e)]['JS'][_0x1c8a7f][_0x4952c7(0x2b9)](this,this[_0x4952c7(0x142)],_0x53cbde))return![];}return VisuMZ[_0x4952c7(0x16e)][_0x4952c7(0x173)](_0x53cbde);},VisuMZ['BattleCore'][_0x482454(0x173)]=function(_0x478c1a){const _0x944232=_0x482454,_0x177118=_0x478c1a['note'];if(_0x177118[_0x944232(0x445)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x40715b=JSON[_0x944232(0x3e5)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x24b448 of _0x40715b){if(!$gameSwitches[_0x944232(0x5b0)](_0x24b448))return![];}return!![];}if(_0x177118[_0x944232(0x445)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x8c63bd=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5b5951 of _0x8c63bd){if(!$gameSwitches['value'](_0x5b5951))return![];}return!![];}if(_0x177118[_0x944232(0x445)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x10aba3=JSON[_0x944232(0x3e5)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3490eb of _0x10aba3){if($gameSwitches[_0x944232(0x5b0)](_0x3490eb))return!![];}return![];}if(_0x177118[_0x944232(0x445)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4068bd=JSON[_0x944232(0x3e5)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x5f373a of _0x4068bd){if(!$gameSwitches[_0x944232(0x5b0)](_0x5f373a))return!![];}return![];}if(_0x177118['match'](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x41a34e=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1f5422 of _0x41a34e){if(!$gameSwitches[_0x944232(0x5b0)](_0x1f5422))return!![];}return![];}if(_0x177118[_0x944232(0x445)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x48e021=JSON[_0x944232(0x3e5)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x19afc7 of _0x48e021){if($gameSwitches[_0x944232(0x5b0)](_0x19afc7))return![];}return!![];}return!![];},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x786)]=function(){const _0x292f4b=_0x482454,_0x47d7eb=this[_0x292f4b(0x72d)](),_0x309696=VisuMZ[_0x292f4b(0x16e)][_0x292f4b(0x4ae)][_0x292f4b(0x8ee)][_0x292f4b(0x8f3)],_0x534152=_0x47d7eb==='text'?TextManager[_0x292f4b(0x69c)]:_0x292f4b(0x655)[_0x292f4b(0x355)](_0x309696,TextManager[_0x292f4b(0x69c)]),_0x36d8c9=this[_0x292f4b(0x24f)]();this['addCommand'](_0x534152,_0x292f4b(0x69c),_0x36d8c9);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x24f)]=function(){const _0x39fa13=_0x482454;return BattleManager[_0x39fa13(0x246)]();},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x6d5)]=function(){const _0x52f3c0=_0x482454,_0x135224=this[_0x52f3c0(0x72d)](),_0x320fc5=VisuMZ[_0x52f3c0(0x16e)][_0x52f3c0(0x4ae)][_0x52f3c0(0x8ee)][_0x52f3c0(0x4d3)],_0x5cc1db=_0x135224==='text'?TextManager['autoBattle']:_0x52f3c0(0x655)[_0x52f3c0(0x355)](_0x320fc5,TextManager[_0x52f3c0(0x4be)]),_0x3fe493=this['isAutoBattleCommandEnabled']();this[_0x52f3c0(0x475)](_0x5cc1db,_0x52f3c0(0x4be),_0x3fe493);},Window_ActorCommand['prototype'][_0x482454(0x859)]=function(){return!![];},Window_ActorCommand['prototype'][_0x482454(0x62d)]=function(){const _0x3b158d=_0x482454;return VisuMZ['BattleCore'][_0x3b158d(0x4ae)][_0x3b158d(0x89f)][_0x3b158d(0x77b)];},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x82d)]=function(_0x5270db){const _0x4215f1=_0x482454,_0x48dd59=this[_0x4215f1(0xe7)](_0x5270db);if(_0x48dd59===_0x4215f1(0x3a2))this[_0x4215f1(0x852)](_0x5270db);else _0x48dd59===_0x4215f1(0x3b3)?this[_0x4215f1(0x5ce)](_0x5270db):Window_Command[_0x4215f1(0x61b)][_0x4215f1(0x82d)][_0x4215f1(0x2b9)](this,_0x5270db);this[_0x4215f1(0x2ae)](_0x5270db);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x72d)]=function(){const _0x21b6b9=_0x482454;return VisuMZ['BattleCore']['Settings'][_0x21b6b9(0x89f)][_0x21b6b9(0x604)];},Window_ActorCommand[_0x482454(0x61b)]['commandStyleCheck']=function(_0x15ca1c){const _0x1c1f4a=_0x482454;if(_0x15ca1c<0x0)return'text';const _0x1c6288=this['commandStyle']();if(_0x1c6288!==_0x1c1f4a(0x3f5))return _0x1c6288;else{if(this['maxItems']()>0x0){const _0x100ea3=this['commandName'](_0x15ca1c);if(_0x100ea3[_0x1c1f4a(0x445)](/\\I\[(\d+)\]/i)){const _0x78faa1=this[_0x1c1f4a(0x7d7)](_0x15ca1c),_0xc8deee=this[_0x1c1f4a(0x398)](_0x100ea3)['width'];return _0xc8deee<=_0x78faa1[_0x1c1f4a(0x913)]?_0x1c1f4a(0x3a2):_0x1c1f4a(0x3b3);}}}return _0x1c1f4a(0x3cb);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x852)]=function(_0x5707ec){const _0x252bac=_0x482454,_0x2caa69=this[_0x252bac(0x7d7)](_0x5707ec),_0x2b3092=this[_0x252bac(0x296)](_0x5707ec),_0x4f19d0=this['textSizeEx'](_0x2b3092)['width'];this[_0x252bac(0x8ff)](this[_0x252bac(0x4a3)](_0x5707ec));const _0x46de3a=this[_0x252bac(0x62d)]();if(_0x46de3a===_0x252bac(0x5e2))this[_0x252bac(0x5bc)](_0x2b3092,_0x2caa69['x']+_0x2caa69[_0x252bac(0x913)]-_0x4f19d0,_0x2caa69['y'],_0x4f19d0);else{if(_0x46de3a===_0x252bac(0x59d)){const _0x4259b3=_0x2caa69['x']+Math[_0x252bac(0x139)]((_0x2caa69['width']-_0x4f19d0)/0x2);this['drawTextEx'](_0x2b3092,_0x4259b3,_0x2caa69['y'],_0x4f19d0);}else this[_0x252bac(0x5bc)](_0x2b3092,_0x2caa69['x'],_0x2caa69['y'],_0x4f19d0);}},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x5ce)]=function(_0x3e4d34){const _0x2c6d43=_0x482454;this[_0x2c6d43(0x296)](_0x3e4d34)[_0x2c6d43(0x445)](/\\I\[(\d+)\]/i);const _0x46d5e7=Number(RegExp['$1'])||0x0,_0x37a935=this[_0x2c6d43(0x7d7)](_0x3e4d34),_0x1be7cc=_0x37a935['x']+Math[_0x2c6d43(0x139)]((_0x37a935[_0x2c6d43(0x913)]-ImageManager[_0x2c6d43(0x8a0)])/0x2),_0x2f7b8d=_0x37a935['y']+(_0x37a935[_0x2c6d43(0x4c6)]-ImageManager['iconHeight'])/0x2;this[_0x2c6d43(0x368)](_0x46d5e7,_0x1be7cc,_0x2f7b8d);},Window_ActorCommand['prototype'][_0x482454(0x2ae)]=function(_0x5975b3){const _0x4196df=_0x482454;if(!(VisuMZ[_0x4196df(0x16e)][_0x4196df(0x4ae)][_0x4196df(0x89f)][_0x4196df(0x528)]??!![]))return;const _0x996f4d=this[_0x4196df(0x35e)](_0x5975b3);if(![_0x4196df(0x31e),_0x4196df(0x486),_0x4196df(0x18c)][_0x4196df(0x4df)](_0x996f4d))return;const _0x1e4c9b=this[_0x4196df(0x7d7)](_0x5975b3);let _0x28b868=null;if(_0x996f4d===_0x4196df(0x31e))_0x28b868=$dataSkills[this['_actor']['attackSkillId']()];else _0x996f4d==='guard'?_0x28b868=$dataSkills[this['_actor']['guardSkillId']()]:_0x28b868=$dataSkills[this['_list'][_0x5975b3]['ext']];this[_0x4196df(0x948)](this[_0x4196df(0x142)],_0x28b868,_0x1e4c9b['x'],_0x1e4c9b['y'],_0x1e4c9b[_0x4196df(0x913)]);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x948)]=function(_0x578e98,_0x568baf,_0x10a6aa,_0x2f9b18,_0x1c56d4){const _0x113e71=_0x482454;if(!_0x568baf)return;Imported[_0x113e71(0x429)]?Window_Command[_0x113e71(0x61b)][_0x113e71(0x948)][_0x113e71(0x2b9)](this,_0x578e98,_0x568baf,_0x10a6aa,_0x2f9b18,_0x1c56d4):Window_SkillList[_0x113e71(0x61b)][_0x113e71(0x948)][_0x113e71(0x2b9)](this,_0x568baf,_0x10a6aa,_0x2f9b18,_0x1c56d4);},Window_ActorCommand['prototype']['hide']=function(){},Window_ActorCommand[_0x482454(0x61b)]['activate']=function(){const _0x38f6e9=_0x482454;Window_Command[_0x38f6e9(0x61b)][_0x38f6e9(0x864)]['call'](this);const _0x17ed44=this[_0x38f6e9(0x2cb)]();_0x17ed44==='border'&&this[_0x38f6e9(0x4e1)]();},Window_ActorCommand['prototype'][_0x482454(0x2cb)]=function(){const _0x8b29ad=_0x482454;if(this[_0x8b29ad(0x803)])return this[_0x8b29ad(0x803)];return this[_0x8b29ad(0x803)]=SceneManager[_0x8b29ad(0x938)][_0x8b29ad(0x2cb)](),this[_0x8b29ad(0x803)];},VisuMZ['BattleCore']['Window_ActorCommand_setup']=Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x2b6)],Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x2b6)]=function(_0xecefae){const _0x51b47f=_0x482454,_0x4b1606=this[_0x51b47f(0x2cb)]();if(_0xecefae&&['xp','portrait'][_0x51b47f(0x4df)](_0x4b1606))this[_0x51b47f(0x2f8)](_0xecefae);else _0xecefae&&[_0x51b47f(0x3a8)][_0x51b47f(0x4df)](_0x4b1606)&&(this['resizeWindowBorderStyle'](_0xecefae),this[_0x51b47f(0x4e1)]());VisuMZ[_0x51b47f(0x16e)][_0x51b47f(0x8bc)][_0x51b47f(0x2b9)](this,_0xecefae),_0xecefae&&$gameTroop[_0x51b47f(0x7e3)]()[_0x51b47f(0x403)]>0x0&&_0xecefae[_0x51b47f(0x1f6)]()&&_0xecefae[_0x51b47f(0x1f6)]()['stepForward']();},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x2f8)]=function(_0x3acc47){const _0x5d3d71=_0x482454,_0x146d5b=Math['round'](Graphics['boxWidth']/0x3),_0x1ac7b5=Math[_0x5d3d71(0x5d9)](Graphics[_0x5d3d71(0x36e)]/$gameParty['battleMembers']()[_0x5d3d71(0x403)]),_0x2e3b54=Math['min'](_0x146d5b,_0x1ac7b5),_0x48394a=this['fittingHeight'](VisuMZ[_0x5d3d71(0x16e)][_0x5d3d71(0x4ae)][_0x5d3d71(0x738)]['XPActorCommandLines']),_0x121d17=_0x1ac7b5*_0x3acc47['index']()+(_0x1ac7b5-_0x2e3b54)/0x2,_0x20a642=SceneManager[_0x5d3d71(0x938)][_0x5d3d71(0x63d)]['y']-_0x48394a;this['move'](_0x121d17,_0x20a642,_0x2e3b54,_0x48394a),this[_0x5d3d71(0x562)](),this['setBackgroundType'](0x1);},Window_ActorCommand['prototype'][_0x482454(0x459)]=function(_0x42155a){const _0x1e0fb1=_0x482454,_0x50519b=SceneManager[_0x1e0fb1(0x938)][_0x1e0fb1(0x4d7)]();this[_0x1e0fb1(0x8fe)](_0x50519b['x'],_0x50519b['y'],_0x50519b[_0x1e0fb1(0x913)],_0x50519b[_0x1e0fb1(0x4c6)]),this[_0x1e0fb1(0x562)](),this[_0x1e0fb1(0x4f1)](0x0);},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0xfa)]=function(){const _0x188f52=_0x482454;if(this['_dimmerSprite']){const _0x4bfcd5=this[_0x188f52(0x651)]['bitmap'],_0x243b74=this[_0x188f52(0x913)]-0x8,_0x1d83a4=this[_0x188f52(0x4c6)],_0x1701c4=this[_0x188f52(0x909)],_0x426eed=ColorManager[_0x188f52(0x660)](),_0x410066=ColorManager[_0x188f52(0x2f3)]();this[_0x188f52(0x651)]['x']=0x4,_0x4bfcd5['resize'](_0x243b74,_0x1d83a4),_0x4bfcd5[_0x188f52(0x8a2)](0x0,0x0,_0x243b74,_0x1701c4,_0x410066,_0x426eed,!![]),_0x4bfcd5[_0x188f52(0x54f)](0x0,_0x1701c4,_0x243b74,_0x1d83a4-_0x1701c4*0x2,_0x426eed),_0x4bfcd5[_0x188f52(0x8a2)](0x0,_0x1d83a4-_0x1701c4,_0x243b74,_0x1701c4,_0x426eed,_0x410066,!![]),this[_0x188f52(0x651)][_0x188f52(0x5be)](0x0,0x0,_0x243b74,_0x1d83a4);}},Window_ActorCommand[_0x482454(0x61b)][_0x482454(0x80e)]=function(){const _0x5a8fa5=_0x482454;if(!this[_0x5a8fa5(0x142)])return;const _0x595e43=VisuMZ[_0x5a8fa5(0x16e)][_0x5a8fa5(0x4ae)][_0x5a8fa5(0x89f)],_0x6e7593=this[_0x5a8fa5(0x962)]();switch(_0x6e7593){case _0x5a8fa5(0x31e):this['setHelpWindowItem']($dataSkills[this[_0x5a8fa5(0x142)][_0x5a8fa5(0x896)]()]);break;case _0x5a8fa5(0x486):this[_0x5a8fa5(0x22c)]($dataSkills[this[_0x5a8fa5(0x142)][_0x5a8fa5(0x937)]()]);break;case _0x5a8fa5(0x40c):const _0x547662=_0x595e43[_0x5a8fa5(0x6cd)],_0x51ad88=_0x547662[_0x5a8fa5(0x355)]($dataSystem[_0x5a8fa5(0x1d2)][this[_0x5a8fa5(0x637)]()]);this[_0x5a8fa5(0x466)]['setText'](_0x51ad88);break;case _0x5a8fa5(0x18c):this['setHelpWindowItem']($dataSkills[this['currentExt']()]);break;case'item':this[_0x5a8fa5(0x466)]['setText'](_0x595e43[_0x5a8fa5(0x3c4)]);break;case _0x5a8fa5(0x69c):this[_0x5a8fa5(0x466)]['setText'](_0x595e43[_0x5a8fa5(0x736)]);break;case _0x5a8fa5(0x4be):this[_0x5a8fa5(0x466)][_0x5a8fa5(0x238)](_0x595e43[_0x5a8fa5(0x155)]);break;default:this[_0x5a8fa5(0x466)][_0x5a8fa5(0x238)]('');break;}},VisuMZ['BattleCore'][_0x482454(0x1d8)]=Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x63a)],Window_BattleStatus['prototype'][_0x482454(0x63a)]=function(_0x43cd7e){const _0x2da039=_0x482454;VisuMZ[_0x2da039(0x16e)][_0x2da039(0x1d8)][_0x2da039(0x2b9)](this,_0x43cd7e),this[_0x2da039(0x5bf)](),this[_0x2da039(0x1e9)]();},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x2cb)]=function(){const _0x203515=_0x482454;if(this['_battleLayoutStyle'])return this[_0x203515(0x803)];return this[_0x203515(0x803)]=SceneManager[_0x203515(0x938)][_0x203515(0x2cb)](),this[_0x203515(0x803)];},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x5bf)]=function(){const _0x3a87c7=_0x482454;this[_0x3a87c7(0x914)]=this[_0x3a87c7(0x2d1)]();const _0x28fecf=VisuMZ[_0x3a87c7(0x16e)][_0x3a87c7(0x4ae)][_0x3a87c7(0x738)];_0x28fecf[_0x3a87c7(0x7ff)]&&(this[_0x3a87c7(0x1f2)]=0x0);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x2d1)]=function(){const _0x115b9a=_0x482454,_0xb372e2=VisuMZ['BattleCore'][_0x115b9a(0x4ae)][_0x115b9a(0x738)];if(_0xb372e2['StatusWindowSkinFilename'])return!![];const _0x27bbd9=this[_0x115b9a(0x2cb)]();switch(_0x27bbd9){case'list':case _0x115b9a(0x3a8):return!![];break;case _0x115b9a(0x609):case'xp':case _0x115b9a(0x17a):default:return![];break;}},Window_BattleStatus['prototype']['extraHeight']=function(){const _0x41ec4b=_0x482454;return this[_0x41ec4b(0x2d1)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x482454(0x263)]=function(){const _0x24c7b8=_0x482454,_0x23c239=this['battleLayoutStyle']();switch(_0x23c239){case'list':return 0x1;break;case'xp':case'portrait':return $gameParty['battleMembers']()['length'];break;case _0x24c7b8(0x609):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x20a)]=function(){const _0x1fd54c=_0x482454,_0x4606be=this[_0x1fd54c(0x2cb)]();switch(_0x4606be){case'list':return Window_StatusBase[_0x1fd54c(0x61b)][_0x1fd54c(0x20a)]['call'](this);break;case _0x1fd54c(0x609):case'xp':case _0x1fd54c(0x17a):default:return this[_0x1fd54c(0x886)];break;}},Window_BattleStatus['prototype']['rowSpacing']=function(){const _0x1acd7c=_0x482454,_0x44cf96=this[_0x1acd7c(0x2cb)]();switch(_0x44cf96){case _0x1acd7c(0x1fa):return Window_StatusBase[_0x1acd7c(0x61b)][_0x1acd7c(0x3cd)][_0x1acd7c(0x2b9)](this);break;case _0x1acd7c(0x609):case'xp':case _0x1acd7c(0x17a):default:return 0x0;break;}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x2d7)]=function(){const _0x3e107b=_0x482454;this[_0x3e107b(0x2d1)]()?Window_StatusBase['prototype'][_0x3e107b(0x2d7)][_0x3e107b(0x2b9)](this):this['padding']=0x8;},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x23e)]=function(){const _0xdfe76d=_0x482454,_0x31cc77=VisuMZ[_0xdfe76d(0x16e)][_0xdfe76d(0x4ae)][_0xdfe76d(0x738)];_0x31cc77['StatusWindowSkinFilename']?this[_0xdfe76d(0x406)]=ImageManager[_0xdfe76d(0x818)](_0x31cc77[_0xdfe76d(0x720)]):Window_StatusBase[_0xdfe76d(0x61b)][_0xdfe76d(0x23e)][_0xdfe76d(0x2b9)](this);},Window_BattleStatus['prototype'][_0x482454(0x569)]=function(_0x174f6d){const _0xfabd92=_0x482454,_0x17e9e6=VisuMZ[_0xfabd92(0x16e)][_0xfabd92(0x4ae)][_0xfabd92(0x738)];if(_0x17e9e6[_0xfabd92(0x8ab)])return;Window_StatusBase[_0xfabd92(0x61b)][_0xfabd92(0x569)][_0xfabd92(0x2b9)](this,_0x174f6d);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x118)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x2fa)]=function(){const _0x3ec890=_0x482454;Window_StatusBase[_0x3ec890(0x61b)][_0x3ec890(0x2fa)][_0x3ec890(0x2b9)](this),this[_0x3ec890(0x64a)](),this[_0x3ec890(0x65e)]();if(this[_0x3ec890(0x2cb)]()===_0x3ec890(0x3a8))this['updateBorderStyle']();},Window_BattleStatus['prototype'][_0x482454(0x64a)]=function(){const _0x55a0da=_0x482454;if($gameTemp[_0x55a0da(0x13d)]())this[_0x55a0da(0x5fc)](),this[_0x55a0da(0x87a)]=![],$gameTemp[_0x55a0da(0x7f8)]();else this[_0x55a0da(0x87a)]&&(this[_0x55a0da(0x87a)]=![],this[_0x55a0da(0x477)](),this[_0x55a0da(0x1a5)]());},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x1f3)]=function(){const _0x5e9fe7=_0x482454;Window_StatusBase[_0x5e9fe7(0x61b)][_0x5e9fe7(0x1f3)]['call'](this);if(!$gameSystem[_0x5e9fe7(0x447)]())this[_0x5e9fe7(0x477)]();},Window_BattleStatus[_0x482454(0x61b)]['hide']=function(){const _0x291143=_0x482454;if(this[_0x291143(0x7cc)]===Window_BattleStatus)return;Window_StatusBase[_0x291143(0x61b)][_0x291143(0x91e)][_0x291143(0x2b9)](this);},Window_BattleStatus['prototype'][_0x482454(0x371)]=function(_0x3e7dcf){const _0x23fda0=_0x482454,_0x7f4a7=this[_0x23fda0(0x2cb)]();switch(_0x7f4a7){case'xp':case'portrait':break;case'default':case _0x23fda0(0x1fa):case _0x23fda0(0x3a8):default:return Window_StatusBase['prototype'][_0x23fda0(0x371)][_0x23fda0(0x2b9)](this,_0x3e7dcf);break;}},VisuMZ[_0x482454(0x16e)][_0x482454(0x10b)]=Window_BattleStatus['prototype']['drawItemImage'],Window_BattleStatus['prototype'][_0x482454(0x84c)]=function(_0x349cdc){const _0xfa8cde=_0x482454,_0x5f4ba0=this['battleLayoutStyle']();switch(_0x5f4ba0){case'list':this[_0xfa8cde(0x1a3)](_0x349cdc);break;case'xp':this[_0xfa8cde(0x81c)](_0x349cdc);break;case _0xfa8cde(0x17a):this[_0xfa8cde(0x109)](_0x349cdc);break;case _0xfa8cde(0x609):case _0xfa8cde(0x3a8):default:VisuMZ[_0xfa8cde(0x16e)][_0xfa8cde(0x10b)][_0xfa8cde(0x2b9)](this,_0x349cdc);break;}},Window_BattleStatus['prototype']['drawItemStatus']=function(_0x47bc37){const _0x1d815a=_0x482454,_0x17ba7=this['battleLayoutStyle']();if(!$gameSystem['isSideView']())this[_0x1d815a(0x479)](_0x47bc37);switch(_0x17ba7){case _0x1d815a(0x1fa):this[_0x1d815a(0x256)](_0x47bc37);break;case'xp':case'portrait':case _0x1d815a(0x609):case'border':default:this[_0x1d815a(0x2db)](_0x47bc37);break;}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x6d0)]=function(){const _0x359963=_0x482454,_0x59854a=this['battleLayoutStyle']();if(['xp'][_0x359963(0x4df)](_0x59854a)&&!$gameSystem[_0x359963(0x447)]()){this[_0x359963(0x18d)](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x359963(0x61b)][_0x359963(0x6d0)][_0x359963(0x2b9)](this);},Window_BattleStatus['prototype'][_0x482454(0x479)]=function(_0x1c652e){const _0x5be0d5=_0x482454,_0x835a24=this[_0x5be0d5(0x57b)](_0x1c652e)[_0x5be0d5(0x1f6)]();if(!_0x835a24)return;const _0x9d58de=this[_0x5be0d5(0x2cb)](),_0xb675e5=this[_0x5be0d5(0x579)](_0x1c652e);let _0x1d387d=Math[_0x5be0d5(0x5d9)](_0xb675e5['x']+_0xb675e5[_0x5be0d5(0x913)]/0x2)+this[_0x5be0d5(0x909)];[_0x5be0d5(0x1fa)][_0x5be0d5(0x4df)](_0x9d58de)&&(_0x1d387d=_0xb675e5[_0x5be0d5(0x913)]/$gameParty[_0x5be0d5(0x49d)]()[_0x5be0d5(0x403)],_0x1d387d*=_0x1c652e,_0x1d387d+=_0xb675e5['width']/$gameParty[_0x5be0d5(0x49d)]()[_0x5be0d5(0x403)]/0x2);let _0x44fb8b=Math[_0x5be0d5(0x5d9)](this[_0x5be0d5(0x5df)](_0x1c652e,_0x835a24,_0xb675e5));_0x835a24[_0x5be0d5(0x598)](_0x1d387d,_0x44fb8b),this['addChildAt'](_0x835a24,0x1),_0x835a24[_0x5be0d5(0x1f3)](),this[_0x5be0d5(0x5de)](),this['updateAttachmentSprites']();},Window_BattleStatus['prototype'][_0x482454(0x5df)]=function(_0x1464ab,_0x13b397,_0x115d03){const _0x471332=_0x482454,_0x3185fe=VisuMZ[_0x471332(0x16e)]['Settings']['BattleLayout'],_0x4d3126=this[_0x471332(0x2cb)]();if(_0x4d3126==='xp'){const _0x1b50c1=_0x3185fe[_0x471332(0x693)];switch(_0x1b50c1[_0x471332(0x61c)]()[_0x471332(0x910)]()){case _0x471332(0x74b):return _0x115d03[_0x471332(0x4c6)]-_0x13b397[_0x471332(0x5b5)][_0x471332(0x4c6)]/0x4;break;case _0x471332(0x59d):const _0x332a2d=_0x3185fe[_0x471332(0x4c7)];return(_0x115d03[_0x471332(0x4c6)]+(_0x13b397[_0x471332(0x4c6)]||_0x332a2d))/0x2;break;case _0x471332(0x5fd):return 0x0;case _0x471332(0x7cb):default:return this['nameY'](_0x115d03);break;}}else{if(_0x4d3126==='portrait'){}}return _0x13b397[_0x471332(0x4c6)];},Sprite_Name[_0x482454(0x61b)][_0x482454(0x4a8)]=function(){return 0x24;},Sprite_Name[_0x482454(0x61b)][_0x482454(0x482)]=function(){const _0x1a99ec=_0x482454,_0x2fa8ff=this[_0x1a99ec(0x7cb)](),_0x33bff0=this[_0x1a99ec(0x21f)](),_0x1d24e2=this[_0x1a99ec(0x4a8)]();this[_0x1a99ec(0x83f)](),this[_0x1a99ec(0x2f4)][_0x1a99ec(0x4f7)](),this[_0x1a99ec(0x2f4)][_0x1a99ec(0x456)](_0x2fa8ff,0x0,0x0,_0x33bff0,_0x1d24e2,_0x1a99ec(0x493));},Bitmap[_0x482454(0x61b)][_0x482454(0x456)]=function(_0xdb0e73,_0x12299d,_0x591953,_0x1c9334,_0x309b20,_0x32d535){const _0x5361d2=_0x482454,_0x2b9d0a=this[_0x5361d2(0x48e)],_0x45b7c4=_0x2b9d0a['globalAlpha'];_0x1c9334=_0x1c9334||0xffffffff;let _0x52a3e3=_0x12299d,_0x21d82d=Math[_0x5361d2(0x5d9)](_0x591953+0x18/0x2+this[_0x5361d2(0x8be)]*0.35);_0x32d535===_0x5361d2(0x59d)&&(_0x52a3e3+=_0x1c9334/0x2),_0x32d535===_0x5361d2(0x5e2)&&(_0x52a3e3+=_0x1c9334),_0x2b9d0a[_0x5361d2(0x6ae)](),_0x2b9d0a[_0x5361d2(0x1e7)]=this[_0x5361d2(0x380)](),_0x2b9d0a[_0x5361d2(0x4e2)]=_0x32d535,_0x2b9d0a[_0x5361d2(0x657)]=_0x5361d2(0x93a),_0x2b9d0a[_0x5361d2(0x3bf)]=0x1,this[_0x5361d2(0x94f)](_0xdb0e73,_0x52a3e3,_0x21d82d,_0x1c9334),_0x2b9d0a[_0x5361d2(0x3bf)]=_0x45b7c4,this[_0x5361d2(0x138)](_0xdb0e73,_0x52a3e3,_0x21d82d,_0x1c9334),_0x2b9d0a[_0x5361d2(0x3e1)](),this[_0x5361d2(0x74f)][_0x5361d2(0x2fa)]();},Window_BattleStatus['prototype'][_0x482454(0x833)]=function(_0x36cf02){const _0x1ee4e4=_0x482454;return this[_0x1ee4e4(0x576)](_0x36cf02)-this[_0x1ee4e4(0x75e)]();},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x1a3)]=function(_0x2047ec){const _0x10facf=_0x482454;if(!VisuMZ[_0x10facf(0x16e)]['Settings'][_0x10facf(0x738)][_0x10facf(0x5e5)])return;const _0x5235ef=this['actor'](_0x2047ec),_0x5bf7cb=this[_0x10facf(0x579)](_0x2047ec);_0x5bf7cb[_0x10facf(0x913)]=ImageManager[_0x10facf(0x123)],_0x5bf7cb[_0x10facf(0x4c6)]-=0x2,this[_0x10facf(0x313)](_0x5235ef,_0x5bf7cb['x']+0x1,_0x5bf7cb['y']+0x1,_0x5bf7cb[_0x10facf(0x913)],_0x5bf7cb['height']);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x256)]=function(_0x5d3f63){const _0x57a6c7=_0x482454,_0x51ba0f=VisuMZ[_0x57a6c7(0x16e)][_0x57a6c7(0x4ae)][_0x57a6c7(0x738)],_0x52936c=$dataSystem['optDisplayTp']?0x4:0x3,_0x3b60fb=_0x52936c*0x80+(_0x52936c-0x1)*0x8+0x4,_0x475702=this[_0x57a6c7(0x57b)](_0x5d3f63),_0xca2afd=this[_0x57a6c7(0x579)](_0x5d3f63);let _0x1cd116=_0xca2afd['x']+this[_0x57a6c7(0x909)];_0x51ba0f[_0x57a6c7(0x5e5)]?_0x1cd116=_0xca2afd['x']+ImageManager[_0x57a6c7(0x123)]+0x8:_0x1cd116+=ImageManager[_0x57a6c7(0x8a0)];const _0x323722=Math['round'](Math[_0x57a6c7(0x450)](_0xca2afd['x']+_0xca2afd[_0x57a6c7(0x913)]-_0x3b60fb,_0x1cd116)),_0x4d6ca9=Math[_0x57a6c7(0x5d9)](_0xca2afd['y']+(_0xca2afd[_0x57a6c7(0x4c6)]-Sprite_Name[_0x57a6c7(0x61b)]['bitmapHeight']())/0x2),_0x231c51=Math[_0x57a6c7(0x5d9)](_0x323722-ImageManager[_0x57a6c7(0x8a0)]/0x2-0x4),_0x4a9e94=Math[_0x57a6c7(0x5d9)](_0xca2afd['y']+(_0xca2afd[_0x57a6c7(0x4c6)]-ImageManager[_0x57a6c7(0x3a0)])/0x2+ImageManager['iconHeight']/0x2);let _0x2fb82c=_0x323722+0x88;const _0x98006c=_0x4d6ca9;this[_0x57a6c7(0x6f0)](_0x475702,_0x323722-0x4+(_0x51ba0f[_0x57a6c7(0x82b)]||0x0),_0x4d6ca9+(_0x51ba0f[_0x57a6c7(0x1eb)]||0x0)),this[_0x57a6c7(0x706)](_0x475702,_0x323722+(_0x51ba0f[_0x57a6c7(0x352)]||0x0),_0x4d6ca9+(_0x51ba0f[_0x57a6c7(0x1b4)]||0x0)),this[_0x57a6c7(0x410)](_0x475702,_0x231c51+(_0x51ba0f[_0x57a6c7(0xf0)]||0x0),_0x4a9e94+(_0x51ba0f[_0x57a6c7(0x877)]||0x0)),this[_0x57a6c7(0x55a)](_0x475702,'hp',_0x2fb82c+0x88*0x0+(_0x51ba0f[_0x57a6c7(0x525)]||0x0),_0x98006c+(_0x51ba0f[_0x57a6c7(0x76f)]||0x0)),this[_0x57a6c7(0x55a)](_0x475702,'mp',_0x2fb82c+0x88*0x1+(_0x51ba0f['MpGaugeOffsetX']||0x0),_0x98006c+(_0x51ba0f[_0x57a6c7(0x722)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x57a6c7(0x55a)](_0x475702,'tp',_0x2fb82c+0x88*0x2+(_0x51ba0f[_0x57a6c7(0x1ae)]||0x0),_0x98006c+(_0x51ba0f[_0x57a6c7(0x749)]||0x0));},Window_BattleStatus['prototype'][_0x482454(0x81c)]=function(_0xe6d52d){const _0x45de99=_0x482454;if(!$gameSystem[_0x45de99(0x447)]())return;VisuMZ[_0x45de99(0x16e)]['Window_BattleStatus_drawItemImage']['call'](this,_0xe6d52d);},Window_BattleStatus['prototype'][_0x482454(0x2db)]=function(_0x1fe207){const _0x5c4e3b=_0x482454,_0x32ac56=VisuMZ[_0x5c4e3b(0x16e)]['Settings'][_0x5c4e3b(0x738)],_0x56879b=this[_0x5c4e3b(0x57b)](_0x1fe207),_0x249f2c=this[_0x5c4e3b(0x579)](_0x1fe207),_0x84ac68=Math[_0x5c4e3b(0x5d9)](_0x249f2c['x']+(_0x249f2c[_0x5c4e3b(0x913)]-0x80)/0x2),_0x30390b=this[_0x5c4e3b(0x833)](_0x249f2c);let _0xf89c5f=_0x84ac68-ImageManager[_0x5c4e3b(0x8a0)]/0x2-0x4,_0x3427fb=_0x30390b+ImageManager[_0x5c4e3b(0x3a0)]/0x2;_0xf89c5f-ImageManager[_0x5c4e3b(0x8a0)]/0x2<_0x249f2c['x']&&(_0xf89c5f=_0x84ac68+ImageManager[_0x5c4e3b(0x8a0)]/0x2-0x4,_0x3427fb=_0x30390b-ImageManager['iconHeight']/0x2);const _0x3f928e=_0x84ac68,_0x41aa99=this[_0x5c4e3b(0x576)](_0x249f2c);this[_0x5c4e3b(0x6f0)](_0x56879b,_0x84ac68+(_0x32ac56[_0x5c4e3b(0x82b)]||0x0),_0x30390b+(_0x32ac56['TpbGaugeOffsetY']||0x0)),this[_0x5c4e3b(0x706)](_0x56879b,_0x84ac68+(_0x32ac56[_0x5c4e3b(0x352)]||0x0),_0x30390b+(_0x32ac56[_0x5c4e3b(0x1b4)]||0x0)),this[_0x5c4e3b(0x410)](_0x56879b,_0xf89c5f+(_0x32ac56[_0x5c4e3b(0xf0)]||0x0),_0x3427fb+(_0x32ac56[_0x5c4e3b(0x877)]||0x0)),this['placeGauge'](_0x56879b,'hp',_0x3f928e+(_0x32ac56[_0x5c4e3b(0x525)]||0x0),_0x41aa99+(_0x32ac56[_0x5c4e3b(0x76f)]||0x0)),this[_0x5c4e3b(0x55a)](_0x56879b,'mp',_0x3f928e+(_0x32ac56[_0x5c4e3b(0x7fb)]||0x0),_0x41aa99+this[_0x5c4e3b(0x75e)]()+(_0x32ac56[_0x5c4e3b(0x722)]||0x0)),$dataSystem[_0x5c4e3b(0x58f)]&&this[_0x5c4e3b(0x55a)](_0x56879b,'tp',_0x3f928e+(_0x32ac56[_0x5c4e3b(0x1ae)]||0x0),_0x41aa99+this[_0x5c4e3b(0x75e)]()*0x2+(_0x32ac56[_0x5c4e3b(0x749)]||0x0));},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x346)]=function(_0x5f2ccc){const _0x1bb6c7=_0x482454;if(!VisuMZ[_0x1bb6c7(0x16e)][_0x1bb6c7(0x4ae)][_0x1bb6c7(0x738)][_0x1bb6c7(0x394)])return![];if(_0x5f2ccc[_0x1bb6c7(0x62c)]())return!![];return Imported[_0x1bb6c7(0xf6)]&&_0x5f2ccc[_0x1bb6c7(0x3fa)]();},Game_Actor[_0x482454(0x61b)]['getBattlePortraitOffsetX']=function(){const _0x42598e=_0x482454;if(this[_0x42598e(0x57b)]()[_0x42598e(0x305)][_0x42598e(0x445)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x42598e(0x305)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x482454(0x61b)]['getBattlePortraitOffsetY']=function(){const _0x4ca12f=_0x482454;if(this['actor']()[_0x4ca12f(0x305)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x4ca12f(0x57b)]()[_0x4ca12f(0x305)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x482454(0x109)]=function(_0x474bc1){const _0xd649bb=_0x482454,_0x540c32=this[_0xd649bb(0x57b)](_0x474bc1);if(this[_0xd649bb(0x346)](_0x540c32)){const _0x3c848d=_0xd649bb(0x91c)[_0xd649bb(0x355)](_0x540c32[_0xd649bb(0x930)]()),_0xf80c49=this['createInnerPortrait'](_0x3c848d,Sprite),_0x5a5411=_0x540c32[_0xd649bb(0x28d)]();_0x5a5411!==''?_0xf80c49['bitmap']=ImageManager[_0xd649bb(0x632)](_0x5a5411):_0xf80c49[_0xd649bb(0x2f4)]=ImageManager[_0xd649bb(0x77a)];const _0x2cfad2=this[_0xd649bb(0x579)](_0x474bc1);_0xf80c49[_0xd649bb(0x935)]['x']=0.5,_0xf80c49[_0xd649bb(0x935)]['y']=0x1;let _0x4c03be=Math[_0xd649bb(0x5d9)](_0x2cfad2['x']+_0x2cfad2[_0xd649bb(0x913)]/0x2)+this['padding'];_0x4c03be+=_0x540c32[_0xd649bb(0x89a)]();let _0x2db449=Math[_0xd649bb(0x5d9)](this[_0xd649bb(0x4c6)]);_0x2db449+=_0x540c32[_0xd649bb(0x26e)](),_0xf80c49[_0xd649bb(0x8fe)](_0x4c03be,_0x2db449);const _0x3ac355=VisuMZ[_0xd649bb(0x16e)]['Settings'][_0xd649bb(0x738)][_0xd649bb(0x514)];_0xf80c49[_0xd649bb(0x3a5)]['x']=_0x3ac355,_0xf80c49[_0xd649bb(0x3a5)]['y']=_0x3ac355,_0xf80c49[_0xd649bb(0x1f3)]();}else{const _0x3d279b=this[_0xd649bb(0x8c3)](_0x474bc1);this[_0xd649bb(0x313)](_0x540c32,_0x3d279b['x'],_0x3d279b['y'],_0x3d279b[_0xd649bb(0x913)],_0x3d279b[_0xd649bb(0x4c6)]);}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x245)]=function(_0x269c30,_0x30a902){const _0x9c819e=_0x482454,_0x55ea5a=this[_0x9c819e(0x3c1)];if(_0x55ea5a[_0x269c30])return _0x55ea5a[_0x269c30];else{const _0x54273d=new _0x30a902();return _0x55ea5a[_0x269c30]=_0x54273d,this[_0x9c819e(0x61f)](_0x54273d),this[_0x9c819e(0x61f)](this[_0x9c819e(0x731)]),_0x54273d;}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x14e)]=function(){const _0xe5bf7c=_0x482454;this[_0xe5bf7c(0x28b)](),this[_0xe5bf7c(0x1f5)](),Window_StatusBase[_0xe5bf7c(0x61b)]['_createClientArea'][_0xe5bf7c(0x2b9)](this),this[_0xe5bf7c(0xef)]();},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x28b)]=function(){const _0x39aa60=_0x482454;this['_cursorArea']=new Sprite(),this[_0x39aa60(0x731)]['filters']=[new PIXI['filters'][(_0x39aa60(0x374))]()],this[_0x39aa60(0x731)][_0x39aa60(0x35d)]=new Rectangle(),this[_0x39aa60(0x731)][_0x39aa60(0x8fe)](this[_0x39aa60(0x178)],this[_0x39aa60(0x178)]),this[_0x39aa60(0x83b)](this[_0x39aa60(0x731)]);},Window_BattleStatus['prototype'][_0x482454(0x1f5)]=function(){const _0x10c341=_0x482454;this[_0x10c341(0x62b)]=new Sprite(),this[_0x10c341(0x83b)](this['_effectsContainer']);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x5de)]=function(){const _0x6270a5=_0x482454;this[_0x6270a5(0x62b)]&&this[_0x6270a5(0x83b)](this['_effectsContainer']);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0xef)]=function(){const _0x1122eb=_0x482454;this[_0x1122eb(0x7fc)]=new Sprite(),this['addChild'](this[_0x1122eb(0x7fc)]);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x204)]=function(){const _0x37e150=_0x482454;this['_cursorSprite']=new Sprite();for(let _0x30cd00=0x0;_0x30cd00<0x9;_0x30cd00++){this[_0x37e150(0x5a8)][_0x37e150(0x83b)](new Sprite());}this['_cursorArea'][_0x37e150(0x83b)](this[_0x37e150(0x5a8)]);},Window_BattleStatus[_0x482454(0x61b)]['_updateClientArea']=function(){const _0x2243fa=_0x482454;Window_StatusBase[_0x2243fa(0x61b)][_0x2243fa(0x8b2)][_0x2243fa(0x2b9)](this),this[_0x2243fa(0x60b)]();},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x60b)]=function(){const _0x4b8551=_0x482454,_0x27a00f=this['_padding'];this['_cursorArea'][_0x4b8551(0x8fe)](_0x27a00f,_0x27a00f),this[_0x4b8551(0x731)]['x']=_0x27a00f-this[_0x4b8551(0x78c)]['x'],this[_0x4b8551(0x731)]['y']=_0x27a00f-this[_0x4b8551(0x78c)]['y'],this[_0x4b8551(0x311)]>0x0&&this['innerHeight']>0x0?this[_0x4b8551(0x731)]['visible']=this[_0x4b8551(0x5f0)]():this[_0x4b8551(0x731)][_0x4b8551(0x47d)]=![];},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x596)]=function(){const _0x185694=_0x482454;Window_StatusBase[_0x185694(0x61b)][_0x185694(0x596)][_0x185694(0x2b9)](this),this[_0x185694(0x69b)]();},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x69b)]=function(){const _0xcb8265=_0x482454,_0x291bd5=this['_cursorArea'][_0xcb8265(0x183)][_0xcb8265(0x524)](new Point(0x0,0x0)),_0x167b6d=this['_cursorArea']['filterArea'];_0x167b6d['x']=_0x291bd5['x']+this['origin']['x'],_0x167b6d['y']=_0x291bd5['y']+this[_0xcb8265(0x78c)]['y'],_0x167b6d[_0xcb8265(0x913)]=this[_0xcb8265(0x311)],_0x167b6d['height']=this[_0xcb8265(0x886)];},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x3ef)]=function(_0x451fcb){const _0x56a592=_0x482454;if(this['battleLayoutStyle']()!==_0x56a592(0x17a))return;this[_0x56a592(0x109)](_0x451fcb['index']());},Window_BattleStatus[_0x482454(0x61b)]['addDamageSprite']=function(_0x289a18,_0x7a97a5){const _0xa80306=_0x482454;if(!this[_0xa80306(0x7fc)])return;if(!_0x289a18)return;if(!_0x7a97a5)return;const _0x45471e=this[_0xa80306(0x579)](_0x7a97a5[_0xa80306(0x836)]());_0x45471e['x']+=_0x45471e['width']/0x2+this[_0xa80306(0x909)],_0x289a18['x']=_0x45471e['x'],_0x289a18['y']=_0x45471e['y'],this[_0xa80306(0x7fc)]['addChild'](_0x289a18);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x717)]=function(_0x523789){const _0x1cf47b=_0x482454;if(!this['_damageContainer'])return;if(!_0x523789)return;this[_0x1cf47b(0x7fc)][_0x1cf47b(0x5d4)](_0x523789);},Window_BattleStatus[_0x482454(0x61b)]['updateBorderStyle']=function(){const _0x4b4668=_0x482454;if(!this[_0x4b4668(0x5ab)]())return;if(!this[_0x4b4668(0x770)])this['createBorderStylePortraitSprite']();this[_0x4b4668(0x2ea)](),this[_0x4b4668(0x424)]();},Window_BattleStatus[_0x482454(0x61b)]['isBorderStylePortraitShown']=function(){const _0x2366f0=_0x482454;if(this[_0x2366f0(0x7cc)]!==Window_BattleStatus)return![];if(!SceneManager[_0x2366f0(0x1f8)]())return![];return VisuMZ[_0x2366f0(0x16e)]['Settings'][_0x2366f0(0x738)][_0x2366f0(0x5ef)];},Window_BattleStatus[_0x482454(0x61b)]['createBorderStylePortraitSprite']=function(){const _0x5d18e3=_0x482454;this[_0x5d18e3(0x770)]=new Sprite();const _0x26fd05=SceneManager['_scene'],_0x44d3a8=_0x26fd05[_0x5d18e3(0x793)]['indexOf'](_0x26fd05[_0x5d18e3(0x42f)]);_0x26fd05[_0x5d18e3(0x4ea)](this['_borderPortraitSprite'],_0x44d3a8),this['_borderPortraitSprite'][_0x5d18e3(0x935)]['x']=0.5,this[_0x5d18e3(0x770)][_0x5d18e3(0x935)]['y']=0x1;const _0x3a0f35=VisuMZ[_0x5d18e3(0x16e)]['Settings']['BattleLayout'][_0x5d18e3(0x5e9)];this[_0x5d18e3(0x770)]['scale']['x']=_0x3a0f35,this[_0x5d18e3(0x770)][_0x5d18e3(0x3a5)]['y']=_0x3a0f35,this['_borderPortraitSprite']['y']=this['y']+this[_0x5d18e3(0x4c6)],this[_0x5d18e3(0x5a6)]=0x0;},Window_BattleStatus['prototype'][_0x482454(0x2ea)]=function(){const _0x48788f=_0x482454;this['_borderPortraitSprite'][_0x48788f(0x47d)]=BattleManager[_0x48788f(0xe0)]();const _0x2ed07a=BattleManager[_0x48788f(0x57b)]();if(_0x2ed07a===this[_0x48788f(0x770)]['actor'])return;this['_borderPortraitSprite'][_0x48788f(0x57b)]=_0x2ed07a||this[_0x48788f(0x770)]['actor'];if(!_0x2ed07a)return;else{if(_0x2ed07a[_0x48788f(0x28d)]()===''){this[_0x48788f(0x770)]['bitmap']=ImageManager[_0x48788f(0x77a)];return;}else{const _0x2b0df3=ImageManager[_0x48788f(0x632)](_0x2ed07a[_0x48788f(0x28d)]());_0x2b0df3[_0x48788f(0x1b0)](this['processBorderActor']['bind'](this,_0x2b0df3));}}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x6fc)]=function(_0x1de362){const _0x2957fd=_0x482454;this[_0x2957fd(0x5a6)]=0x14,this['_borderPortraitSprite'][_0x2957fd(0x2f4)]=_0x1de362;SceneManager[_0x2957fd(0x938)]['isRightInputMode']()?(this['_borderPortraitSprite']['x']=0x0,this['_borderPortraitTargetX']=Math[_0x2957fd(0x80a)](_0x1de362['width']/0x2)):(this[_0x2957fd(0x770)]['x']=this[_0x2957fd(0x913)],this[_0x2957fd(0x8a8)]=this['width']*0x3/0x4);this['_borderPortraitSprite']['opacity']=0x0,this[_0x2957fd(0x770)]['y']=this['y']+this[_0x2957fd(0x4c6)];const _0x3722dd=BattleManager[_0x2957fd(0x57b)]();_0x3722dd&&(this[_0x2957fd(0x8a8)]+=_0x3722dd['getBattlePortraitOffsetX'](),this['_borderPortraitSprite']['y']+=_0x3722dd['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x424)]=function(){const _0x3265e1=_0x482454;if(this[_0x3265e1(0x5a6)]>0x0){const _0x51393d=this[_0x3265e1(0x5a6)],_0x4dfdb0=this[_0x3265e1(0x770)];_0x4dfdb0['x']=(_0x4dfdb0['x']*(_0x51393d-0x1)+this[_0x3265e1(0x8a8)])/_0x51393d,_0x4dfdb0[_0x3265e1(0x1f2)]=(_0x4dfdb0['opacity']*(_0x51393d-0x1)+0xff)/_0x51393d,this[_0x3265e1(0x5a6)]--;}},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x65e)]=function(){const _0x58c691=_0x482454;return;this[_0x58c691(0x62b)]&&(this[_0x58c691(0x62b)]['x']=this['x'],this[_0x58c691(0x62b)]['y']=this['y']),this[_0x58c691(0x7fc)]&&(this[_0x58c691(0x7fc)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x482454(0x61b)][_0x482454(0x1e9)]=function(){const _0x16b05c=_0x482454,_0x56f64c=VisuMZ[_0x16b05c(0x16e)]['Settings'][_0x16b05c(0x738)];if(_0x56f64c[_0x16b05c(0x41a)]){const _0x3eb17e=new Sprite();_0x3eb17e[_0x16b05c(0x2f4)]=ImageManager['loadSystem'](_0x56f64c[_0x16b05c(0x41a)]),_0x3eb17e['x']=_0x56f64c['StatusWindowAttachmentBackOffsetX']||0x0,_0x3eb17e['y']=_0x56f64c[_0x16b05c(0x8cb)]||0x0,this[_0x16b05c(0x61f)](_0x3eb17e),this[_0x16b05c(0x199)]=_0x3eb17e;}if(_0x56f64c[_0x16b05c(0x4d4)]){const _0x26c7b9=new Sprite();_0x26c7b9[_0x16b05c(0x2f4)]=ImageManager[_0x16b05c(0x818)](_0x56f64c[_0x16b05c(0x4d4)]),_0x26c7b9['x']=_0x56f64c[_0x16b05c(0x765)]||0x0,_0x26c7b9['y']=_0x56f64c['StatusWindowAttachmentFrontOffsetY']||0x0,this[_0x16b05c(0x83b)](_0x26c7b9),this['_frontAttachmentSprite']=_0x26c7b9;}},Window_BattleStatus['prototype'][_0x482454(0x1a5)]=function(){const _0x380aab=_0x482454;this[_0x380aab(0x3cc)]&&this[_0x380aab(0x83b)](this[_0x380aab(0x3cc)]),this['_backAttachmentSprite']&&this['addChildToBack'](this[_0x380aab(0x199)]);},Window_BattleActor['prototype'][_0x482454(0x3ac)]=function(){const _0x1698c6=_0x482454;return Window_BattleStatus['prototype'][_0x1698c6(0x3ac)][_0x1698c6(0x2b9)](this)&&this[_0x1698c6(0x39b)]();},Window_BattleActor[_0x482454(0x61b)][_0x482454(0x39b)]=function(){const _0xafbdd0=_0x482454,_0x3c9c1a=BattleManager[_0xafbdd0(0x548)](),_0x332dd1=this[_0xafbdd0(0x57b)](this['index']());if(!_0x3c9c1a)return!![];if(!_0x3c9c1a[_0xafbdd0(0x94e)]())return!![];const _0x9f1f67=_0x3c9c1a['item']()[_0xafbdd0(0x305)];if(_0x9f1f67['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x332dd1===BattleManager[_0xafbdd0(0x57b)]())return![];}return!![];},VisuMZ[_0x482454(0x16e)][_0x482454(0x11a)]=Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x63a)],Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x63a)]=function(_0x491caf){const _0xb08747=_0x482454;this[_0xb08747(0x5cc)]=null,VisuMZ[_0xb08747(0x16e)][_0xb08747(0x11a)][_0xb08747(0x2b9)](this,_0x491caf);},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x263)]=function(){const _0xb0302d=_0x482454;return this[_0xb0302d(0x4c0)]();},VisuMZ['BattleCore'][_0x482454(0x1cf)]=Window_BattleEnemy[_0x482454(0x61b)]['show'],Window_BattleEnemy['prototype']['show']=function(){const _0x4f76b0=_0x482454;VisuMZ[_0x4f76b0(0x16e)][_0x4f76b0(0x1cf)]['call'](this),this['y']=Graphics[_0x4f76b0(0x4c6)]*0xa;},Window_BattleEnemy['prototype']['validTargets']=function(){const _0x350c0a=_0x482454;return $gameTroop[_0x350c0a(0x7e3)]()['slice'](0x0);},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x477)]=function(){const _0x48c8ad=_0x482454;this[_0x48c8ad(0x557)]=this[_0x48c8ad(0x31a)](),this['sortEnemies'](),Window_Selectable[_0x48c8ad(0x61b)][_0x48c8ad(0x477)][_0x48c8ad(0x2b9)](this);},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x1a6)]=function(){const _0x2a3d56=_0x482454;this[_0x2a3d56(0x557)][_0x2a3d56(0x73b)]((_0x319072,_0x1729a2)=>{const _0x219bd6=_0x2a3d56;return _0x319072[_0x219bd6(0x1f6)]()[_0x219bd6(0x12b)]===_0x1729a2['battler']()[_0x219bd6(0x12b)]?_0x319072[_0x219bd6(0x1f6)]()[_0x219bd6(0x4c4)]-_0x1729a2[_0x219bd6(0x1f6)]()['_baseY']:_0x319072[_0x219bd6(0x1f6)]()['_baseX']-_0x1729a2['battler']()[_0x219bd6(0x12b)];}),SceneManager[_0x2a3d56(0x2fe)]()&&this['_enemies'][_0x2a3d56(0x133)]();},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x4b4)]=function(){const _0x44cd8a=_0x482454,_0xa3c3b5=VisuMZ[_0x44cd8a(0x16e)][_0x44cd8a(0x4ae)][_0x44cd8a(0x8c8)];_0xa3c3b5[_0x44cd8a(0x150)]?this[_0x44cd8a(0x510)]():this[_0x44cd8a(0x6bb)]();},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x510)]=function(){const _0x4140e2=_0x482454;if(this['_lastEnemy']&&this[_0x4140e2(0x557)][_0x4140e2(0x4df)](this[_0x4140e2(0x5cc)])){const _0x7e59da=this['_enemies'][_0x4140e2(0x7ac)](this[_0x4140e2(0x5cc)]);this[_0x4140e2(0x422)](_0x7e59da);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x6bb)]=function(){const _0x27b788=_0x482454,_0x24b5e8=VisuMZ[_0x27b788(0x16e)][_0x27b788(0x4ae)][_0x27b788(0x8c8)];let _0x51018f=![];$gameSystem[_0x27b788(0x447)]()?_0x51018f=_0x24b5e8[_0x27b788(0x11b)]:_0x51018f=_0x24b5e8[_0x27b788(0x273)],this[_0x27b788(0x422)](_0x51018f?this[_0x27b788(0x4c0)]()-0x1:0x0);},Window_BattleEnemy[_0x482454(0x61b)][_0x482454(0x25b)]=function(){const _0x481a92=_0x482454;Window_Selectable[_0x481a92(0x61b)][_0x481a92(0x25b)][_0x481a92(0x2b9)](this),this[_0x481a92(0x5cc)]=this['enemy']();},Window_BattleItem[_0x482454(0x61b)][_0x482454(0x4df)]=function(_0x55c06f){const _0x422f63=_0x482454;if(!_0x55c06f)return![];return _0x55c06f[_0x422f63(0x24c)]===0x0||_0x55c06f[_0x422f63(0x24c)]===0x1;};function Window_AutoBattleCancel(){const _0x12ad90=_0x482454;this[_0x12ad90(0x63a)](...arguments);}function _0x2f3e(){const _0x5e9f8c=['MANUAL','_ptbActionCost','GUARD','ActorCmd','iconWidth','lukEffectRate','gradientFillRect','Sprite_Battler_initMembers','Sprite_Battler_startMove','moveBattlerHomeToPoint','_actorCommandWindow','createLowerLayer','_borderPortraitTargetX','flashDuration','_mainSprite','StatusWindowSelectableBackHide','Skills','Text','_homeX','addSingleSkillCommand','isOptionsCommandAdded','weatherPower','_updateClientArea','statusWindowRectDefaultStyle','_jumpWholeDuration','split','ARRAYNUM','VisuMZ_2_PartySystem','Game_Temp_requestAnimation','Window_BattleLog_popBaseLine','resetFontSettings','endAction','Window_ActorCommand_setup','ActSeq_Angle_Reset','fontSize','onActorOk','checkShowHideSkillNotetags','isPartyCommandWindowDisabled','displayRemovedStates','faceRect','ActSeq_Mechanics_AtbGauge','autoBattleStyle','ApplyImmortal','_enemyNameContainer','Enemy','dead\x20actors','ActSeq_Mechanics_PtbFullHalfAction','StatusWindowAttachmentBackOffsetY','Window_BattleLog_performReflection','alive\x20friends\x20not\x20target','BattleManager_isTpbMainPhase','Scene_Battle_startActorCommandSelection','isGrowing','skewBattler','waitForMovement','performMoveToTargets','fnordRemovedStates','battleDisplayText','_battleField','useDigitGrouping','updateShadowBattleCore','Opacity','spinBattler','_distortionSprite','skew','process_VisuMZ_BattleCore_CommonEventKeys','PRE-','isAnyoneSkewing','addedStateObjects','onBattleEnd','Scene_Battle_itemWindowRect','requestPointAnimation','movement','tpbCommandFight','ActSeq_Target_RandTarget','clearElementChanges','applyDamageCaps','CombatLogIcon','Setting','ActSeq_DB_DragonbonesTimeScale','Scene_Battle_start','Sprite_Enemy_initVisibility','PartyCmd','Direction','SkillItemBorderCols','process_VisuMZ_BattleCore_Failsafes','hpDamageFmt','CmdIconEscape','setupShockwaveImpactFilter','addGuardCommand','ResetFocus','JS\x20%1START\x20TURN','noSimilarSTypes','PostStartTurnJS','-%1','updateCustomActionSequence','alive\x20battlers\x20not\x20target','TargetLocation','move','changePaintOpacity','createActorCommandWindowBattleCore','CommandAddAutoBattle','skillItemWindowRectMiddle','_motionCount','WaitForCamera','Game_Action_itemHit','JS\x20%1REGENERATE','_skewDuration','addText','padding','mpDamageFmt','_stypeIDs','_visualHpGauge_JustDied','updateAttachedSprites','battleGrow','_shadowScaleY','trim','_activeWeaponSlot','magicReflection','width','frameVisible','_forcedBattleLayout','addedDebuffs','skewDuration','_escapeRatio','addTextToCombatLog','startSpin','createHelpWindowBattleCore','actor%1-portrait','ArPenFlat','hide','updateMain','createDigits','_floatEasing','performAttackSlot','_duration','AutoMeleeAoE','isNextSceneBattleTransitionable','unchanged','States','ScaleY','Buffs','removeHorrorEffect','updateForceAction','Scene_Battle_partyCommandWindowRect','VariableDmg','evaded','EasingType','actorId','animationId','addSingleSkillCommands','updateCallMenu','refreshRequest','anchor','MotionIdle','guardSkillId','_scene','addWeaponSwapCommand','alphabetic','_lastAction','magicSkills','_battleCoreBattleResumeAfter','traitSet','toUseBoostPoints','WeaponTypeID','clone','isCTB','ActSeq_Motion_FreezeMotionFrame','pushBaseLine','StartName','_armorPenetration','COMBAT\x20LOG','drawSkillCost','trueRandomTarget','Game_Battler_makeSpeed','EnableSoftCap','isCustomActionSequence','Defeat','item','_drawTextOutline','BTestBypass','Scene_Map_updateCallMenu','createEffectActionSet','setWaitMode','AnchorY','Post','PostRegenerateJS','playOnceParallelInterpreter','_flipScaleX','hpHealingFmt','contents','isTpb','ESCAPE','_actorWindow','AdjustRect','Sprite_Actor_moveToStartPosition','processRandomizedData','VisuMZ_2_BattleSystemBTB','currentSymbol','gainHp','onBattleEndBattleCore','Actions','processVictory','dead\x20enemies','StepDistanceX','createEmptyBitmap','MaxLines','isAnyoneFloating','stepForward','PostApplyJS','isInputting','BindCommonEventKeysForGroup','helpWindowRect','motionType','moveToStartPositionBattleCore','Scene_Battle_logWindowRect','updateFloat','commandStyleCheck','sortDamageSprites','ConvertCount','Game_Battler_clearDamagePopup','Scene_Battle_initialize','SvMotionIdleSolo-%1-%2','_opacityWholeDuration','isSceneChanging','_createDamageContainer','StateIconOffsetX','dead\x20friends','setupBattleCore','BattleManager_makeActionOrders','ActionCenteredName','loadSvActor','VisuMZ_1_MainMenuCore','SvWeaponSolo-%1-%2','canAddSkillCommand','ActSeq_Angle_WaitForAngle','refreshDimmerBitmap','isMeleeSingleTargetAction','targetObjects','opponentsUnit','Override','displayChangedBuffs','regenerateAllBattleCore','_cacheTextWidth','battlerSprites','applySoftDamageCap','ParseSkillNotetags','actorCommandAutoBattle','charging','gainCurrentActionsFTB','process_VisuMZ_BattleCore_CreateRegExp','drawItemImagePortraitStyle','MAXMP','Window_BattleStatus_drawItemImage','isGuardWaiting','forceWeaponAnimation','ARRAYJSON','updateAction','SvWeaponMass-%1-%2','_colorType','exit','performCounter','Spriteset_Battle_createLowerLayer','createAnimationSprite','missile','alignBattleCoreDamageSprite','requestRefresh','addCustomCommands','Window_BattleEnemy_initialize','SideviewSelect','options','BattleManager_updatePhase','SvBattlerMass-%1-%2','ActSeq_Animation_ChangeBattlePortrait','_forcedBattlers','Game_Action_clear','updateBattleProcess','faceWidth','Game_Battler_clearMotion','result','clearForcedGameTroopSettingsBattleCore','isTpbCharged','_handlers','damageContainer','startMotion','_baseX','critical','Game_Action_isForOpponent','ForceRandom','setupBattleCoreData','Sprite_Battler_updatePosition','requestDragonbonesAnimation','isStatusAffected','reverse','Window_BattleLog_displayMiss','BattleManager_cancelActorInput','Parse_Notetags_Targets','getTraitSetKeys','_drawTextBody','floor','VisuMZ_3_SideviewBattleUI','createCommandVisibleJS','anchorX','isBattleRefreshRequested','applyGlobal','isTickBased','enemyId','getDualWieldTimes','_actor','AUTO\x20BATTLE','ActSeq_Animation_WaitForAnimation','isPlaytest','VisuMZ_3_BoostAction','NameAlwaysVisible','_enemy','ActSeq_Movement_WaitForSkew','SwitchMissEvade','_phase','setCustomDamageFormula','mpDamage','_createClientArea','_tempEquipCheck','LastSelected','isForOpponentBattleCore','onEscapeFailure','performRecovery','victory','HelpAutoBattle','getAttackMotion','isShownOnBattlePortrait','_floatWholeDuration','ForceExploited','ActSeq_Set_FinishAction','Sprite_Battler_setBattler','VisuMZ_3_ActSeqImpact','setBattleSkew','loadBattleback1','WaitCount1','_svBattlerSprite','6455610UvYiMg','CalcEscapeRaiseJS','_autoBattle','isCancelled','random','damage','ActSeq_Mechanics_FtbAction','createPartyCommandWindow','Game_Battler_forceAction','_targetFloatHeight','destroy','commandFight','motionSpeed','BattleCore','ShowTpDmg','Game_Action_setAttack','attackStates','updateHpGaugePosition','CheckSkillCommandShowSwitches','ShowCounter','setHelpWindow','getAttackWeaponAnimationId','Game_Map_encounterList','_padding','stateRate','portrait','shift','setBattler','putActiveBattlerOnTop','Window_BattleLog_displayTpDamage','Elements','onMoveEnd','setLastPluginCommandInterpreter','ITEM','worldTransform','okButtonText','Sprite_Battler_isMoving','isEnemy','chant','WaitForAnimation','commandNameWindowDrawText','JS\x20%1END\x20BATTLE','svAnchorX','singleSkill','setCursorRect','turnCount','PreDamageJS','_preBattleCommonEvent','battleCameraData','WaitCount','changeCtbChargeTime','Game_Party_addActor','needsSelection','displaySubstitute','createActorCommandWindow','Parse_Notetags_Action','_backAttachmentSprite','isSTB','_targetSkewX','physical','filter','isSkewing','Sprite_Enemy_updateStateSprite','_jumpDuration','Sprite_Weapon_loadBitmap','HP_Rate','drawItemImageListStyle','battleZoom','updateAttachmentSprites','sortEnemies','OffsetAdjust','canAttackBattleCore','addSkillCommands','_attackAnimationId','expRate','AsTarget','wtypeId','TpGaugeOffsetX','BattleManager_endBattle','addLoadListener','canGuard','inHomePosition','ActSeq_Mechanics_BoostPointsChange','NameOffsetY','setMoveEasingType','adjustPosition','Game_Action_applyGlobal','setupWeaponAnimation','checkSubstitute','ActSeq_Mechanics_TextPopup','fight','HP_Flat','fnordAddedStates','onHomeMoveEnd','getDefeatedEnemies','Mute','Strength','_enemyWindow','performMagicEvasion','Destination','alive\x20enemies\x20not\x20user','frameCount','svAnchorY','itemEffectAddNormalState','setAttack','onSelectAction','updateVisibility','commandNameWindowCenter','BattleManager_checkSubstitute','_animationContainer','Window_BattleEnemy_show','startInput','ActSeq_Mechanics_HpMpTp','skillTypes','addState','QoL','_allTargets','JS\x20%1END\x20ACTION','getCommonEventIdWithName','Window_BattleStatus_initialize','_forcedHomeY','_autoBattleWindow','ParseItemNotetags','Game_Action_makeTargets','hpAffected','makeEscapeRatio','isSpinning','anchorY','_waitCount','process_VisuMZ_BattleCore_jsFunctions','max','waitForAnimation','cameraOffsetDuration','CriticalDmgRate','font','updateJump','createAttachmentSprites','cameraClamp','TpbGaugeOffsetY','ActSeq_Mechanics_RemoveBuffDebuff','allBattleMembers','ActionSequence','_targetIndex','clearBattleCoreData','PreDamage%1JS','opacity','show','nextActiveWeaponSlot','_createEffectsContainer','battler','zoomDuration','isSceneBattle','slices','list','createAnimationContainer','addBattleCoreAutoBattleStyleCommand','StartTurnMsg','_flashColor','Sprite_Actor_updateShadow','checkCacheKey','ShowEnemyGauge','createStateSprite','isAutoBattleCommandAdded','_createCursorSprite','ShowHide','pointX','commandEscape','HpGauge','PostApply%1JS','itemHeight','Game_Troop_setup','Targets2','windowAreaHeight','_angleEasing','isPartyTpbInputtable','commandNameWindowDrawBackground','Spriteset_Battle_createBattleField','cancel','casting','_weaponSprite','alterActionCostPTB','ArRedFlat','isDTB','RequiresDefeat','selectNextCommand','WaitForProjectile','_surprise','isChanting','Immortal','battleCoreTpbMainPhase','bitmapWidth','updatePositionBattleCore','battleUIOffsetY','getStypeIdWithName','wait','param','ParseArmorNotetags','ActSeq_Camera_Offset','WaitForSpin','isItemCommandEnabled','ShowAddedBuff','ActionEffect','blockWidth','setHelpWindowItem','processActorCommandCancelTPB','isEffecting','TextAlign','Window_BattleLog_displayEvasion','FlinchDuration','createBattleFieldBattleCore','_preemptive','ActSeq_Movement_Skew','ReflectAnimation','Window_Options_addGeneralOptions','CalcEscapeRatioJS','setText','Window_BattleLog_performActionEnd','displayItemMessage','ActSeq_BattleLog_DisplayAction','ActSeq_Mechanics_EnemyEscape','CastMagical','loadWindowskin','chantStyle','extraPositionY','ActSeq_Camera_Reset','HitRate','prev\x20target','clearFreezeMotionForWeapons','createInnerPortrait','canEscape','3buhvea','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','isPreviousScene','atbInterrupt','toUpperCase','occasion','Window_BattleLog_performMiss','_skewY','isEscapeCommandEnabled','battleStatusWindowAnimationContainer','makeActions','createCommandNameWindow','toString','adjustPosition_1for1','ParseAllNotetags','drawItemStatusListStyle','displayChangedStates','helpAreaHeight','initMembersBattleCore','deathStateId','callOkHandler','NameAlwaysHidden','PostEndBattleJS','getNextSubject','addChildToUiContainer','processEscape','isOpponent','Scene_Battle_createCancelButton','maxCols','hitFlat','thrust','battleSys','createStateIconSprite','isMVAnimation','PreApplyAsUserJS','ParseStateNotetags','_animationCount','onDisabledPartyCommandSelection','_partyCommandWindow','getBattlePortraitOffsetY','_floatDuration','OverallFormulaJS','criticalHitRate','PreApplyAsTargetJS','FrontViewSelect','regenerateAll','ActSeq_Camera_WaitForCamera','allowCollapse','forceAction','logWindowRect','createBattleUIOffsetX','becomeSTBExploited','cameraDuration','_targetGrowX','arRedRate','applyEasing','helpWindowRectBorderStyle','_endBattle','Height','CreateCommonEventKeys','repositionCancelButtonBorderStyle','checkTpbInputOpen','ShowWeapon','alive\x20enemies','ScaleToFit','counterAttack','canInput','_flinched','_createCursorArea','_immortal','getBattlePortraitFilename','Sprite_Animation_targetSpritePosition','DisplayAction','startTpbTurn','svShadow','ShowHpDmg','BattleManager_initMembers','battlerSmoothImage','attackAnimationIdSlot','commandName','hasSkill','ParseWeaponNotetags','isAttack','_jumpHeight','removeState','attackAnimationId1','some','_stateSprite','code','requestMotionRefresh','adjustFlippedBattlefield','_executedValue','battleEffect','Game_Battler_performDamage','showAnimation','isMoving','Game_Action_isForFriend','command339','Game_Action_itemEffectAddAttackState','StyleOFF','PreStartBattleJS','mainFontSize','PostEndActionJS','drawSingleSkillCost','BattleStartEvent','BattleManager_endAction','HitFlat','_svBattlerData','Game_Action_needsSelection','ActSeq_Motion_RefreshMotion','PrioritySortActors','setup','displayCounter','actorCommandWindowRect','call','isFloating','ARRAYSTRUCT','DigitGrouping','Game_Actor_setup','refreshStatusWindow','turnOrderChangeOTB','DefeatEvent','loadBitmap','ActSeq_Element_Clear','UNTITLED','setImmortal','hasBeenDefeatedBefore','getLastPluginCommandInterpreter','arRedFlat','isHidden','command283','ActSeq_Mechanics_AddBuffDebuff','battleLayoutStyle','isNonSubmenuCancel','_damages','wholeActionSet','BravePoints','isTeamBased','isFrameVisible','EFFECT_COMMON_EVENT','setBattlerFlip','battleSpin','prepareCustomActionSequence','Scene_Battle_startPartyCommandSelection','updatePadding','checkShowHideSwitchNotetags','updateCollapse','pow','drawItemStatusXPStyle','skillWindowRect','addedBuffs','BattleManager_startTurn','callOptions','GuardFormulaJS','CriticalHitFlat','_effectType','performMoveToPoint','applyResultSwitches','Scene_Battle_onEnemyOk','Scale','active','_target','_commonEventIDs','prepareBorderActor','dead','autoBattleStart','Game_Action_itemEffectAddNormalState','isTurnBased','Actor','AutoMeleeSolo','VisuMZ_1_ElementStatusCore','contentsOpacity','dimColor2','bitmap','createBattleFieldContainer','onAngleEnd','startFloat','resizeWindowXPStyle','ActSeq_ChangeSkew','update','isATB','1397908BVRGZV','SwitchCritical','isBattleFlipped','isAnyoneSpinning','Sprite_Actor_createStateSprite','isConfused','snapForBackground','DEF','startOpacity','note','+%1\x20MP','updateShadow','VisuMZ_4_CombatLog','updateEventMain','ActSeq_Movement_Scale','addOptionsCommand','actionSplicePoint','sliceMin','unshift','ActSeq_Mechanics_ActionEffect','hitRate','innerWidth','_indent','drawActorFace','MAT','applyImmortal','_deathStateApplied','Class-%1-%2','BaseTroopIDs','WtypeId','validTargets','removeBuffsAuto','Scene_ItemBase_applyItem','createChildSprite','attack','isAnyProjectilePresent','mainSprite','showEnemyAttackAnimation','_skewX','JS\x20%1END\x20TURN','Scene_Battle_createActorCommandWindow','OffsetY','_homeDuration','hpDamage','_onceParallelInterpreters','_defeatedEnemies','canAttack','isItem','startPartyCommandSelection','push','ActSeq_Impact_MotionBlurTarget','AutoBattleCancel','battleMove','SkipPartyCmd','BattleManager_onEncounter','measureTextWidth','clearOnceParallelInterpreters','JS\x20%1DAMAGE\x20%2','command236','isImmortal','\x20to\x20%1\x20midbattle.','_battlerContainer','Window_BattleLog_popupDamage','addSkillTypeCommand','createSeparateDamagePopups','maxLines','bossCollapse','isDying','isBattleCoreTargetScope','Game_BattlerBase_canGuard','_active','BattleCmdList','ActSeq_Mechanics_AddState','isStateResist','showPortraits','ActSeq_Movement_WaitForJump','Game_Action_executeDamage','ForceExploiter','Skill-%1-%2','AutoBattleMsg','_back1Sprite','getDamageStyle','onBattleStart','displayAction','remove','registerCommand','NameOffsetX','Exploited','Scene_Map_initializeAfter','format','Game_Map_battleback2Name','ActSeq_Movement_WaitForMovement','_growEasing','forceEscapeSprite','skills','Sprite_Battleback_adjustPosition','extraPositionScaledY','filterArea','commandSymbol','isOptionsCommandEnabled','addNewState','invokeAction','isFriendly','Game_BattlerBase_canAttack','Window_ActorCommand_initialize','statusWindowRectXPStyle','battleAnimation','onAllActionsEnd','drawIcon','extraHeight','skillItemWindowRectBorderStyle','abs','_battlerHue','_cache','boxWidth','showNormalAnimation','noise','drawBackgroundRect','statusWindowRectBorderStyle','moveBattlerHomeDistance','AlphaFilter','targetActionSet','_stateIconSprite','startAttackWeaponAnimation','finalizeScale','Shadow','_shake','damageFlat','performReflection','setupMotion','ActSeq_Mechanics_CustomDmgFormula','29448330eIBleH','_makeFontNameText','BattleManager_startBattle','alive\x20opponents\x20not\x20target','itemCri','ChantStyle','%1EndActionJS','undecided','_growDuration','_inputting','process_VisuMZ_BattleCore_Notetags','position','log','MeleeDistance','processBattleCoreJS','ActSeq_Movement_HomeReset','Game_Troop_expTotal','addAttackCommand','CopyCombatLog','ActionItemMsg','findTargetSprite','ShowPortraits','DamageStyleList','getInputButtonString','Shadow2','textSizeEx','missle','checkTpbInputClose','isActionSelectionValid','drawEnemyName','_itemWindow','reduce','createCancelButton','iconHeight','alterCost','iconText','initVisibility','Wave','scale','svBattlerAnchorY','mainSpriteScaleY','border','bgType','ActSeq_Projectile_Animation','checkShowHideBattleNotetags','isOkEnabled','selectNextActor','removedStateObjects','displayFailure','_regionBattleback2','shadow','VisuMZ_2_DragonbonesUnion','icon','requestAnimation','all\x20targets','_animation','_targetHomeX','Game_Map_battleback1Name','battleSpriteSkew','OffsetX','PrioritySortActive','_logWindow','displayAffectedStatus','VisuMZ_3_WeaknessDisplay','globalAlpha','FocusX','_additionalSprites','collapse','registerDefeatedEnemy','HelpItem','MotionType','_callSceneOptions','Weapon-%1-%2','onEnemyCancel','animation','displayAddedStates','text','_frontAttachmentSprite','rowSpacing','motionIdle','MessageWait','duration','isBypassDamageCap','AsUser','message1','_linkedSprite','createWeather','_tpbState','windowPadding','performDamage','damageOffsetY','partyCommandWindowRect','ScaleUp','ActSeq_Mechanics_Collapse','ActSeq_Zoom_Scale','WaitForMovement','updateOnceParallelInterpreters','uiInputPosition','restore','equips','getSkillTypes','createBattleField','parse','return\x200','mainSpriteWidth','updateBattlebackBitmap','setupCriticalEffect','updateAngleCalculations','addAnimationSpriteToContainer','maxBattleMembers','FlinchDistanceY','WaitForAngle','refreshActorPortrait','waitForNewLine','displayReflectionPlayBack','textColor','updateHomeMove','_checkOn','auto','updateBitmap','weaponTypes','isPhysical','changeBattlebacks','getMenuImage','performJump','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','StartTurnWait','CmdTextAutoBattle','mmp','isCharging','dying','BattleEndEvent','length','_growY','processForcedAction','windowskin','cancelActorInput','textWidth','Sprite_SvEnemy','startGrow','_battlerName','skill','COMBATLOG','BattleManager_inputtingAction','usePremadeActionSequence','placeStateIcon','Game_Battler_startTpbTurn','partyCommandWindowRectDefaultStyle','isETB','lineRect','type','svBattlerAnchorX','refreshBattlerMotions','Point','applyFreezeMotionFrames','StatusWindowAttachmentBack','Scene_Battle_stop','%1Event','performFlinch','Game_Battler_regenerateAll','VisuMZ_2_BattleSystemSTB','VisuMZ_3_ActSeqProjectiles','ParseActorNotetags','forceSelect','Scene_Battle_skillWindowRect','updateBorderSprite','Sprite_Enemy_updateBossCollapse','_multipliers','stateMotionIndex','angle','VisuMZ_1_SkillsStatesCore','ActSeq_Movement_WaitForOpacity','%1RegenerateJS','_angleWholeDuration','updateInterpreter','PreEndTurnJS','_windowLayer','getItemDamageAmountTextBattleCore','ActSeq_BattleLog_AddText','AGI','PostDamage%1JS','ActSeq_Weapon_NextActiveWeapon','makeActionListAutoAttack','ActSeq_Movement_Spin','Formula','ParseEnemyNotetags','displayBuffs','CommandAddOptions','ActSeq_Impact_MotionTrailRemove','startMove','effects','_text','ActSeq_Horror_NoiseRemove','stop','calcWindowHeight','isQueueOptionsMenu','setValue','PopupDuration','match','getFullActionsPTB','isSideView','Damage','autoBattleAtStart','FocusY','BackColor','DamageFlat','setBattlePortrait','CounterPlayback','_lastPluginCommandInterpreter','min','addDamageSprite','executeDamage','ActSeq_Animation_PlayAtCoordinate','ActSeq_Movement_FaceTarget','addItemCommand','drawTextTopAligned','updateFrame','Scene_Battle_terminate','resizeWindowBorderStyle','PreEndActionJS','Window_Options_statusText','Window_BattleLog_displayFailure','setupActionSet','BARE\x20HANDS','_battlePortrait','ActSeq_Impact_MotionTrailCreate','_growX','selectNextCommandTpb','changeWeather','clamp','applyVariance','_helpWindow','Frame','_enemyIDs','ElementStatusCore','performCastAnimation','ActSeq_Mechanics_DamagePopup','checkAutoCustomActionSequenceNotetagEffect','Scene_Battle_helpWindowRect','regionId','_motionSpeed','_index','updateGrow','CalcActionSpeedJS','BattleManager_processDefeat','shouldPopupDamage','addCommand','_growWholeDuration','refresh','canMove','centerFrontViewSprite','JS\x20ESCAPE\x20SUCCESS','Game_Action_apply','ActSeq_Element_NullElements','visible','ActSeq_Mechanics_OnceParallel','setCommonEvent','battleSkew','ActSeq_Movement_MoveToTarget','redraw','createJS','adjustPosition_ScaleUp','command3011','guard','_back2Sprite','getItemDamageAmountLabelOriginal','Sprite_Actor_setActorHome','visualHpGauge','dead\x20opponents','battleCorePreBattleCommonEvent','_actions','context','displayTpDamage','_enemyId','SkillItemStandardCols','AS\x20USER','left','setSkill','ActSeq_Mechanics_BtbGain','Reveal','notFocusValid','startActorCommandSelection','Game_Actor_makeActionList','VisuMZ_0_CoreEngine','startWeaponAnimation','VisuMZ_2_BattleSystemETB','battleMembers','_currentAngle','Window_BattleLog_clear','createUIContainer','ScaleDown','isCertainHit','isCommandEnabled','updateSkew','actorCommandCancelTPB','BreakShields','start','bitmapHeight','isVisualHpGaugeDisplayed','isSkipPartyCommandWindow','BattleManager_selectNextCommand','NameLegacy','Game_Battler_performMiss','Settings','launchBattle','WaitForScale','isAnimationPlaying','selectPreviousCommand','clearResult','autoSelect','processRefresh','initBattlePortrait','performAttack','dead\x20battlers','ConvertParams','ActSeq_BattleLog_WaitForNewLine','isRightInputMode','Variable','applyBattleCoreJS','autoBattle','getWtypeIdWithName','maxItems','battleOpacity','Game_System_initialize','createBattleUIOffsetY','_baseY','ActSeq_Movement_Opacity','height','XPActorDefaultHeight','updateStateSprite','setVisibleUI','startEnemySelection','isOnCurrentMap','createAttachedSprites','performActionMotions','ActSeq_Animation_ShowAnimation','preemptive','loadBattleback2','_weaponImageId','PreStartTurnJS','CmdIconAutoBattle','StatusWindowAttachmentFront','Enemy-%1-%2','updatePhase','partyCommandWindowRectBorderStyle','process_VisuMZ_BattleCore_BaseTroops','getHalfActionsPTB','updateFlip','TpbActiveChangeEnabled','PerformAction','removeOnceParallelInterpreter','EscapeFailureJS','includes','updateStyleOpacity','showHelpWindow','textAlign','_targetHomeY','setBattlerMotionTrailData','reserveCommonEvent','isAnyoneJumping','battleCommandName','compatibilityVisible','ActSeq_Weapon_SetActiveWeapon','addChildAt','Sprite_Battler_update','ActSeq_Movement_WaitForFloat','randomTargets','displayReflection','isSkillItemWindowsMiddle','parameters','setBackgroundType','isBattlerFlipped','_battleCoreBattleStartEvent','battleCommandIcon','battlelog','applyTargetFilters','clear','displayEvasion','applyArmorModifiers','initMembers','currentClass','PopupShiftY','_speed','_jumpMaxHeight','Game_Enemy_setup','isTriggered','setBattleCameraPoint','ActSeq_Movement_Jump','evalDamageFormula','getNextDamagePopup','battleJump','CmdIconItem','ActSeq_Mechanics_SwapWeapon','repeatTargets','VisuMZ_2_HorrorEffects','makeSuccess','setActionState','MotionAni','getNextSubjectFromPool','Sprite_Battler_damageOffsetY','die','autoSelectLastSelected','battlerShadowScaleX','uiMenuStyle','JS\x20%1APPLY\x20%2','PortraitScale','concat','JumpToLabel','CommandWidth','startTurn','turn','alterType','ActSeq_Zoom_Reset','Scene_Battle_selectNextCommand','FaceAway','performTpbActiveCheckSwitch','CastPhysical','open','ActSeq_Mechanics_AnalyzeWeakness','isAlwaysVisible','value1','apply','HpGaugeOffsetX','PostDamageAsTargetJS','_pattern','ShowCosts','isChangingOpacity','evade','front\x20center','stepFlinch','isActing','Game_BattlerBase_eraseState','itemHit','GroupDigits','_battleCoreForcedElements','onGrowEnd','BattleLog','isMeleeMultiTargetAction','gainFullActionsPTB','Sprite_Actor_updateFrame','message4','swing','AnchorX','statusText','pages','_iconIndex','_tempBattler','FaceDirection','Sprite_AnimationMV_updatePosition','makeActionOrders','ShuffleArray','addBattleCoreAutoBattleStartupCommand','dataId','displayCurrentState','tpbActorSwitchConditionsMet','applyData','Turns','inputtingAction','retreat','pop','isMagical','-%1\x20MP','drawGauge','ActSeq_Mechanics_StbExtraAction','fillRect','PostApplyAsTargetJS','iconIndex','battleFloat','performMiss','_commonEventKey','isSelected','Sprite_StateIcon_updateFrame','_enemies','CoreEngine','CastAnimation','placeGauge','_tempActor','dragonbonesData','MotionSpeed','NameAttachStateIcon','Game_Interpreter_command283','startAction','performActionEnd','createContents','replace','setupChild','playCancel','isDamagePopupRequested','timeScale','substitute','drawItemBackground','endAnimation','Scene_Battle_startEnemySelection','_homeEasing','_baseLineStack','isAlwaysHidden','SceneManager_isSceneChanging','ShowActorGauge','Window_BattleLog_displayMpDamage','parseForcedGameTroopSettingsBattleCore','Mechanics','ActSeq_Mechanics_RemoveState','Battleback','basicGaugesY','Parse_Notetags_TraitObjects','action','itemRect','isBattlerGrounded','actor','Window_BattleLog_performSubstitute','_subject','ActSeq_Mechanics_BreakShieldChange','canGuardBattleCore','onTurnEnd','actionEffect','Scene_Battle_createPartyCommandWindow','clearFreezeMotion','Window_BattleLog_displayActionResults','setupDamagePopup','string','#ffffff','updateOpacity','Window_BattleLog_performRecovery','_item','ParseClassNotetags','AllowRandomSpeed','encounterList','setHue','optDisplayTp','glitch','Game_Interpreter_terminate','ActionSkillMsg2','initElementStatusCore','ActSeq_Animation_CastAnimation','NameFontSize','_updateFilterArea','map','setHome','Name','performEvasion','updateShadowScale','createHelpWindow','center','MOTIONS','VarianceFormulaJS','WaitForFloat','flashColor','LUK','CheckMapBattleEventValid','ActionEnd','setBattleZoom','_borderPortraitDuration','BattleLogRectJS','_cursorSprite','makeTargetSelectionMoreVisible','setBattleCameraOffset','isBorderStylePortraitShown','isBuffAffected','_floatHeight','POST-','addFightCommand','value','getAttackMotionSlot','weaponImageId','process_VisuMZ_BattleCore_PreBattleCommonEvent','damageOffsetX','_shadowSprite','autoMeleeSingleTargetActionSet','Scene_Battle_updateStatusWindowPosition','Window_BattleLog_performCollapse','ActSeq_Camera_Clamp','close','ArPenRate','drawTextEx','isForRandom','setFrame','initBattleCore','WaitForJump','Window_BattleLog_performCounter','addShowHpGaugeCommand','changeInputWindow','Sprite_Actor_initMembers','onEnemyOk','ActSeq_Impact_MotionBlurScreen','PostDamageJS','Slot','refreshMotion','ActSeq_Target_CurrentIndex','customDamageFormula','_lastEnemy','ChangeOrderBy','drawItemStyleIcon','getItemDamageAmountTextOriginal','randomInt','autoBattleWindowRect','Amp','buffAdd','removeChild','Window_BattleLog_refresh','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','ActSeq_BattleLog_Clear','Game_BattlerBase_refresh','round','Scene_Party','isBattleSys','EVAL','finishActionSet','updateEffectsContainer','frontviewSpriteY','animationWait','PopupShiftX','right','actorCommandSingleSkill','parent','ShowFacesListStyle','8tZLnFq','collapseType','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','PortraitScaleBorderStyle','updateScale','mainSpriteHeight','clearBattlerMotionTrailData','WaitForZoom','AttachStateOffsetX','ShowPortraitsBorderStyle','isOpen','playReflection','skillId','_regionBattleback1','ReflectPlayback','ActSeq_Mechanics_Immortal','ActSeq_Horror_NoiseCreate','_forcedHomeX','makeHpDamageText','deadMembers','compareEnemySprite','MDF','preparePartyRefresh','top','currentValue','ARRAYFUNC','Window_PartyCommand_initialize','gaugeX','ShowAddedState','_motion','CmdStyle','Scene_Battle_selectPreviousCommand','EmergeText','addPartyCommand','344111ylZOSF','default','Scene_Map_initialize','_updateCursorArea','setGuard','useItem','_commandNameWindow','480483BADRAX','isForFriendBattleCore','ARRAYSTR','createAutoBattleWindow','Window_BattleLog_displayCurrentState','enemy','createPartyCommandWindowBattleCore','isAppeared','isPreviousSceneBattleTransitionable','VisuMZ_2_WeaponSwapSystem','_customDamageFormula','ActSeq_ChangeAngle','prototype','toLowerCase','DistanceAdjust','_targets','addChildToBack','destroyDamageSprite','onEncounter','_lines','updateBattlebackBitmap2','HelpOptions','1:1','WaitForNewLine','makeDeepCopy','displayStartMessages','setActorHome','setBattleAngle','_effectsContainer','getBattlePortrait','itemTextAlign','DTB','%1EndTurnJS','numTargets','text\x20target','loadPicture','clearActiveWeaponSlot','performCollapse','isAtbChargingState','startActorSelection','currentExt','isSpriteVisible','processPostBattleCommonEvents','initialize','VariableHeal','changeTurnOrderByCTB','_statusWindow','startSkew','_isBattlerFlipped','alive\x20actors\x20not\x20user','startHomeMove','alterPriority','priority','Game_Battler_onBattleStart','sliceMax','attackMotions','Game_Action_setGuard','getChildIndex','_skewWholeDuration','updateRefresh','status','getEnemyIdWithName','JS\x20BATTLE\x20VICTORY','CriticalColor','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','PreStartActionJS','_dimmerSprite','svBattlerShadowVisible','command119','TextColor','\x5cI[%1]%2','displayType','textBaseline','formula','partyCommandWindowRectXPStyle','softDamageCapRate','ForceDeath','description','isHiddenSkill','updateEffectContainers','scope','dimColor1','abnormal','removeActor','currentAction','_appeared','create','ConfigManager_applyData','isFlipped','MAXHP','Angle','%1Apply%2JS','ArRedRate','actions','ActSeq_Impact_ShockwavePoint','ActSeq_Weapon_ClearActiveWeapon','ActSeq_Mechanics_Multipliers','_interpreter','TP_Rate','PreDamageAsUserJS','statusWindowRect','performSubstitute','_effectDuration','makeTargetsBattleCore','SkewY','setEventCallback','popBaseLine','Window_BattleLog_performMagicEvasion','changeBattlerOpacity','checkSceneBattleTransitionable','setupMotionBlurImpactFilter','sideview_ui','Game_Party_removeActor','_motionType','walk','setSvBattlerSprite','custom','weapons','Game_BattlerBase_initMembers','ActSeq_Mechanics_CtbSpeed','makeTargets','performAction','TPB','Game_BattlerBase_addNewState','<CENTER>%1','Scene_Map_launchBattle','isAnyoneGrowing','ActSeq_Mechanics_DeathBreak','isForRandomBattleCore','isActiveTpb','Game_Map_setupBattleback','Scene_Battle_createHelpWindow','XPSpriteYLocation','addOnceParallelInterpreter','battleUIOffsetX','CmdIconFight','ActSeq_Impact_ShockwaveEachTargets','displayActionResults','ActSeq_Movement_Float','ActSeq_Movement_FacePoint','_updateCursorFilterArea','escape','_targetGrowY','boxHeight','displayMiss','isMagicSkill','adjustPosition_ScaleDown','_commonEventQueue','extraPositionX','updateBossCollapse','_tpbSceneChangeCacheActor','ActSeq_Set_WholeActionSet','_branch','updateCommandNameWindow','CriticalHitRateJS','DigitGroupingDamageSprites','waitForOpacity','ActSeq_Horror_GlitchRemove','updateBattlerContainer','save','canUseItemCommand','resetResultSwitches','Sprite_Battler_damageOffsetX','_waitMode','updatePosition','Sprite_Battler_updateMain','updateShadowPosition','_shadowScaleX','addActor','linkSprite','needsSelectionBattleCore','applyGlobalCommonEventNotetags','autoSelectPriority','addDebuff','setupHpGaugeSprite','RevertAngle','HomePosJS','DefaultDamageStyle','front\x20base','SmoothImage','adjustWeaponSpriteOffset','AutoBattle','_skewEasing','actionBattleCoreJS','softDamageCap','_actorSprites','createMiss','requestMotion','StepDuration','isSkill','HelpSkillType','MotionFrameWait','setupZoomBlurImpactFilter','refreshCursor','ActSeq_Impact_ZoomBlurPoint','onEscapeSuccess','updateBattlebackBitmap1','isForFriend','addAutoBattleCommand','ActSeq_Set_SetupAction','setActiveWeaponSlot','members','canAlterActionCostPTB','CastCertain','battleAngle','Mirror','_homeWholeDuration','repeats','SkewX','Game_Battler_performEvasion','traitObjects','switchToWeaponType','svBattlerData','IconStypeMagic','updateShadowVisibility','addAutoBattleCommands','_hpGaugeSprite','SceneManager_push','ClearBattleLog','alterChange','VisuMZ_2_BattleSystemCTB','isDeathStateAffected','_opacityDuration','makeCommandList','updateWaitMode','placeTimeGauge','createEnemyNames','AddOption','BattleManager_onEscapeFailure','_uiContainer','iterateBattler','battleback1Name','_angleDuration','ActSeq_Horror_TVRemove','DamageDisplay','canUse','actorCommandEscape','processBorderActor','DualWield','ActSeq_Projectile_Icon','Scene_Battle_commandFight','ActSeq_Animation_ActionAnimation','spell','removeImmortal','isNextScene','Duration','isTpbMainPhase','placeActorName','ActionEndUpdate','isBreakStunned','PreRegenerateJS','ActSeq_Movement_WaitForSpin','battleback2Name','emerge','jumpBattler','CriticalDuration','popupDamage','_opacityEasing','_lastRegenFrameCount','setupIconTextPopup','setupTextPopup','ActSeq_Element_AddElements','CmdIconOptions','_wtypeIDs','removeDamageSprite','hasSvBattler','freezeFrame','Targets','Scene_Battle_onActorCancel','_weather','FlashColor','createShadowSprite','_offsetX','StatusWindowSkinFilename','_homeY','MpGaugeOffsetY','makeBattleCommand','growBattler','getConfigValue','ActionCount','Window_BattleLog_pushBaseLine','Sprite_Enemy_setHue','moveBattlerDistance','getColor','WaitForSkew','drawText','commandStyle','setHalfActionsPTB','onSkewEnd','isAnyoneChangingOpacity','_cursorArea','friendsUnit','pattern','setupBattlebackBattleCore','removeStatesAuto','HelpEscape','PreEndBattleJS','BattleLayout','updateCancel','isAffectedByBreakShield','sort','forceMotion','ShowCurrentState','_totalValue','_flashDuration','isGuard','ActSeq_Horror_GlitchCreate','createString','DistanceY','Debuffs','version','onFloatEnd','stepBack','Game_Interpreter_command301','TpGaugeOffsetY','Radius','bottom','WaitForOpacity','Scene_Boot_onDatabaseLoaded','Rate','_baseTexture','isForAll','Scene_Battle_windowAreaHeight','maxTp','arPenFlat','isBattleTest','BindCommonEventKeysForObj','setBattlerBattleCore','_tpbNeedsPartyCommand','_dragonbonesSpriteContainer','Game_Actor_equips','command357','setHandler','battleCamera','freezeMotion','gaugeLineHeight','applyGuard','DisablePartyCmd','isActor','setHorrorEffectSettings','STYPES','createEnemyNameContainer','StatusWindowAttachmentFrontOffsetX','ActSeq_Horror_Clear','_targetSkewY','isFTB','Game_Action_numRepeats','ARRAYEVAL','Game_Action_isForRandom','CommandVisible','ActSeq_Mechanics_WaitForEffect','hue','HpGaugeOffsetY','_borderPortraitSprite','BattleManager_startInput','NextTurn','updateMotionCount','applyForcedGameTroopSettingsBattleCore','applyHardDamageCap','ActSeq_Movement_BattleStep','targetSpritePosition','createDistortionSprite','MIN_SAFE_INTEGER','_emptyBitmap','CmdTextAlign','_skillIDs','Actor-%1-%2','Game_BattlerBase_isStateResist','PopupPosition','visibilityState','Game_Interpreter_updateWaitMode','revealNewWeaknesses','startJump','FlashDuration','onOpacityEnd','addEscapeCommand','Sprite_Enemy_updateCollapse','splice','isJumping','sleep','BattleManager_startAction','origin','cancelButtonText','performSTBExploiter','createAllWindows','ActSeq_Movement_MoveBy','Scene_Battle_createAllWindows','performActionStart','children','SkillItemMiddleLayout','updateActors','damageStyle','isForOpponent','StepDistanceY','ActionAnimation','PostEndTurnJS','ATTACK','surprise','ActSeq_BattleLog_WaitForBattleLog','WaitComplete','ActSeq_Movement_HomeMoveToPoint','isFightCommandEnabled','process_VisuMZ_BattleCore_TraitObject_Notetags','Sprite_Enemy_update','_methods','invokeMagicReflection','endBattle','%1EndBattleJS','isDead','expTotal','AutoNotetag','isBusy','Window_SkillList_maxCols','indexOf','ActSeq_Movement_WaitForScale','getHardDamageCap','State-%1-%2','battleCommands','_targetAngle','removeAnimationFromContainer','updateStatusWindowPosition','attackStatesRate','_currentActor','isAtbCastingState','maxCommands','clearRect','Spriteset_Battle_updateActors','transform','_cancelButton','PostStartActionJS','isForOne','bind','waitCount','_offsetY','removeBuff','_enemySprites','revertTpbCachedActor','WaitForEffect','BattleVictoryJS','callUpdateHelp','battlerShadowScaleY','animationNextDelay','setActiveWeaponSet','Sprite_Actor_setBattler','name','constructor','_damagePopupArray','applyCritical','onBattleStartBattleCore','EscapeSuccessJS','moveToStartPosition','PostApplyAsUserJS','createDamageSprite','Width','isAnyoneMoving','_forceAction','itemLineRect','Window_BattleLog_performEvasion','ActSeq_Skew_Reset','DamageRate','RegExp','criticalHitFlat','%1Damage%2JS','Sprite_Enemy_setBattler','onActorCancel','ANTI_TINT_UI','VisuMZ_2_BattleSystemPTB','ActSeq_Movement_FaceDirection','aliveMembers','loop','AntiTintUiElements','BoostPoints','IconStypeNorm','drawLineText','Game_Battler_onBattleEnd','startDamagePopup','lineHeight','setupBattleback','Filename','WaitCount2','alive\x20battlers\x20not\x20user','adjustPosition_ScaleToFit','attachSpritesToDistortionSprite','terminate','addCombatLogCommand','callNextMethod','angleDuration','TP_Flat','gainBravePoints','clearBattleRefreshRequest','battleCoreResumeLaunchBattle','isCustomBattleScope','MpGaugeOffsetX','_damageContainer','Scene_Options_maxCommands','Sprite_Actor_update','StatusWindowSkinHide','_angleRevertOnFinish','298235enOPRZ','clearDamagePopup','_battleLayoutStyle','onJumpEnd','Window_BattleLog_update','AnimationID','_actionBattlers','slice','Interrupt','ceil','Scene_Battle_onActorOk','JS\x20%1START\x20BATTLE','VisuMZ_3_ActSeqCamera','updateHelp','stypeId','isDisplayEmergedEnemies','ActSeq_Impact_ShockwaveCenterTargets','createHpGaugeSprite','ShowCritical','helpAreaBottom','_action','BattleManager_processVictory','StartTurnShow','loadSystem','displayBattleCoreTransitionErrorMsg','float','waitForEffect','drawItemImageXPStyle','recoverAll','updateWeather','_list','AttachStateOffsetY','missed','isAutoBattle','CriticalHitRate','Window_BattleLog_performActionStart','isAlive','makeData','hardDamageCap','statusTextAutoBattleStyle','floatBattler','_targetOpacity','TpbGaugeOffsetX','updateSpin','drawItem','_spriteset','jump','isDuringNonLoopingMotion','144ylbXlD','battleProjectiles','nameY','HalfActions','displayMpDamage','index','Spriteset_Battle_update','messageSpeed','isIncludedInEnemyWindow','clearActiveWeaponSet','addChild','eraseState','_enemyID','onEncounterBattleCore','setupFont','BattleDefeatJS','ChargeRate','processAnimationRequests','smooth','okTargetSelectionVisibility','Sprite_Battler_setHome','attackAnimationId2','command301','tone','svBattlerName','MP_Rate','onRegeneratePlayStateAnimation','drawItemImage','isFastForward','_battler','DamageStyles','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','makeActionList','drawItemStyleIconText','subject','FollowTurn','commandAutoBattle','createMainSprite','PopupOffsetX','focus','isAutoBattleCommandEnabled','applyAngleChange','SkillsStatesCore','processDefeat','Game_Battler_performActionStart','clearMotion','Game_Enemy_transform','evalDamageFormulaBattleCore','moveBattlerToPoint','addGeneralOptions','canBattlerMove','activate','_lineHeight','gainCurrentActionsETB','_skillWindow','Scene_Battle_startActorSelection','Game_Interpreter_PluginCommand','finishActorInput','ActSeq_DB_DragonbonesMotionAni','Scene_Options','power','updateLink','createActionSequenceProjectile','CommonEventID','swapEnemyIDs','autoBattleUseSkills','command301_PreBattleEvent','CreateActionSequenceTargets','updateTargetPosition','Window_ItemList_maxCols','StateIconOffsetY','mainSpriteScaleX','isPTB','_requestRefresh','CriticalDmgFlat','Linear','startBattle','animationBaseDelay','process_VisuMZ_BattleCore_DamageStyles','compareBattlerSprites','displayHpDamage','ShowFailure','performWeaponAnimation','ActSeq_Mechanics_OtbOrder','ActionSkillMsg1','innerHeight','ActSeq_Mechanics_BreakShieldReset','setBattlerFacePoint','ActSeq_Target_NextTarget','itemWindowRect','onDatabaseLoaded','updateStateIconSprite','createKeyJS','Sprite_Enemy_createStateIconSprite','ATK','4255912ZNMeCz','process_VisuMZ_BattleCore_PluginParams','_freezeMotionData','AllowCollapse','DistanceX','ALL\x20SKILLS','attackSkillId','_displayBattleCoreTransitionErrorMsg','setBattleCameraTargets','Game_Action_evalDamageFormula','getBattlePortraitOffsetX','effect'];_0x2f3e=function(){return _0x5e9f8c;};return _0x2f3e();}Window_AutoBattleCancel[_0x482454(0x61b)]=Object[_0x482454(0x665)](Window_Base[_0x482454(0x61b)]),Window_AutoBattleCancel[_0x482454(0x61b)]['constructor']=Window_AutoBattleCancel,Window_AutoBattleCancel[_0x482454(0x61b)][_0x482454(0x63a)]=function(_0x2e6ed8){const _0x1129d3=_0x482454;Window_Base[_0x1129d3(0x61b)][_0x1129d3(0x63a)][_0x1129d3(0x2b9)](this,_0x2e6ed8),this[_0x1129d3(0x4f1)](this[_0x1129d3(0x3a9)]()),this['refresh']();},Window_AutoBattleCancel[_0x482454(0x61b)][_0x482454(0x3a9)]=function(){const _0x87fc76=_0x482454;return VisuMZ[_0x87fc76(0x16e)]['Settings'][_0x87fc76(0x6c4)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x482454(0x61b)][_0x482454(0x477)]=function(){const _0x190585=_0x482454;this[_0x190585(0x95a)][_0x190585(0x4f7)]();const _0x198177=VisuMZ['BattleCore'][_0x190585(0x4ae)]['AutoBattle'][_0x190585(0x34b)],_0x1398b3=_0x198177[_0x190585(0x355)](this[_0x190585(0x184)](),this[_0x190585(0x78d)]()),_0x2fcb94=this[_0x190585(0x398)](_0x1398b3)[_0x190585(0x913)],_0x3fb088=Math[_0x190585(0x139)]((this['innerWidth']-_0x2fcb94)/0x2);this[_0x190585(0x5bc)](_0x1398b3,_0x3fb088,0x0,_0x2fcb94);},Window_AutoBattleCancel[_0x482454(0x61b)][_0x482454(0x184)]=function(){const _0x3551bc=_0x482454;return Imported[_0x3551bc(0x49a)]?TextManager['getInputButtonString']('ok'):VisuMZ['BattleCore']['Settings'][_0x3551bc(0x6c4)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x482454(0x61b)][_0x482454(0x78d)]=function(){const _0x23edaa=_0x482454;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x23edaa(0x396)](_0x23edaa(0x212)):VisuMZ[_0x23edaa(0x16e)]['Settings'][_0x23edaa(0x6c4)][_0x23edaa(0x32f)];},Window_AutoBattleCancel['prototype'][_0x482454(0x2fa)]=function(){const _0x2cd393=_0x482454;Window_Base[_0x2cd393(0x61b)][_0x2cd393(0x2fa)][_0x2cd393(0x2b9)](this),this[_0x2cd393(0x1cb)](),this[_0x2cd393(0x739)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0x503985=_0x482454;this[_0x503985(0x47d)]=BattleManager[_0x503985(0x163)];},Window_AutoBattleCancel['prototype']['updateCancel']=function(){const _0x3f711d=_0x482454;if(!BattleManager[_0x3f711d(0x163)])return;(Input['isTriggered']('ok')||Input[_0x3f711d(0x500)]('cancel')||TouchInput['isClicked']()||TouchInput[_0x3f711d(0x164)]())&&(SoundManager[_0x3f711d(0x565)](),BattleManager['_autoBattle']=![],Input['clear'](),TouchInput[_0x3f711d(0x4f7)]());};function Window_EnemyName(){const _0x5edfe4=_0x482454;this[_0x5edfe4(0x63a)](...arguments);}Window_EnemyName[_0x482454(0x61b)]=Object[_0x482454(0x665)](Window_StatusBase[_0x482454(0x61b)]),Window_EnemyName['prototype'][_0x482454(0x7cc)]=Window_EnemyName,Window_EnemyName['prototype'][_0x482454(0x63a)]=function(_0x203665){const _0x4825d8=_0x482454;this[_0x4825d8(0x83d)]=_0x203665,this['_text']='';const _0x9fb68f=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x4825d8(0x7eb)]()*0x4);Window_StatusBase[_0x4825d8(0x61b)][_0x4825d8(0x63a)][_0x4825d8(0x2b9)](this,_0x9fb68f),this[_0x4825d8(0x4f1)](0x2),this[_0x4825d8(0x2f2)]=0x0;},Window_EnemyName['prototype']['updatePadding']=function(){const _0x285165=_0x482454;this[_0x285165(0x909)]=0x0;},Window_EnemyName['prototype'][_0x482454(0x614)]=function(){return $gameTroop['members']()[this['_enemyID']];},Window_EnemyName['prototype'][_0x482454(0x2fa)]=function(){const _0x183da3=_0x482454;Window_StatusBase['prototype'][_0x183da3(0x2fa)]['call'](this),this['enemy']()&&this[_0x183da3(0x614)]()[_0x183da3(0x7cb)]()!==this[_0x183da3(0x43e)]&&(this[_0x183da3(0x43e)]=this[_0x183da3(0x614)]()[_0x183da3(0x7cb)](),this['refresh']()),this[_0x183da3(0x588)](),this[_0x183da3(0x6b3)]();},Window_EnemyName[_0x482454(0x61b)]['updateOpacity']=function(){const _0x727e22=_0x482454;if(!this['enemy']()){if(this[_0x727e22(0x2f2)]>0x0)this['contentsOpacity']-=0x10;}else{if(this['enemy']()[_0x727e22(0x7a7)]()){if(this['contentsOpacity']>0x0)this[_0x727e22(0x2f2)]-=0x10;}else{if(SceneManager['_scene'][_0x727e22(0x1c2)]&&SceneManager[_0x727e22(0x938)][_0x727e22(0x1c2)][_0x727e22(0x2e7)]&&SceneManager[_0x727e22(0x938)][_0x727e22(0x1c2)][_0x727e22(0x557)][_0x727e22(0x4df)](this[_0x727e22(0x614)]())){if(this['contentsOpacity']<0xff)this['contentsOpacity']+=0x10;}else this['contentsOpacity']>0x0&&(this[_0x727e22(0x2f2)]-=0x10);}}},Window_EnemyName['prototype'][_0x482454(0x6b3)]=function(){const _0x3624b2=_0x482454;if(!this[_0x3624b2(0x614)]())return;SceneManager[_0x3624b2(0x2fe)]()?this['x']=Graphics[_0x3624b2(0x36e)]-this['enemy']()[_0x3624b2(0x1f6)]()['_baseX']:this['x']=this[_0x3624b2(0x614)]()[_0x3624b2(0x1f6)]()[_0x3624b2(0x12b)];this['x']-=Math['round'](this[_0x3624b2(0x913)]/0x2),this['y']=this['enemy']()[_0x3624b2(0x1f6)]()['_baseY']-Math['round'](this[_0x3624b2(0x7eb)]()*1.5);const _0x15a973=VisuMZ[_0x3624b2(0x16e)]['Settings']['Enemy'];this['x']+=_0x15a973['NameOffsetX']||0x0,this['y']+=_0x15a973[_0x3624b2(0x1b4)]||0x0;},Window_EnemyName[_0x482454(0x61b)][_0x482454(0x8ba)]=function(){const _0x567513=_0x482454;Window_Base['prototype'][_0x567513(0x8ba)]['call'](this),this['contents'][_0x567513(0x8be)]=VisuMZ['BattleCore'][_0x567513(0x4ae)]['Enemy'][_0x567513(0x595)];},Window_EnemyName[_0x482454(0x61b)][_0x482454(0x477)]=function(){const _0x42791f=_0x482454;Window_StatusBase[_0x42791f(0x61b)]['refresh'][_0x42791f(0x2b9)](this),this['contents'][_0x42791f(0x4f7)]();if(!this[_0x42791f(0x614)]())return;this[_0x42791f(0x39c)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x28e112=_0x482454;this[_0x28e112(0x43e)]=this[_0x28e112(0x614)]()[_0x28e112(0x7cb)]();const _0x52ab42=this[_0x28e112(0x398)](this[_0x28e112(0x43e)])['width'],_0x35bb82=Math['round']((this[_0x28e112(0x311)]-_0x52ab42)/0x2);this['drawTextEx'](this[_0x28e112(0x43e)],_0x35bb82,0x0,_0x52ab42+0x8);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x33d)]=function(){const _0x3d5942=_0x482454;return VisuMZ[_0x3d5942(0x16e)][_0x3d5942(0x4ae)][_0x3d5942(0x533)][_0x3d5942(0x96a)];},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x838)]=function(){const _0x3999c2=_0x482454;return VisuMZ[_0x3999c2(0x16e)][_0x3999c2(0x4ae)][_0x3999c2(0x533)][_0x3999c2(0x3cf)];},Window_BattleLog[_0x482454(0x61b)]['backColor']=function(){const _0x328c8d=_0x482454;return VisuMZ[_0x328c8d(0x16e)]['Settings'][_0x328c8d(0x533)][_0x328c8d(0x44b)];},Window_BattleLog['prototype'][_0x482454(0x84d)]=function(){return![];},Window_BattleLog[_0x482454(0x61b)]['actionEffect']=function(_0x5e33b4,_0x11b1d4){const _0x5ed70f=_0x482454;this[_0x5ed70f(0x30e)](_0x5ed70f(0x30c)),BattleManager[_0x5ed70f(0x361)](_0x5e33b4,_0x11b1d4),this[_0x5ed70f(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)]['actionSplicePoint']=function(){const _0x294b8a=_0x482454;this[_0x294b8a(0x7f4)]();},Window_BattleLog['prototype'][_0x482454(0x32d)]=function(_0xcd4e2e){const _0x57a935=_0x482454,_0x327bd1=Array[_0x57a935(0x61b)][_0x57a935(0x808)][_0x57a935(0x2b9)](arguments,0x1),_0x1f829={'name':_0xcd4e2e,'params':_0x327bd1},_0x13da54=this[_0x57a935(0x7a3)][_0x57a935(0x597)](_0x9ccc1c=>_0x9ccc1c[_0x57a935(0x7cb)])['indexOf'](_0x57a935(0x30c));_0x13da54>=0x0?this[_0x57a935(0x7a3)][_0x57a935(0x788)](_0x13da54,0x0,_0x1f829):this['_methods'][_0x57a935(0x32d)](_0x1f829);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x30e)]=function(_0x4cf077){const _0x5a18a5=_0x482454,_0x43cfa2=Array[_0x5a18a5(0x61b)][_0x5a18a5(0x808)][_0x5a18a5(0x2b9)](arguments,0x1);this[_0x5a18a5(0x7a3)][_0x5a18a5(0x30e)]({'name':_0x4cf077,'params':_0x43cfa2});},Window_BattleLog[_0x482454(0x61b)]['logActionList']=function(){const _0x1a1089=_0x482454;if(!$gameTemp[_0x1a1089(0x145)]())return;console[_0x1a1089(0x38b)](this[_0x1a1089(0x7a3)]['map'](_0x3ce08c=>_0x3ce08c[_0x1a1089(0x7cb)])['join']('\x0a'));},VisuMZ['BattleCore'][_0x482454(0x5d5)]=Window_BattleLog['prototype'][_0x482454(0x477)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x477)]=function(){const _0x5f33cc=_0x482454;this[_0x5f33cc(0x87a)]=!![];},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_update']=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x2fa)],Window_BattleLog[_0x482454(0x61b)]['update']=function(){const _0x4c722a=_0x482454;VisuMZ[_0x4c722a(0x16e)][_0x4c722a(0x805)][_0x4c722a(0x2b9)](this);if(this['_requestRefresh'])this[_0x4c722a(0x4b5)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x4b5)]=function(){const _0x8c818e=_0x482454;this['_requestRefresh']=![],VisuMZ[_0x8c818e(0x16e)][_0x8c818e(0x5d5)][_0x8c818e(0x2b9)](this);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x7e8)]=function(_0x223267){const _0x28d55f=_0x482454;let _0x2f3839=VisuMZ['BattleCore'][_0x28d55f(0x4ae)][_0x28d55f(0x533)][_0x28d55f(0x22f)][_0x28d55f(0x61c)]()[_0x28d55f(0x910)](),_0x3fb272=this[_0x28d55f(0x622)][_0x223267];if(_0x3fb272[_0x28d55f(0x445)](/<LEFT>/i))_0x2f3839=_0x28d55f(0x493);else{if(_0x3fb272[_0x28d55f(0x445)](/<CENTER>/i))_0x2f3839='center';else _0x3fb272['match'](/<RIGHT>/i)&&(_0x2f3839=_0x28d55f(0x5e2));}_0x3fb272=_0x3fb272['replace'](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x3fb272=_0x3fb272[_0x28d55f(0x563)](/\\I\[0\]/gi,'');const _0x5a1b10=this[_0x28d55f(0x414)](_0x223267);this[_0x28d55f(0x95a)][_0x28d55f(0x7b8)](_0x5a1b10['x'],_0x5a1b10['y'],_0x5a1b10[_0x28d55f(0x913)],_0x5a1b10[_0x28d55f(0x4c6)]);const _0x43943e=this[_0x28d55f(0x398)](_0x3fb272)[_0x28d55f(0x913)];let _0x3ace70=_0x5a1b10['x'];if(_0x2f3839===_0x28d55f(0x59d))_0x3ace70+=(_0x5a1b10[_0x28d55f(0x913)]-_0x43943e)/0x2;else _0x2f3839===_0x28d55f(0x5e2)&&(_0x3ace70+=_0x5a1b10['width']-_0x43943e);this[_0x28d55f(0x5bc)](_0x3fb272,_0x3ace70,_0x5a1b10['y'],_0x43943e+0x8);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x908)]=function(_0x20667d){const _0x1b19fa=_0x482454;this[_0x1b19fa(0x622)][_0x1b19fa(0x32d)](_0x20667d),this['refresh'](),this[_0x1b19fa(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x6ef)]=function(){const _0x2ae288=_0x482454;let _0x303c06=![];switch(this[_0x2ae288(0x6b2)]){case _0x2ae288(0x89b):_0x303c06=this[_0x2ae288(0x82e)][_0x2ae288(0x22e)]();break;case _0x2ae288(0x8e4):_0x303c06=this[_0x2ae288(0x82e)][_0x2ae288(0x7d5)]();break;case _0x2ae288(0x3c9):_0x303c06=this[_0x2ae288(0x82e)][_0x2ae288(0x4b1)]();break;case _0x2ae288(0x81a):_0x303c06=this['_spriteset'][_0x2ae288(0x96b)]();break;case _0x2ae288(0x82f):_0x303c06=this[_0x2ae288(0x82e)][_0x2ae288(0x4e6)]();break;case _0x2ae288(0x1f2):_0x303c06=this['_spriteset']['isAnyoneChangingOpacity']();break;}return!_0x303c06&&(this['_waitMode']=''),_0x303c06;},Window_BattleLog['prototype'][_0x482454(0x1e4)]=function(){const _0x50d21a=_0x482454;this['setWaitMode'](_0x50d21a(0x3c9));},Window_BattleLog[_0x482454(0x61b)]['waitForFloat']=function(){const _0x1ded70=_0x482454;this[_0x1ded70(0x953)](_0x1ded70(0x81a));},Window_BattleLog[_0x482454(0x61b)]['waitForJump']=function(){const _0x331f23=_0x482454;this[_0x331f23(0x953)](_0x331f23(0x82f));},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x6ab)]=function(){this['setWaitMode']('opacity');},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x518)]=function(){const _0x3f4ebc=_0x482454,_0x4f487a=VisuMZ[_0x3f4ebc(0x16e)][_0x3f4ebc(0x4ae)]['BattleLog'];if(!_0x4f487a[_0x3f4ebc(0x817)])return;this[_0x3f4ebc(0x32d)](_0x3f4ebc(0x908),_0x4f487a[_0x3f4ebc(0x1fd)][_0x3f4ebc(0x355)]($gameTroop[_0x3f4ebc(0x18e)]())),this[_0x3f4ebc(0x32d)]('waitCount',_0x4f487a[_0x3f4ebc(0x3fd)]),this['push'](_0x3f4ebc(0x4f7));},Window_BattleLog[_0x482454(0x61b)]['startAction']=function(_0x1460a7,_0x16cefb,_0x735142){const _0x5b00f6=_0x482454;this[_0x5b00f6(0x94c)](_0x16cefb)?BattleManager[_0x5b00f6(0x2d5)]():this[_0x5b00f6(0x40f)](_0x1460a7,_0x16cefb,_0x735142);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x94c)]=function(_0x2cb4d7){const _0x41d0b3=_0x482454;if(!SceneManager['isSceneBattle']())return![];if(!_0x2cb4d7)return![];if(!_0x2cb4d7[_0x41d0b3(0x94e)]())return![];if(_0x2cb4d7['item']()[_0x41d0b3(0x305)][_0x41d0b3(0x445)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager['checkAutoCustomActionSequenceNotetagEffect'](_0x2cb4d7['item']()))return!![];return![];},Window_BattleLog[_0x482454(0x61b)]['usePremadeActionSequence']=function(_0x47239c,_0x4249bb,_0x3da791){const _0x5b8ce3=_0x482454,_0x952f28=_0x4249bb[_0x5b8ce3(0x94e)]();this[_0x5b8ce3(0x45d)](_0x47239c,_0x4249bb,_0x3da791),this[_0x5b8ce3(0x952)](_0x47239c,_0x4249bb,_0x3da791),this[_0x5b8ce3(0x5dd)](_0x47239c,_0x4249bb,_0x3da791);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x34f)]=function(_0x5c51c8,_0x591037){const _0x4b1862=_0x482454,_0x26c558=VisuMZ[_0x4b1862(0x16e)][_0x4b1862(0x4ae)][_0x4b1862(0x533)];_0x26c558[_0x4b1862(0xf4)]&&this[_0x4b1862(0x32d)]('addText',_0x4b1862(0x68b)[_0x4b1862(0x355)](DataManager['battleDisplayText'](_0x591037)));if(DataManager[_0x4b1862(0x6cc)](_0x591037)){if(_0x26c558[_0x4b1862(0x885)])this['displayItemMessage'](_0x591037[_0x4b1862(0x3d3)],_0x5c51c8,_0x591037);if(_0x26c558[_0x4b1862(0x592)])this[_0x4b1862(0x23a)](_0x591037['message2'],_0x5c51c8,_0x591037);}else{if(_0x26c558[_0x4b1862(0x392)])this['displayItemMessage'](TextManager[_0x4b1862(0x60d)],_0x5c51c8,_0x591037);}},Window_BattleLog['prototype'][_0x482454(0x45d)]=function(_0x32443c,_0x3163ba,_0x597c69){const _0xac9d60=_0x482454,_0x1a286b=_0x3163ba[_0xac9d60(0x94e)]();this[_0xac9d60(0x34f)](_0x32443c,_0x1a286b),this[_0xac9d60(0x32d)](_0xac9d60(0x315),_0x32443c,_0x597c69,!![]),this[_0xac9d60(0x32d)](_0xac9d60(0x792),_0x32443c,_0x3163ba),this['push']('waitForMovement'),this[_0xac9d60(0x32d)](_0xac9d60(0x46a),_0x32443c,_0x3163ba),this[_0xac9d60(0x32d)](_0xac9d60(0x1e4));},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x952)]=function(_0xe1cf8e,_0x50b7ee,_0x32b726){const _0x802d60=_0x482454;if(this['isMeleeSingleTargetAction'](_0x50b7ee))this[_0x802d60(0x5b6)](_0xe1cf8e,_0x50b7ee,_0x32b726);else{if(this[_0x802d60(0x534)](_0x50b7ee))this['autoMeleeMultiTargetActionSet'](_0xe1cf8e,_0x50b7ee,_0x32b726);else _0x50b7ee['isForRandom']()?this[_0x802d60(0x375)](_0xe1cf8e,_0x50b7ee,_0x32b726):this['wholeActionSet'](_0xe1cf8e,_0x50b7ee,_0x32b726);}},Window_BattleLog[_0x482454(0x61b)][_0x482454(0xfb)]=function(_0xa23df9){const _0x359529=_0x482454;if(!_0xa23df9[_0x359529(0x3f8)]())return![];if(!_0xa23df9[_0x359529(0x7bd)]())return![];if(!_0xa23df9['isForOpponent']())return![];return VisuMZ['BattleCore'][_0x359529(0x4ae)][_0x359529(0x1ee)][_0x359529(0x2f0)];},Window_BattleLog['prototype'][_0x482454(0x5b6)]=function(_0x545b9a,_0x29a48e,_0x20f397){const _0x45f34c=_0x482454,_0x36daf8=_0x545b9a[_0x45f34c(0x156)]()[_0x45f34c(0x415)]<0x2,_0x5389a1=0x14,_0x2eccb8=0x30;_0x36daf8&&(this[_0x45f34c(0x32d)](_0x45f34c(0x3fb),[_0x545b9a],_0x2eccb8,_0x5389a1),this[_0x45f34c(0x32d)]('performMoveToTargets',_0x545b9a,_0x20f397,_0x45f34c(0x6c1),_0x5389a1,!![],_0x45f34c(0x87c),!![]),this[_0x45f34c(0x32d)](_0x45f34c(0x6ca),[_0x545b9a],_0x45f34c(0x681)),this['push'](_0x45f34c(0x8d2)));let _0x4a74fe=_0x29a48e[_0x45f34c(0x299)]()?this[_0x45f34c(0x141)](_0x545b9a):0x1;for(let _0x3ddb91=0x0;_0x3ddb91<_0x4a74fe;_0x3ddb91++){_0x29a48e[_0x45f34c(0x299)]()&&_0x545b9a[_0x45f34c(0x761)]()&&this[_0x45f34c(0x32d)](_0x45f34c(0x7c9),_0x545b9a,_0x3ddb91),_0x29a48e['item']()[_0x45f34c(0x931)]<0x0?this['targetActionSet'](_0x545b9a,_0x29a48e,_0x20f397):this[_0x45f34c(0x2ce)](_0x545b9a,_0x29a48e,_0x20f397);}_0x29a48e[_0x45f34c(0x299)]()&&_0x545b9a[_0x45f34c(0x761)]()&&this[_0x45f34c(0x32d)](_0x45f34c(0x83a),_0x545b9a);this[_0x45f34c(0x32d)]('applyImmortal',_0x545b9a,_0x20f397,![]);if(_0x36daf8){const _0x26fdf5=_0x545b9a[_0x45f34c(0x1f6)]();this['push']('performJump',[_0x545b9a],_0x2eccb8,_0x5389a1),this[_0x45f34c(0x32d)](_0x45f34c(0x2e3),_0x545b9a,_0x26fdf5[_0x45f34c(0x8ae)],_0x26fdf5[_0x45f34c(0x721)],_0x5389a1,![],_0x45f34c(0x87c)),this[_0x45f34c(0x32d)](_0x45f34c(0x6ca),[_0x545b9a],_0x45f34c(0x52a)),this['push'](_0x45f34c(0x8d2)),this[_0x45f34c(0x32d)]('requestMotion',[_0x545b9a],_0x45f34c(0x681));}},Window_BattleLog[_0x482454(0x61b)]['isMeleeMultiTargetAction']=function(_0xf3c635){const _0x3c1f48=_0x482454;if(!_0xf3c635[_0x3c1f48(0x3f8)]())return![];if(!_0xf3c635[_0x3c1f48(0x750)]())return![];if(!_0xf3c635[_0x3c1f48(0x797)]())return![];return VisuMZ[_0x3c1f48(0x16e)]['Settings'][_0x3c1f48(0x1ee)][_0x3c1f48(0x924)];},Window_BattleLog[_0x482454(0x61b)]['autoMeleeMultiTargetActionSet']=function(_0x295f67,_0x25b1b1,_0x3ae298){const _0x2b2404=_0x482454,_0x151794=_0x295f67[_0x2b2404(0x156)]()[_0x2b2404(0x415)]<0x2,_0x13eb50=0x14,_0x321c8a=0x30;_0x151794&&(this[_0x2b2404(0x32d)](_0x2b2404(0x3fb),[_0x295f67],_0x321c8a,_0x13eb50),this[_0x2b2404(0x32d)](_0x2b2404(0x8d3),_0x295f67,_0x3ae298,_0x2b2404(0x52b),_0x13eb50,!![],_0x2b2404(0x87c),!![]),this['push']('requestMotion',[_0x295f67],_0x2b2404(0x681)),this[_0x2b2404(0x32d)](_0x2b2404(0x8d2)));let _0x2dcd65=_0x25b1b1[_0x2b2404(0x299)]()?this[_0x2b2404(0x141)](_0x295f67):0x1;for(let _0x44b138=0x0;_0x44b138<_0x2dcd65;_0x44b138++){_0x25b1b1[_0x2b2404(0x299)]()&&_0x295f67[_0x2b2404(0x761)]()&&this[_0x2b2404(0x32d)](_0x2b2404(0x7c9),_0x295f67,_0x44b138),this['wholeActionSet'](_0x295f67,_0x25b1b1,_0x3ae298);}_0x25b1b1[_0x2b2404(0x299)]()&&_0x295f67[_0x2b2404(0x761)]()&&this[_0x2b2404(0x32d)]('clearActiveWeaponSet',_0x295f67);this[_0x2b2404(0x32d)](_0x2b2404(0x315),_0x295f67,_0x3ae298,![]);if(_0x151794){const _0x3552fe=_0x295f67[_0x2b2404(0x1f6)]();this[_0x2b2404(0x32d)]('performJump',[_0x295f67],_0x321c8a,_0x13eb50),this[_0x2b2404(0x32d)](_0x2b2404(0x2e3),_0x295f67,_0x3552fe[_0x2b2404(0x8ae)],_0x3552fe['_homeY'],_0x13eb50,![],_0x2b2404(0x87c)),this[_0x2b2404(0x32d)](_0x2b2404(0x6ca),[_0x295f67],_0x2b2404(0x52a)),this[_0x2b2404(0x32d)](_0x2b2404(0x8d2)),this[_0x2b2404(0x32d)](_0x2b2404(0x6ca),[_0x295f67],_0x2b2404(0x681));}},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x375)]=function(_0x4a443f,_0x19e525,_0x30ee79){const _0x32fa82=_0x482454,_0x10879b=_0x19e525[_0x32fa82(0x94e)]();for(const _0x2cb93e of _0x30ee79){if(!_0x2cb93e)continue;this[_0x32fa82(0x32d)](_0x32fa82(0x688),_0x4a443f,_0x19e525),this[_0x32fa82(0x32d)]('waitCount',Sprite_Battler['_motionSpeed']),this[_0x32fa82(0x32d)](_0x32fa82(0x2a5),_0x4a443f,[_0x2cb93e],_0x10879b[_0x32fa82(0x931)]),this[_0x32fa82(0x32d)](_0x32fa82(0x7bf),0x18),this['push'](_0x32fa82(0x581),_0x4a443f,_0x2cb93e);}},Window_BattleLog[_0x482454(0x61b)]['wholeActionSet']=function(_0x42863f,_0x249e3b,_0x22e8ef){const _0x36789f=_0x482454,_0x4419a9=_0x249e3b[_0x36789f(0x94e)]();this[_0x36789f(0x32d)](_0x36789f(0x688),_0x42863f,_0x249e3b),this['push'](_0x36789f(0x7bf),Sprite_Battler[_0x36789f(0x46f)]),this[_0x36789f(0x32d)]('showAnimation',_0x42863f,_0x22e8ef[_0x36789f(0x941)](),_0x4419a9[_0x36789f(0x931)]),this[_0x36789f(0x32d)](_0x36789f(0x1e4));for(const _0x1aaeb2 of _0x22e8ef){if(!_0x1aaeb2)continue;this['push'](_0x36789f(0x581),_0x42863f,_0x1aaeb2);}},Window_BattleLog['prototype']['finishActionSet']=function(_0x59d234,_0x2ef9e5,_0x19a865){const _0x27602c=_0x482454,_0x346b30=_0x2ef9e5[_0x27602c(0x94e)]();this[_0x27602c(0x32d)](_0x27602c(0x315),_0x59d234,_0x19a865,![]),this[_0x27602c(0x32d)](_0x27602c(0x3f0)),this[_0x27602c(0x32d)](_0x27602c(0x81b)),this['push'](_0x27602c(0x4f7)),this['push']('performActionEnd',_0x59d234),this[_0x27602c(0x32d)](_0x27602c(0x8d2));},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x8bb)]=function(_0x45f368){},VisuMZ[_0x482454(0x16e)][_0x482454(0x613)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x544)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x544)]=function(_0x21522f){const _0x9b1e01=_0x482454;if(!VisuMZ['BattleCore'][_0x9b1e01(0x4ae)][_0x9b1e01(0x533)][_0x9b1e01(0x73d)])return;VisuMZ['BattleCore'][_0x9b1e01(0x613)][_0x9b1e01(0x2b9)](this,_0x21522f);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x2b7)]=function(_0x88fcc){const _0x16828b=_0x482454;this['push'](_0x16828b(0x113),_0x88fcc);VisuMZ[_0x16828b(0x16e)][_0x16828b(0x4ae)][_0x16828b(0x1ee)][_0x16828b(0x44e)]&&this[_0x16828b(0x32d)](_0x16828b(0x2a5),_0x88fcc,[BattleManager[_0x16828b(0x57d)]],-0x1);if(!VisuMZ[_0x16828b(0x16e)][_0x16828b(0x4ae)][_0x16828b(0x533)][_0x16828b(0x174)])return;this[_0x16828b(0x32d)](_0x16828b(0x908),TextManager[_0x16828b(0x288)][_0x16828b(0x355)](_0x88fcc[_0x16828b(0x7cb)]()));},Window_BattleLog['prototype'][_0x482454(0x4ee)]=function(_0x89f547){const _0x423b46=_0x482454;this['push']('performReflection',_0x89f547);if(!VisuMZ[_0x423b46(0x16e)][_0x423b46(0x4ae)]['BattleLog']['ShowReflect'])return;this['push']('addText',TextManager[_0x423b46(0x912)][_0x423b46(0x355)](_0x89f547['name']()));},Window_BattleLog['prototype'][_0x482454(0x3f1)]=function(_0xb527b2,_0x229ce5){const _0x7a47dc=_0x482454;if(VisuMZ[_0x7a47dc(0x16e)][_0x7a47dc(0x4ae)][_0x7a47dc(0x1ee)][_0x7a47dc(0x5f4)]){const _0x1015bb=_0x229ce5['item']();this[_0x7a47dc(0x32d)]('showAnimation',_0xb527b2,[_0xb527b2],_0x1015bb[_0x7a47dc(0x931)]);}},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x196)]=function(_0x7292f9,_0x28430b){const _0x576a95=_0x482454;this[_0x576a95(0x32d)](_0x576a95(0x674),_0x7292f9,_0x28430b);if(!VisuMZ[_0x576a95(0x16e)]['Settings'][_0x576a95(0x533)]['ShowSubstitute'])return;const _0x10d19c=_0x7292f9[_0x576a95(0x7cb)](),_0x39588c=TextManager[_0x576a95(0x568)]['format'](_0x10d19c,_0x28430b[_0x576a95(0x7cb)]());this[_0x576a95(0x32d)](_0x576a95(0x908),_0x39588c);},VisuMZ[_0x482454(0x16e)][_0x482454(0x584)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x698)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x698)]=function(_0x4575b2,_0x33fc2f){const _0x3954e7=_0x482454;VisuMZ[_0x3954e7(0x16e)]['Window_BattleLog_displayActionResults'][_0x3954e7(0x2b9)](this,_0x4575b2,_0x33fc2f),this[_0x3954e7(0x32d)](_0x3954e7(0x4f7));},VisuMZ['BattleCore'][_0x482454(0x45c)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x3af)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x3af)]=function(_0x51658d){const _0x3021b4=_0x482454;if(!VisuMZ['BattleCore']['Settings'][_0x3021b4(0x533)][_0x3021b4(0x882)])return;VisuMZ[_0x3021b4(0x16e)][_0x3021b4(0x45c)][_0x3021b4(0x2b9)](this,_0x51658d);},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x482454(0x61b)]['displayCritical'],Window_BattleLog[_0x482454(0x61b)]['displayCritical']=function(_0x557d30){const _0x946d73=_0x482454;if(!VisuMZ[_0x946d73(0x16e)]['Settings'][_0x946d73(0x533)][_0x946d73(0x813)])return;VisuMZ[_0x946d73(0x16e)]['Window_BattleLog_displayCritical'][_0x946d73(0x2b9)](this,_0x557d30);},VisuMZ[_0x482454(0x16e)][_0x482454(0x134)]=Window_BattleLog['prototype']['displayMiss'],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x69f)]=function(_0x3868c6){const _0x21a8b1=_0x482454;!VisuMZ[_0x21a8b1(0x16e)][_0x21a8b1(0x4ae)][_0x21a8b1(0x533)]['ShowMissEvasion']?this['push'](_0x21a8b1(0x553),_0x3868c6):VisuMZ[_0x21a8b1(0x16e)][_0x21a8b1(0x134)][_0x21a8b1(0x2b9)](this,_0x3868c6);},VisuMZ['BattleCore'][_0x482454(0x230)]=Window_BattleLog[_0x482454(0x61b)]['displayEvasion'],Window_BattleLog['prototype'][_0x482454(0x4f8)]=function(_0x4b21fc){const _0x18fe27=_0x482454;!VisuMZ['BattleCore'][_0x18fe27(0x4ae)][_0x18fe27(0x533)]['ShowMissEvasion']?_0x4b21fc[_0x18fe27(0x125)]()[_0x18fe27(0x19c)]?this[_0x18fe27(0x32d)](_0x18fe27(0x59a),_0x4b21fc):this['push'](_0x18fe27(0x1c3),_0x4b21fc):VisuMZ[_0x18fe27(0x16e)][_0x18fe27(0x230)][_0x18fe27(0x2b9)](this,_0x4b21fc);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x881)]=function(_0x559e1b){const _0xb4560e=_0x482454;_0x559e1b[_0xb4560e(0x125)]()['hpAffected']&&(_0x559e1b[_0xb4560e(0x125)]()[_0xb4560e(0x327)]>0x0&&!_0x559e1b[_0xb4560e(0x125)]()['drain']&&this[_0xb4560e(0x32d)](_0xb4560e(0x3d8),_0x559e1b),_0x559e1b[_0xb4560e(0x125)]()['hpDamage']<0x0&&this[_0xb4560e(0x32d)](_0xb4560e(0x153),_0x559e1b),VisuMZ['BattleCore'][_0xb4560e(0x4ae)][_0xb4560e(0x533)][_0xb4560e(0x292)]&&this[_0xb4560e(0x32d)](_0xb4560e(0x908),this[_0xb4560e(0x5f8)](_0x559e1b)));},VisuMZ[_0x482454(0x16e)][_0x482454(0x571)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x835)],Window_BattleLog[_0x482454(0x61b)]['displayMpDamage']=function(_0x562e2c){const _0x59e55f=_0x482454;if(!VisuMZ[_0x59e55f(0x16e)][_0x59e55f(0x4ae)][_0x59e55f(0x533)]['ShowMpDmg'])return;VisuMZ['BattleCore'][_0x59e55f(0x571)][_0x59e55f(0x2b9)](this,_0x562e2c);},VisuMZ[_0x482454(0x16e)][_0x482454(0x17e)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x48f)],Window_BattleLog['prototype']['displayTpDamage']=function(_0x2a8174){const _0x413c6c=_0x482454;if(!VisuMZ[_0x413c6c(0x16e)][_0x413c6c(0x4ae)]['BattleLog'][_0x413c6c(0x16f)])return;VisuMZ[_0x413c6c(0x16e)]['Window_BattleLog_displayTpDamage'][_0x413c6c(0x2b9)](this,_0x2a8174);},Window_BattleLog['prototype'][_0x482454(0x3bd)]=function(_0x11581c){const _0x46894e=_0x482454;_0x11581c['result']()[_0x46894e(0x132)]()&&(this[_0x46894e(0x32d)](_0x46894e(0x944)),this[_0x46894e(0x257)](_0x11581c),this[_0x46894e(0xff)](_0x11581c),this[_0x46894e(0x32d)](_0x46894e(0x3f0)));},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x3ca)]=function(_0x5555ac){const _0x9cac78=_0x482454,_0x14c988=_0x5555ac[_0x9cac78(0x125)](),_0x13f0a8=_0x14c988[_0x9cac78(0x8e0)]();for(const _0x23b5db of _0x13f0a8){const _0x2c2648=_0x5555ac[_0x9cac78(0x761)]()?_0x23b5db[_0x9cac78(0x3d3)]:_0x23b5db['message2'];_0x2c2648&&VisuMZ[_0x9cac78(0x16e)][_0x9cac78(0x4ae)][_0x9cac78(0x533)][_0x9cac78(0x602)]&&(this[_0x9cac78(0x32d)](_0x9cac78(0x1bd)),this['push'](_0x9cac78(0x679)),this[_0x9cac78(0x32d)]('pushBaseLine'),this[_0x9cac78(0x32d)](_0x9cac78(0x908),_0x2c2648['format'](_0x5555ac[_0x9cac78(0x7cb)]())),this[_0x9cac78(0x32d)]('wait')),_0x23b5db['id']===_0x5555ac[_0x9cac78(0x25a)]()&&this[_0x9cac78(0x32d)](_0x9cac78(0x634),_0x5555ac);}},Window_BattleLog['prototype'][_0x482454(0x1bd)]=function(){},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x8c2)]=function(_0x168a38){const _0x16ae84=_0x482454;if(!VisuMZ[_0x16ae84(0x16e)][_0x16ae84(0x4ae)][_0x16ae84(0x533)]['ShowRemovedState'])return;const _0x1854c5=_0x168a38[_0x16ae84(0x125)](),_0x3d6e8a=_0x1854c5[_0x16ae84(0x3ae)]();for(const _0x1de276 of _0x3d6e8a){_0x1de276[_0x16ae84(0x537)]&&(this[_0x16ae84(0x32d)](_0x16ae84(0x8d4)),this['push'](_0x16ae84(0x679)),this[_0x16ae84(0x32d)]('pushBaseLine'),this[_0x16ae84(0x32d)](_0x16ae84(0x908),_0x1de276[_0x16ae84(0x537)]['format'](_0x168a38[_0x16ae84(0x7cb)]())),this[_0x16ae84(0x32d)](_0x16ae84(0x223)));}},Window_BattleLog['prototype']['fnordRemovedStates']=function(){},Window_BattleLog[_0x482454(0x61b)][_0x482454(0xff)]=function(_0xb06963){const _0x1bbff0=_0x482454,_0x2d74c8=VisuMZ[_0x1bbff0(0x16e)][_0x1bbff0(0x4ae)][_0x1bbff0(0x533)],_0xf6e603=_0xb06963[_0x1bbff0(0x125)]();if(_0x2d74c8[_0x1bbff0(0x229)])this[_0x1bbff0(0x439)](_0xb06963,_0xf6e603[_0x1bbff0(0x2dd)],TextManager[_0x1bbff0(0x5d3)]);if(_0x2d74c8['ShowAddedDebuff'])this['displayBuffs'](_0xb06963,_0xf6e603[_0x1bbff0(0x916)],TextManager['debuffAdd']);if(_0x2d74c8['ShowRemovedBuff'])this['displayBuffs'](_0xb06963,_0xf6e603['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x439)]=function(_0x3cb523,_0x59dff8,_0x43865e){const _0x32e956=_0x482454;for(const _0x3ae08d of _0x59dff8){const _0x4fae3c=_0x43865e[_0x32e956(0x355)](_0x3cb523[_0x32e956(0x7cb)](),TextManager[_0x32e956(0x224)](_0x3ae08d));this[_0x32e956(0x32d)](_0x32e956(0x679)),this['push']('pushBaseLine'),this[_0x32e956(0x32d)](_0x32e956(0x908),_0x4fae3c),this[_0x32e956(0x32d)](_0x32e956(0x223));}},VisuMZ[_0x482454(0x16e)][_0x482454(0x49f)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x4f7)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x4f7)]=function(){const _0x41c5d8=_0x482454;VisuMZ[_0x41c5d8(0x16e)]['Window_BattleLog_clear'][_0x41c5d8(0x2b9)](this),this['callNextMethod']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x727)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x944)],Window_BattleLog[_0x482454(0x61b)]['pushBaseLine']=function(){const _0x164e04=_0x482454;VisuMZ[_0x164e04(0x16e)][_0x164e04(0x727)][_0x164e04(0x2b9)](this),this[_0x164e04(0x7f4)]();},VisuMZ['BattleCore'][_0x482454(0x8b9)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x679)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x679)]=function(){const _0x9256c0=_0x482454;VisuMZ[_0x9256c0(0x16e)][_0x9256c0(0x8b9)][_0x9256c0(0x2b9)](this),this[_0x9256c0(0x4b5)](),this[_0x9256c0(0x7f4)]();},VisuMZ['BattleCore'][_0x482454(0x33a)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x70f)],Window_BattleLog[_0x482454(0x61b)]['popupDamage']=function(_0x27db76){const _0x12fe7c=_0x482454;VisuMZ[_0x12fe7c(0x16e)][_0x12fe7c(0x33a)][_0x12fe7c(0x2b9)](this,_0x27db76),this[_0x12fe7c(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x3f0)]=function(){const _0x56e9b8=_0x482454;let _0x23fefe=0x0;this['_baseLineStack'][_0x56e9b8(0x403)]>0x0&&(_0x23fefe=this[_0x56e9b8(0x56d)][this['_baseLineStack'][_0x56e9b8(0x403)]-0x1]),this['_lines'][_0x56e9b8(0x403)]>_0x23fefe?this[_0x56e9b8(0x223)]():this['callNextMethod']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x824)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x792)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x792)]=function(_0x47fa9f,_0x34c4ce){const _0x33f648=_0x482454;VisuMZ[_0x33f648(0x16e)][_0x33f648(0x824)][_0x33f648(0x2b9)](this,_0x47fa9f,_0x34c4ce),this[_0x33f648(0x7f4)]();},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_performAction']=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x688)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x688)]=function(_0x2bcce6,_0x2a5ede){const _0x568b00=_0x482454;VisuMZ['BattleCore']['Window_BattleLog_performAction'][_0x568b00(0x2b9)](this,_0x2bcce6,_0x2a5ede),this[_0x568b00(0x7f4)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x239)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x561)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x561)]=function(_0x9fdda6){const _0xff1fa7=_0x482454;VisuMZ[_0xff1fa7(0x16e)]['Window_BattleLog_performActionEnd']['call'](this,_0x9fdda6);for(const _0x1311dc of BattleManager[_0xff1fa7(0x1ed)]()){if(!_0x1311dc)continue;if(_0x1311dc[_0xff1fa7(0x7a7)]())continue;_0x1311dc['performActionEndMembers']();}this[_0xff1fa7(0x7f4)]();},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x3d8)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x3d8)]=function(_0x170e21){const _0x3c62a0=_0x482454;VisuMZ['BattleCore']['Window_BattleLog_performDamage'][_0x3c62a0(0x2b9)](this,_0x170e21),this['callNextMethod']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x24d)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x553)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x553)]=function(_0xd30b34){const _0x2ed3a9=_0x482454;VisuMZ[_0x2ed3a9(0x16e)][_0x2ed3a9(0x24d)]['call'](this,_0xd30b34),this[_0x2ed3a9(0x7f4)]();},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_performRecovery']=Window_BattleLog['prototype'][_0x482454(0x153)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x153)]=function(_0x9baad6){const _0x3437c8=_0x482454;VisuMZ[_0x3437c8(0x16e)][_0x3437c8(0x589)][_0x3437c8(0x2b9)](this,_0x9baad6),this[_0x3437c8(0x7f4)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x7d8)]=Window_BattleLog[_0x482454(0x61b)]['performEvasion'],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x59a)]=function(_0x262d16){const _0x492326=_0x482454;VisuMZ[_0x492326(0x16e)][_0x492326(0x7d8)][_0x492326(0x2b9)](this,_0x262d16),this[_0x492326(0x7f4)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x67a)]=Window_BattleLog['prototype'][_0x482454(0x1c3)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x1c3)]=function(_0x294fab){const _0x4c0a0b=_0x482454;VisuMZ[_0x4c0a0b(0x16e)]['Window_BattleLog_performMagicEvasion'][_0x4c0a0b(0x2b9)](this,_0x294fab),this[_0x4c0a0b(0x7f4)]();},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x113)],Window_BattleLog[_0x482454(0x61b)][_0x482454(0x113)]=function(_0x1641ac){const _0x57ddbb=_0x482454;VisuMZ['BattleCore'][_0x57ddbb(0x5c1)]['call'](this,_0x1641ac),this[_0x57ddbb(0x7f4)]();},VisuMZ[_0x482454(0x16e)][_0x482454(0x8cc)]=Window_BattleLog['prototype'][_0x482454(0x37c)],Window_BattleLog['prototype'][_0x482454(0x37c)]=function(_0x2f2fc4){const _0x530bbc=_0x482454;VisuMZ[_0x530bbc(0x16e)][_0x530bbc(0x8cc)][_0x530bbc(0x2b9)](this,_0x2f2fc4),this[_0x530bbc(0x7f4)]();},VisuMZ[_0x482454(0x16e)]['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype']['performSubstitute'],Window_BattleLog[_0x482454(0x61b)]['performSubstitute']=function(_0x2959d3,_0x2357df){const _0xdb8588=_0x482454;VisuMZ[_0xdb8588(0x16e)][_0xdb8588(0x57c)][_0xdb8588(0x2b9)](this,_0x2959d3,_0x2357df),this['callNextMethod']();},VisuMZ[_0x482454(0x16e)][_0x482454(0x5b8)]=Window_BattleLog[_0x482454(0x61b)][_0x482454(0x634)],Window_BattleLog[_0x482454(0x61b)]['performCollapse']=function(_0x10d1d2){const _0x44e0ae=_0x482454;VisuMZ[_0x44e0ae(0x16e)][_0x44e0ae(0x5b8)]['call'](this,_0x10d1d2),this[_0x44e0ae(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x46a)]=function(_0x339b74,_0x2c42ea){const _0x5c079b=_0x482454;_0x339b74[_0x5c079b(0x46a)](_0x2c42ea),this['callNextMethod']();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x321)]=function(_0x207895,_0x3deaba){const _0xbbbdb5=_0x482454,_0x16a7e0=_0x207895[_0xbbbdb5(0x29c)]();_0x16a7e0<=0x0?SoundManager['playEnemyAttack']():this[_0xbbbdb5(0x36f)](_0x3deaba,_0x16a7e0);},Window_BattleLog[_0x482454(0x61b)]['applyImmortal']=function(_0x469143,_0x438091,_0x11310a){const _0xf12e10=_0x482454,_0x4ac508=[_0x469143][_0xf12e10(0x515)](_0x438091);for(const _0x107366 of _0x4ac508){if(!_0x107366)continue;_0x107366[_0xf12e10(0x2c4)](_0x11310a);}this['callNextMethod']();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x7bf)]=function(_0x37a0ce){const _0x19405b=_0x482454;this[_0x19405b(0x1e1)]=_0x37a0ce;},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x6ca)]=function(_0x50eed4,_0x41d588){const _0x2819ea=_0x482454;for(const _0xbd640a of _0x50eed4){if(!_0xbd640a)continue;_0xbd640a[_0x2819ea(0x6ca)](_0x41d588);}this[_0x2819ea(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x2e3)]=function(_0x49d4c,_0x33b2ec,_0x3fdb9e,_0x1a68c2,_0x1081bd,_0x20dcca){const _0x3a3a56=_0x482454;_0x49d4c[_0x3a3a56(0x861)](_0x33b2ec,_0x3fdb9e,_0x1a68c2,_0x1081bd,_0x20dcca,-0x1),this[_0x3a3a56(0x7f4)]();},Window_BattleLog[_0x482454(0x61b)][_0x482454(0x8d3)]=function(_0x4ab646,_0x402b08,_0x1833c4,_0x815971,_0x599cac,_0x30d544,_0x44a553){const _0x447877=_0x482454,_0x407f8=Math[_0x447877(0x450)](..._0x402b08[_0x447877(0x597)](_0x2c01be=>_0x2c01be[_0x447877(0x1f6)]()['_baseX']-_0x2c01be[_0x447877(0x1f6)]()['mainSpriteWidth']()/0x2)),_0x1af7ce=Math[_0x447877(0x1e3)](..._0x402b08[_0x447877(0x597)](_0x22b972=>_0x22b972[_0x447877(0x1f6)]()[_0x447877(0x12b)]+_0x22b972[_0x447877(0x1f6)]()['mainSpriteWidth']()/0x2)),_0x436d79=Math[_0x447877(0x450)](..._0x402b08[_0x447877(0x597)](_0xd6fb10=>_0xd6fb10[_0x447877(0x1f6)]()[_0x447877(0x4c4)]-_0xd6fb10[_0x447877(0x1f6)]()['mainSpriteHeight']())),_0x2a6020=Math[_0x447877(0x1e3)](..._0x402b08[_0x447877(0x597)](_0x3adc04=>_0x3adc04['battler']()[_0x447877(0x4c4)])),_0x46f41d=_0x402b08[_0x447877(0x19d)](_0x4e15da=>_0x4e15da[_0x447877(0x761)]())['length'],_0x467180=_0x402b08[_0x447877(0x19d)](_0x5c9117=>_0x5c9117['isEnemy']())[_0x447877(0x403)];let _0x572005=0x0,_0x216f89=0x0;if(_0x1833c4[_0x447877(0x445)](/front/i))_0x572005=_0x46f41d>=_0x467180?_0x407f8:_0x1af7ce;else{if(_0x1833c4[_0x447877(0x445)](/middle/i))_0x572005=(_0x407f8+_0x1af7ce)/0x2,_0x44a553=-0x1;else _0x1833c4['match'](/back/i)&&(_0x572005=_0x46f41d>=_0x467180?_0x1af7ce:_0x407f8);}if(_0x1833c4[_0x447877(0x445)](/head/i))_0x216f89=_0x436d79;else{if(_0x1833c4[_0x447877(0x445)](/center/i))_0x216f89=(_0x436d79+_0x2a6020)/0x2;else _0x1833c4['match'](/base/i)&&(_0x216f89=_0x2a6020);}_0x4ab646['moveBattlerToPoint'](_0x572005,_0x216f89,_0x815971,_0x599cac,_0x30d544,_0x44a553),this[_0x447877(0x7f4)]();},Window_BattleLog['prototype'][_0x482454(0x3fb)]=function(_0x4299d0,_0x527af6,_0x5030dd){const _0x5bd31f=_0x482454;for(const _0x19ed97 of _0x4299d0){if(!_0x19ed97)continue;_0x19ed97[_0x5bd31f(0x70d)](_0x527af6,_0x5030dd);}this[_0x5bd31f(0x7f4)]();};